                              1 ;--------------------------------------------------------
                              2 ; File Created by SDCC : free open source ANSI-C Compiler
                              3 ; Version 3.0.0 #6037 (May 26 2011) (Linux)
                              4 ; This file was generated Thu Oct 18 21:21:39 2018
                              5 ;--------------------------------------------------------
                              6 	.module dcc_cal
                              7 	.optsdcc -mmcs51 --model-small
                              8 	
                              9 ;--------------------------------------------------------
                             10 ; Public variables in this module
                             11 ;--------------------------------------------------------
                             12 	.globl _rxdcc_clk_toggle
                             13 	.globl _txdcc_clk_toggle
                             14 	.globl _TF2
                             15 	.globl _TI
                             16 	.globl _RI
                             17 	.globl _EX12
                             18 	.globl _EX11
                             19 	.globl _EX10
                             20 	.globl _EX9
                             21 	.globl _EX8
                             22 	.globl _ES1
                             23 	.globl _PS1
                             24 	.globl _EX6
                             25 	.globl _EX5
                             26 	.globl _EX4
                             27 	.globl _EX3
                             28 	.globl _EX2
                             29 	.globl _EX7
                             30 	.globl _EA
                             31 	.globl _WDT
                             32 	.globl _ET2
                             33 	.globl _ES
                             34 	.globl _ET1
                             35 	.globl _EX1
                             36 	.globl _ET0
                             37 	.globl _EX0
                             38 	.globl _TF1
                             39 	.globl _TR1
                             40 	.globl _TF0
                             41 	.globl _TR0
                             42 	.globl _IE1
                             43 	.globl _IT1
                             44 	.globl _IE0
                             45 	.globl _IT0
                             46 	.globl _P3_7
                             47 	.globl _P3_6
                             48 	.globl _P3_5
                             49 	.globl _P3_4
                             50 	.globl _P3_3
                             51 	.globl _P3_2
                             52 	.globl _P3_1
                             53 	.globl _P3_0
                             54 	.globl _P2_7
                             55 	.globl _P2_6
                             56 	.globl _P2_5
                             57 	.globl _P2_4
                             58 	.globl _P2_3
                             59 	.globl _P2_2
                             60 	.globl _P2_1
                             61 	.globl _P2_0
                             62 	.globl _P1_7
                             63 	.globl _P1_6
                             64 	.globl _P1_5
                             65 	.globl _P1_4
                             66 	.globl _P1_3
                             67 	.globl _P1_2
                             68 	.globl _P1_1
                             69 	.globl _P1_0
                             70 	.globl _P0_7
                             71 	.globl _P0_6
                             72 	.globl _P0_5
                             73 	.globl _P0_4
                             74 	.globl _P0_3
                             75 	.globl _P0_2
                             76 	.globl _P0_1
                             77 	.globl _P0_0
                             78 	.globl _DMAC
                             79 	.globl _DMATA
                             80 	.globl _DMASA
                             81 	.globl _TMR2
                             82 	.globl _TMR1
                             83 	.globl _TMR0
                             84 	.globl _SRST
                             85 	.globl _B
                             86 	.globl _EIE
                             87 	.globl _ACC
                             88 	.globl _ADCON
                             89 	.globl _PSW
                             90 	.globl _TH2
                             91 	.globl _TL2
                             92 	.globl _RCAP2H
                             93 	.globl _RCAP2L
                             94 	.globl _T2CON
                             95 	.globl _CCEN
                             96 	.globl _IRCON
                             97 	.globl _S0RELH
                             98 	.globl _IP1
                             99 	.globl _IEN1
                            100 	.globl _DMAM1
                            101 	.globl _DMAM0
                            102 	.globl _DMASEL
                            103 	.globl _DMAC2
                            104 	.globl _DMAC1
                            105 	.globl _DMAC0
                            106 	.globl _P3
                            107 	.globl _S0RELL
                            108 	.globl _IP0
                            109 	.globl _IEN0
                            110 	.globl _DMAT2
                            111 	.globl _DMAT1
                            112 	.globl _DMAT0
                            113 	.globl _DMAS2
                            114 	.globl _DMAS1
                            115 	.globl _DMAS0
                            116 	.globl _P2
                            117 	.globl _IEN2
                            118 	.globl _SBUF
                            119 	.globl _SCON
                            120 	.globl _PSBANK
                            121 	.globl _DPS
                            122 	.globl _P1
                            123 	.globl _CKCON
                            124 	.globl _TH1
                            125 	.globl _TH0
                            126 	.globl _TL1
                            127 	.globl _TL0
                            128 	.globl _TMOD
                            129 	.globl _TCON
                            130 	.globl _PCON
                            131 	.globl _WDTREL
                            132 	.globl _DPH
                            133 	.globl _DPL
                            134 	.globl _P0
                            135 	.globl _sq_thrs_ratio_tb
                            136 	.globl _train_save_tb
                            137 	.globl _tx_tb
                            138 	.globl _UPHY_ANAREG_REV_0
                            139 	.globl _dfe_sm_save
                            140 	.globl _dfe_sm_dc
                            141 	.globl _dfe_sm
                            142 	.globl _cds28
                            143 	.globl _lnx_calx_align90_gm
                            144 	.globl _lnx_calx_align90_dac
                            145 	.globl _lnx_calx_align90_dummy_clk
                            146 	.globl _lnx_calx_eom_dpher
                            147 	.globl _lnx_calx_vdda_dll_eom_sel
                            148 	.globl _lnx_calx_dll_eom_gmsel
                            149 	.globl _lnx_calx_vdda_dll_sel
                            150 	.globl _lnx_calx_dll_gmsel
                            151 	.globl _lnx_calx_rxdcc_dll_hg
                            152 	.globl _lnx_calx_rxdcc_dll
                            153 	.globl _lnx_calx_txdcc_hg
                            154 	.globl _lnx_calx_txdcc
                            155 	.globl _lnx_calx_txdcc_pdiv_hg
                            156 	.globl _lnx_calx_txdcc_pdiv
                            157 	.globl _lnx_spdoft_tx_preset_index_lane
                            158 	.globl _lnx_cal_sellv_rxeomclk
                            159 	.globl _lnx_cal_sellv_rxsampler
                            160 	.globl _lnx_cal_sellv_txpre
                            161 	.globl _lnx_cal_sellv_rxdataclk
                            162 	.globl _lnx_cal_sellv_txclk
                            163 	.globl _lnx_cal_sellv_txdata
                            164 	.globl _lnx_cal_align90_gm
                            165 	.globl _lnx_cal_align90_dac
                            166 	.globl _lnx_cal_align90_dummy_clk
                            167 	.globl _lnx_cal_eom_dpher
                            168 	.globl _lnx_cal_vdda_dll_eom_sel
                            169 	.globl _lnx_cal_dll_eom_gmsel
                            170 	.globl _lnx_cal_vdda_dll_sel
                            171 	.globl _lnx_cal_dll_gmsel
                            172 	.globl _lnx_cal_rxdcc_eom_hg
                            173 	.globl _lnx_cal_rxdcc_eom
                            174 	.globl _lnx_cal_rxdcc_data_hg
                            175 	.globl _lnx_cal_rxdcc_data
                            176 	.globl _lnx_cal_rxdcc_dll_hg
                            177 	.globl _lnx_cal_rxdcc_dll
                            178 	.globl _lnx_cal_txdcc_hg
                            179 	.globl _lnx_cal_txdcc
                            180 	.globl _lnx_cal_txdcc_pdiv_hg
                            181 	.globl _lnx_cal_txdcc_pdiv
                            182 	.globl _cmx_cal_sllp_dac_fine_ring
                            183 	.globl _cmx_cal_pll_sllp_dac_coarse_ring
                            184 	.globl _cmx_cal_pll_speed_ring
                            185 	.globl _cmx_cal_plldcc
                            186 	.globl _cmx_cal_lccap_lsb
                            187 	.globl _cmx_cal_lccap_msb
                            188 	.globl _cmx_cal_lcvco_dac_msb
                            189 	.globl _cmx_cal_lcvco_dac_lsb
                            190 	.globl _cmx_cal_lcvco_dac
                            191 	.globl _local_tx_preset_tb
                            192 	.globl _train_g0_index
                            193 	.globl _train_g1_index
                            194 	.globl _train_gn1_index
                            195 	.globl _phase_save
                            196 	.globl _txffe_save
                            197 	.globl _rc_save
                            198 	.globl _phy_mode_lane_table
                            199 	.globl _speedtable
                            200 	.globl _min_gen
                            201 	.globl _max_gen
                            202 	.globl _phy_mode_cmn_table
                            203 	.globl _ring_speedtable
                            204 	.globl _lc_speedtable
                            205 	.globl _TXTRAIN_IF_REG0
                            206 	.globl _CDS_READ_MISC1
                            207 	.globl _CDS_READ_MISC0
                            208 	.globl _DFE_READ_F0D_RIGHT_ODD
                            209 	.globl _DFE_READ_F0D_RIGHT_EVEN
                            210 	.globl _DFE_READ_F0D_LEFT_ODD
                            211 	.globl _DFE_READ_F0D_LEFT_EVEN
                            212 	.globl _DFE_READ_F0D_ODD
                            213 	.globl _DFE_READ_F0D_EVEN
                            214 	.globl _DFE_READ_F0B_ODD
                            215 	.globl _DFE_READ_F0B_EVEN
                            216 	.globl _DFE_READ_F0A_ODD
                            217 	.globl _DFE_READ_F0A_EVEN
                            218 	.globl _DFE_READ_ODD_REG8
                            219 	.globl _DFE_READ_EVEN_REG8
                            220 	.globl _DFE_READ_ODD_REG7
                            221 	.globl _DFE_READ_ODD_REG6
                            222 	.globl _DFE_READ_ODD_REG5
                            223 	.globl _DFE_READ_ODD_REG4
                            224 	.globl _DFE_READ_ODD_REG3
                            225 	.globl _DFE_READ_ODD_REG2
                            226 	.globl _DFE_READ_ODD_REG1
                            227 	.globl _DFE_READ_ODD_REG0
                            228 	.globl _DFE_READ_EVEN_REG7
                            229 	.globl _DFE_READ_EVEN_REG6
                            230 	.globl _DFE_READ_EVEN_REG5
                            231 	.globl _DFE_READ_EVEN_REG4
                            232 	.globl _DFE_READ_EVEN_REG3
                            233 	.globl _DFE_READ_EVEN_REG2
                            234 	.globl _DFE_READ_EVEN_REG1
                            235 	.globl _DFE_READ_EVEN_REG0
                            236 	.globl _TX_TRAIN_IF_REG8
                            237 	.globl _TX_TRAIN_CTRL_LANE
                            238 	.globl _TX_TRAIN_IF_REG7
                            239 	.globl _TX_TRAIN_IF_REG6
                            240 	.globl _TX_TRAIN_IF_REG5
                            241 	.globl _TX_TRAIN_IF_REG4
                            242 	.globl _TRX_TRAIN_IF_INTERRUPT_CLEAR_LANE
                            243 	.globl _TRX_TRAIN_IF_INTERRUPT_MASK0_LANE
                            244 	.globl _TRX_TRAIN_IF_INTERRUPT_LANE
                            245 	.globl _TX_AMP_CTRL_REG0
                            246 	.globl _TX_DRV_RD_OUT_REG0
                            247 	.globl _LINK_TRAIN_MODE0
                            248 	.globl _TX_EMPH_CTRL_REG0
                            249 	.globl _TX_TRAIN_DEFAULT_REG5
                            250 	.globl _TX_TRAIN_DEFAULT_REG4
                            251 	.globl _TX_TRAIN_DEFAULT_REG3
                            252 	.globl _TX_TRAIN_DEFAULT_REG2
                            253 	.globl _TX_TRAIN_DEFAULT_REG1
                            254 	.globl _TX_TRAIN_DEFAULT_REG0
                            255 	.globl _TX_TRAIN_DRIVER_REG2
                            256 	.globl _TX_TRAIN_DRIVER_REG1
                            257 	.globl _TX_TRAIN_DRIVER_REG0
                            258 	.globl _TX_TRAIN_PATTTERN_REG0
                            259 	.globl _TX_TRAIN_IF_REG3
                            260 	.globl _TX_TRAIN_IF_REG2
                            261 	.globl _TX_TRAIN_IF_REG1
                            262 	.globl _TX_TRAIN_IF_REG0
                            263 	.globl _DME_DEC_REG1
                            264 	.globl _DME_DEC_REG0
                            265 	.globl _DME_ENC_REG2
                            266 	.globl _DME_ENC_REG1
                            267 	.globl _DME_ENC_REG0
                            268 	.globl _END_XDAT_CMN
                            269 	.globl _MCU_INFO_13
                            270 	.globl _MCU_INFO_12
                            271 	.globl _MCU_INFO_5
                            272 	.globl _MCU_INFO_4
                            273 	.globl _SYNC_INFO
                            274 	.globl _CDS_EYE_CLK_THR
                            275 	.globl _TX_SAVE_4
                            276 	.globl _TX_SAVE_3
                            277 	.globl _TX_SAVE_2
                            278 	.globl _TX_SAVE_1
                            279 	.globl _TX_SAVE_0
                            280 	.globl _ETH_PRESET1_TB
                            281 	.globl _ETH_PRESET0_TB
                            282 	.globl _SAS_PRESET2_TB
                            283 	.globl _SAS_PRESET1_TB
                            284 	.globl _SAS_PRESET0_TB
                            285 	.globl _G_SELLV_RXSAMPLER
                            286 	.globl _G_SELLV_RXDATACLK
                            287 	.globl _G_SELLV_RXEOMCLK
                            288 	.globl _G_SELLV_TXPRE
                            289 	.globl _G_SELLV_TXDATA
                            290 	.globl _G_SELLV_TXCLK
                            291 	.globl _TIMER_SEL3
                            292 	.globl _TIMER_SEL2
                            293 	.globl _TIMER_SEL1
                            294 	.globl _MCU_CONFIG1
                            295 	.globl _LOOP_CNTS
                            296 	.globl _CAL_DATA1
                            297 	.globl _MCU_CONFIG
                            298 	.globl _CAL_STATUS_READ
                            299 	.globl _CAL_TIME_OUT_AND_DIS
                            300 	.globl _CON_CAL_STEP_SIZE5
                            301 	.globl _CON_CAL_STEP_SIZE4
                            302 	.globl _CON_CAL_STEP_SIZE3
                            303 	.globl _CON_CAL_STEP_SIZE2
                            304 	.globl _CON_CAL_STEP_SIZE1
                            305 	.globl _CONTROL_CONFIG9
                            306 	.globl _CONTROL_CONFIG8
                            307 	.globl _TRAIN_IF_CONFIG
                            308 	.globl _CAL_DATA0
                            309 	.globl _CONTROL_CONFIG7
                            310 	.globl _CONTROL_CONFIG6
                            311 	.globl _CONTROL_CONFIG5
                            312 	.globl _CONTROL_CONFIG4
                            313 	.globl _CONTROL_CONFIG3
                            314 	.globl _CONTROL_CONFIG2
                            315 	.globl _CONTROL_CONFIG1
                            316 	.globl _CONTROL_CONFIG0
                            317 	.globl _FW_REV
                            318 	.globl _CID_REG1
                            319 	.globl _CID_REG0
                            320 	.globl _CMN_MCU_REG
                            321 	.globl _SET_LANE_ISR
                            322 	.globl _CMN_ISR_MASK_1
                            323 	.globl _CMN_ISR_1
                            324 	.globl _CMN_MCU_TIMER3_CONTROL
                            325 	.globl _CMN_MCU_TIMER2_CONTROL
                            326 	.globl _CMN_MCU_TIMER1_CONTROL
                            327 	.globl _CMN_MCU_TIMER0_CONTROL
                            328 	.globl _CMN_MCU_TIMER_CTRL_5_LANE
                            329 	.globl _CMN_MCU_TIMER_CTRL_4_LANE
                            330 	.globl _CMN_MCU_TIMER_CTRL_3_LANE
                            331 	.globl _CMN_MCU_TIMER_CTRL_2_LANE
                            332 	.globl _CMN_MCU_TIMER_CONTROL
                            333 	.globl _CMN_CACHE_DEBUG1
                            334 	.globl _CMN_MCU_GPIO
                            335 	.globl _CMN_ISR_CLEAR_2
                            336 	.globl _CMN_ISR_MASK_2
                            337 	.globl _CMN_ISR_2
                            338 	.globl _MCU_INT_ADDR
                            339 	.globl _CMN_CACHE_DEBUG0
                            340 	.globl _MCU_SDT_CMN
                            341 	.globl _XDATA_MEM_CHECKSUM_CMN_2
                            342 	.globl _XDATA_MEM_CHECKSUM_CMN_1
                            343 	.globl _XDATA_MEM_CHECKSUM_CMN_0
                            344 	.globl _TEST5
                            345 	.globl _PM_CMN_REG2
                            346 	.globl _INPUT_CMN_PIN_REG3
                            347 	.globl __FIELDNAME_
                            348 	.globl _CMN_CALIBRATION
                            349 	.globl _OUTPUT_CMN_PIN_REG0
                            350 	.globl _SPD_CMN_REG1
                            351 	.globl _CLKGEN_CMN_REG1
                            352 	.globl _PLLCAL_REG1
                            353 	.globl _PLLCAL_REG0
                            354 	.globl _ANA_TSEN_CONTROL
                            355 	.globl _INPUT_CMN_PIN_REG2
                            356 	.globl _INPUT_CMN_PIN_REG1
                            357 	.globl _INPUT_CMN_PIN_REG0
                            358 	.globl _PM_CMN_REG1
                            359 	.globl _SYSTEM
                            360 	.globl _TEST4
                            361 	.globl _TEST3
                            362 	.globl _TEST2
                            363 	.globl _TEST1
                            364 	.globl _TEST0
                            365 	.globl _MCU_SYNC2
                            366 	.globl _MCU_SYNC1
                            367 	.globl _MEM_IRQ_CLEAR
                            368 	.globl _APB_CONTROL_REG
                            369 	.globl _ANA_IF_CMN_REG0
                            370 	.globl _MEM_IRQ_MASK
                            371 	.globl _MEM_IRQ
                            372 	.globl _ANA_IF_CMN_REG1
                            373 	.globl _MEM_CMN_ECC_ERR_ADDRESS0
                            374 	.globl _MCU_INFO_3
                            375 	.globl _MCU_INFO_2
                            376 	.globl _MCU_INFO_1
                            377 	.globl _MCU_INFO_0
                            378 	.globl _MEMORY_CONTROL_4
                            379 	.globl _MEMORY_CONTROL_3
                            380 	.globl _MEMORY_CONTROL_2
                            381 	.globl _MEMORY_CONTROL_1
                            382 	.globl _MEMORY_CONTROL_0
                            383 	.globl _MCU_DEBUG1
                            384 	.globl _MCU_DEBUG0
                            385 	.globl _MCU_CONTROL_4
                            386 	.globl _MCU_CONTROL_3
                            387 	.globl _MCU_CONTROL_2
                            388 	.globl _MCU_CONTROL_1
                            389 	.globl _MCU_CONTROL_0
                            390 	.globl _GLOB_L1_SUBSTATES_CFG
                            391 	.globl _GLOB_PIPE_REVISION
                            392 	.globl _GLOB_BIST_DATA_HI
                            393 	.globl _GLOB_BIST_SEQR_CFG
                            394 	.globl _GLOB_BIST_RESULT
                            395 	.globl _GLOB_BIST_MASK
                            396 	.globl _GLOB_BIST_START
                            397 	.globl _GLOB_BIST_LANE_TYPE
                            398 	.globl _GLOB_BIST_CTRL
                            399 	.globl _GLOB_DP_BAL_CFG4
                            400 	.globl _GLOB_DP_BAL_CFG2
                            401 	.globl _GLOB_DP_BAL_CFG0
                            402 	.globl _GLOB_PM_DP_CTRL
                            403 	.globl _GLOB_COUNTER_HI
                            404 	.globl _GLOB_COUNTER_CTRL
                            405 	.globl _GLOB_PM_CFG0
                            406 	.globl _GLOB_DP_SAL_CFG5
                            407 	.globl _GLOB_DP_SAL_CFG3
                            408 	.globl _GLOB_DP_SAL_CFG1
                            409 	.globl _GLOB_DP_SAL_CFG
                            410 	.globl _GLOB_MISC_CTRL
                            411 	.globl _GLOB_CLK_SRC_HI
                            412 	.globl _GLOB_CLK_SRC_LO
                            413 	.globl _GLOB_RST_CLK_CTRL
                            414 	.globl _DFE_STATIC_REG6
                            415 	.globl _DFE_STATIC_REG5
                            416 	.globl _DFE_STATIC_REG4
                            417 	.globl _DFE_STATIC_REG3
                            418 	.globl _DFE_STATIC_REG1
                            419 	.globl _DFE_STATIC_REG0
                            420 	.globl _RX_CMN_0
                            421 	.globl _SRIS_REG1
                            422 	.globl _SRIS_REG0
                            423 	.globl _DTX_PHY_ALIGN_REG2
                            424 	.globl _DTX_PHY_ALIGN_REG1
                            425 	.globl _DTX_PHY_ALIGN_REG0
                            426 	.globl _DTX_REG4
                            427 	.globl _DTX_REG3
                            428 	.globl _DTX_REG2
                            429 	.globl _DTX_REG1
                            430 	.globl _DTX_REG0
                            431 	.globl _TX_CMN_REG
                            432 	.globl _END_XDAT_LANE
                            433 	.globl _TRAIN_CONTROL_17
                            434 	.globl _TRAIN_CONTROL_16
                            435 	.globl _TRAIN_CONTROL_15
                            436 	.globl _TRAIN_CONTROL_14
                            437 	.globl _TRAIN_CONTROL_13
                            438 	.globl _ESM_ERR_N_CNT_LOW_LANE
                            439 	.globl _ESM_POP_N_CNT_LOW_LANE
                            440 	.globl _TRAIN_CONTROL_12
                            441 	.globl _TRAIN_CONTROL_11
                            442 	.globl _TRAIN_CONTROL_10
                            443 	.globl _TRAIN_CONTROL_9
                            444 	.globl _TRAIN_CONTROL_8
                            445 	.globl _TRAIN_CONTROL_7
                            446 	.globl _TRAIN_CONTROL_6
                            447 	.globl _TRAIN_CONTROL_5
                            448 	.globl _TRAIN_CONTROL_4
                            449 	.globl _TRAIN_CONTROL_3
                            450 	.globl _ESM_ERR_POP_CNT_HIGH_LANE
                            451 	.globl _ESM_ERR_P_CNT_LOW_LANE
                            452 	.globl _ESM_POP_P_CNT_LOW_LANE
                            453 	.globl _CDS_CTRL_REG1
                            454 	.globl _CDS_CTRL_REG0
                            455 	.globl _DFE_CONTROL_11
                            456 	.globl _DFE_CONTROL_10
                            457 	.globl _DFE_CONTROL_9
                            458 	.globl _DFE_CONTROL_8
                            459 	.globl _DFE_CONTROL_7
                            460 	.globl _DFE_TEST_5
                            461 	.globl _DFE_TEST_4
                            462 	.globl _DFE_TEST_1
                            463 	.globl _DFE_TEST_0
                            464 	.globl _DFE_CONTROL_6
                            465 	.globl _TRAIN_PARA_3
                            466 	.globl _TRAIN_PARA_2
                            467 	.globl _TRAIN_PARA_1
                            468 	.globl _TRAIN_PARA_0
                            469 	.globl _DLL_CAL
                            470 	.globl _RPTA_CONFIG_1
                            471 	.globl _RPTA_CONFIG_0
                            472 	.globl _TRAIN_CONTROL_2
                            473 	.globl _TRAIN_CONTROL_1
                            474 	.globl _TRAIN_CONTROL_0
                            475 	.globl _DFE_CONTROL_5
                            476 	.globl _DFE_CONTROL_4
                            477 	.globl _DFE_CONTROL_3
                            478 	.globl _DFE_CONTROL_2
                            479 	.globl _DFE_CONTROL_1
                            480 	.globl _DFE_CONTROL_0
                            481 	.globl _TRX_TRAIN_IF_TIMERS_ENABLE_LANE
                            482 	.globl _TRX_TRAIN_IF_TIMERS2_LANE
                            483 	.globl _TRX_TRAIN_IF_TIMERS1_LANE
                            484 	.globl _PHY_LOCAL_VALUE_LANE
                            485 	.globl _PHY_REMOTE_CTRL_VALUE_LANE
                            486 	.globl _PHY_REMOTE_CTRL_COMMAND_LANE
                            487 	.globl _CAL_SAVE_DATA3_LANE
                            488 	.globl _CAL_SAVE_DATA2_LANE
                            489 	.globl _CAL_SAVE_DATA1_LANE
                            490 	.globl _CAL_CTRL4_LANE
                            491 	.globl _CAL_CTRL3_LANE
                            492 	.globl _CAL_CTRL2_LANE
                            493 	.globl _CAL_CTRL1_LANE
                            494 	.globl _LANE_MARGIN_REG0
                            495 	.globl _EOM_VLD_REG4
                            496 	.globl _EOM_REG0
                            497 	.globl _EOM_ERR_REG3
                            498 	.globl _EOM_ERR_REG2
                            499 	.globl _EOM_ERR_REG1
                            500 	.globl _EOM_ERR_REG0
                            501 	.globl _EOM_VLD_REG3
                            502 	.globl _EOM_VLD_REG2
                            503 	.globl _EOM_VLD_REG1
                            504 	.globl _EOM_VLD_REG0
                            505 	.globl _DFE_STATIC_LANE_REG6
                            506 	.globl _DFE_STATIC_LANE_REG5
                            507 	.globl _DFE_STATIC_LANE_REG4
                            508 	.globl _DFE_STATIC_LANE_REG3
                            509 	.globl _DFE_STATIC_LANE_REG1
                            510 	.globl _DFE_STATIC_LANE_REG0
                            511 	.globl _DFE_DCE_REG0
                            512 	.globl _CAL_OFST_REG2
                            513 	.globl _CAL_OFST_REG1
                            514 	.globl _CAL_OFST_REG0
                            515 	.globl _DFE_READ_ODD_2C_REG8
                            516 	.globl _DFE_READ_EVEN_2C_REG8
                            517 	.globl _DFE_READ_ODD_2C_REG7
                            518 	.globl _DFE_READ_ODD_2C_REG6
                            519 	.globl _DFE_READ_ODD_2C_REG5
                            520 	.globl _DFE_READ_ODD_2C_REG4
                            521 	.globl _DFE_READ_ODD_2C_REG3
                            522 	.globl _DFE_READ_ODD_2C_REG2
                            523 	.globl _DFE_READ_ODD_2C_REG1
                            524 	.globl _DFE_READ_ODD_2C_REG0
                            525 	.globl _DFE_READ_EVEN_2C_REG7
                            526 	.globl _DFE_READ_EVEN_2C_REG6
                            527 	.globl _DFE_READ_EVEN_2C_REG5
                            528 	.globl _DFE_READ_EVEN_2C_REG4
                            529 	.globl _DFE_READ_EVEN_2C_REG3
                            530 	.globl _DFE_READ_EVEN_2C_REG2
                            531 	.globl _DFE_READ_EVEN_2C_REG1
                            532 	.globl _DFE_READ_EVEN_2C_REG0
                            533 	.globl _DFE_READ_ODD_SM_REG8
                            534 	.globl _DFE_READ_EVEN_SM_REG8
                            535 	.globl _DFE_READ_ODD_SM_REG7
                            536 	.globl _DFE_READ_ODD_SM_REG6
                            537 	.globl _DFE_READ_ODD_SM_REG5
                            538 	.globl _DFE_READ_ODD_SM_REG4
                            539 	.globl _DFE_READ_ODD_SM_REG3
                            540 	.globl _DFE_READ_ODD_SM_REG2
                            541 	.globl _DFE_READ_ODD_SM_REG1
                            542 	.globl _DFE_READ_ODD_SM_REG0
                            543 	.globl _DFE_READ_EVEN_SM_REG7
                            544 	.globl _DFE_READ_EVEN_SM_REG6
                            545 	.globl _DFE_READ_EVEN_SM_REG5
                            546 	.globl _DFE_READ_EVEN_SM_REG4
                            547 	.globl _DFE_READ_EVEN_SM_REG3
                            548 	.globl _DFE_READ_EVEN_SM_REG2
                            549 	.globl _DFE_READ_EVEN_SM_REG1
                            550 	.globl _DFE_READ_EVEN_SM_REG0
                            551 	.globl _DFE_FEXT_ODD_REG7
                            552 	.globl _DFE_FEXT_ODD_REG6
                            553 	.globl _DFE_FEXT_ODD_REG5
                            554 	.globl _DFE_FEXT_ODD_REG4
                            555 	.globl _DFE_FEXT_ODD_REG3
                            556 	.globl _DFE_FEXT_ODD_REG2
                            557 	.globl _DFE_FEXT_ODD_REG1
                            558 	.globl _DFE_FEXT_ODD_REG0
                            559 	.globl _DFE_FEXT_EVEN_REG7
                            560 	.globl _DFE_FEXT_EVEN_REG6
                            561 	.globl _DFE_FEXT_EVEN_REG5
                            562 	.globl _DFE_FEXT_EVEN_REG4
                            563 	.globl _DFE_FEXT_EVEN_REG3
                            564 	.globl _DFE_FEXT_EVEN_REG2
                            565 	.globl _DFE_FEXT_EVEN_REG1
                            566 	.globl _DFE_FEXT_EVEN_REG0
                            567 	.globl _DFE_DC_ODD_REG8
                            568 	.globl _DFE_DC_EVEN_REG8
                            569 	.globl _DFE_FEN_ODD_REG
                            570 	.globl _DFE_FEN_EVEN_REG
                            571 	.globl _DFE_STEP_REG1
                            572 	.globl _DFE_STEP_REG0
                            573 	.globl _DFE_ANA_REG1
                            574 	.globl _DFE_ANA_REG0
                            575 	.globl _DFE_CTRL_REG4
                            576 	.globl _RX_EQ_CLK_CTRL
                            577 	.globl _DFE_CTRL_REG3
                            578 	.globl _DFE_CTRL_REG2
                            579 	.globl _DFE_CTRL_REG1
                            580 	.globl _DFE_CTRL_REG0
                            581 	.globl _PT_COUNTER2
                            582 	.globl _PT_COUNTER1
                            583 	.globl _PT_COUNTER0
                            584 	.globl _PT_USER_PATTERN2
                            585 	.globl _PT_USER_PATTERN1
                            586 	.globl _PT_USER_PATTERN0
                            587 	.globl _PT_CONTROL1
                            588 	.globl _PT_CONTROL0
                            589 	.globl _XDATA_MEM_CHECKSUM_LANE1
                            590 	.globl _XDATA_MEM_CHECKSUM_LANE0
                            591 	.globl _MEM_ECC_ERR_ADDRESS0
                            592 	.globl _MCU_COMMAND0
                            593 	.globl _MCU_INT_CONTROL_13
                            594 	.globl _MCU_WDT_LANE
                            595 	.globl _MCU_IRQ_ISR_LANE
                            596 	.globl _ANA_IF_DFEO_REG0
                            597 	.globl _ANA_IF_DFEE_REG0
                            598 	.globl _ANA_IF_TRX_REG0
                            599 	.globl _EXT_INT_CONTROL
                            600 	.globl _MCU_DEBUG_LANE
                            601 	.globl _MCU_DEBUG3_LANE
                            602 	.globl _MCU_DEBUG2_LANE
                            603 	.globl _MCU_DEBUG1_LANE
                            604 	.globl _MCU_DEBUG0_LANE
                            605 	.globl _MCU_TIMER_CTRL_7_LANE
                            606 	.globl _MCU_TIMER_CTRL_6_LANE
                            607 	.globl _MCU_TIMER_CTRL_5_LANE
                            608 	.globl _MCU_TIMER_CTRL_4_LANE
                            609 	.globl _MCU_TIMER_CTRL_3_LANE
                            610 	.globl _MCU_TIMER_CTRL_2_LANE
                            611 	.globl _MCU_TIMER_CTRL_1_LANE
                            612 	.globl _MCU_MEM_REG2_LANE
                            613 	.globl _MCU_MEM_REG1_LANE
                            614 	.globl _MCU_IRQ_MASK_LANE
                            615 	.globl _MCU_IRQ_LANE
                            616 	.globl _MCU_TIMER3_CONTROL
                            617 	.globl _MCU_TIMER2_CONTROL
                            618 	.globl _MCU_TIMER1_CONTROL
                            619 	.globl _MCU_TIMER0_CONTROL
                            620 	.globl _MCU_TIMER_CONTROL
                            621 	.globl _MCU_INT12_CONTROL
                            622 	.globl _MCU_INT11_CONTROL
                            623 	.globl _MCU_INT10_CONTROL
                            624 	.globl _MCU_INT9_CONTROL
                            625 	.globl _MCU_INT8_CONTROL
                            626 	.globl _MCU_INT7_CONTROL
                            627 	.globl _MCU_INT6_CONTROL
                            628 	.globl _MCU_INT5_CONTROL
                            629 	.globl _MCU_INT4_CONTROL
                            630 	.globl _MCU_INT3_CONTROL
                            631 	.globl _MCU_INT2_CONTROL
                            632 	.globl _MCU_INT1_CONTROL
                            633 	.globl _MCU_INT0_CONTROL
                            634 	.globl _MCU_STATUS3_LANE
                            635 	.globl _MCU_STATUS2_LANE
                            636 	.globl _MCU_STATUS1_LANE
                            637 	.globl _MCU_STATUS0_LANE
                            638 	.globl _LANE_SYSTEM0
                            639 	.globl _CACHE_DEBUG1
                            640 	.globl _CACHE_DEBUG0
                            641 	.globl _MCU_GPIO
                            642 	.globl _MCU_CONTROL_LANE
                            643 	.globl _LANE_32G_PRESET_CFG16_LANE
                            644 	.globl _LANE_32G_PRESET_CFG14_LANE
                            645 	.globl _LANE_32G_PRESET_CFG12_LANE
                            646 	.globl _LANE_32G_PRESET_CFG10_LANE
                            647 	.globl _LANE_32G_PRESET_CFG8_LANE
                            648 	.globl _LANE_32G_PRESET_CFG6_LANE
                            649 	.globl _LANE_32G_PRESET_CFG4_LANE
                            650 	.globl _LANE_32G_PRESET_CFG2_LANE
                            651 	.globl _LANE_32G_PRESET_CFG0_LANE
                            652 	.globl _LANE_EQ_32G_CFG0_LANE
                            653 	.globl _LANE_16G_PRESET_CFG16_LANE
                            654 	.globl _LANE_16G_PRESET_CFG14_LANE
                            655 	.globl _LANE_16G_PRESET_CFG12_LANE
                            656 	.globl _LANE_16G_PRESET_CFG10_LANE
                            657 	.globl _LANE_16G_PRESET_CFG8_LANE
                            658 	.globl _LANE_16G_PRESET_CFG6_LANE
                            659 	.globl _LANE_16G_PRESET_CFG4_LANE
                            660 	.globl _LANE_16G_PRESET_CFG2_LANE
                            661 	.globl _LANE_16G_PRESET_CFG0_LANE
                            662 	.globl _LANE_EQ_16G_CFG0_LANE
                            663 	.globl _LANE_REMOTE_SET_LANE
                            664 	.globl _LANE_COEFF_MAX0_LANE
                            665 	.globl _LANE_PRESET_CFG16_LANE
                            666 	.globl _LANE_PRESET_CFG14_LANE
                            667 	.globl _LANE_PRESET_CFG12_LANE
                            668 	.globl _LANE_PRESET_CFG10_LANE
                            669 	.globl _LANE_PRESET_CFG8_LANE
                            670 	.globl _LANE_PRESET_CFG6_LANE
                            671 	.globl _LANE_PRESET_CFG4_LANE
                            672 	.globl _LANE_PRESET_CFG2_LANE
                            673 	.globl _LANE_PRESET_CFG0_LANE
                            674 	.globl _LANE_EQ_CFG1_LANE
                            675 	.globl _LANE_EQ_CFG0_LANE
                            676 	.globl _LANE_USB_DP_CFG2_LANE
                            677 	.globl _LANE_USB_DP_CFG1_LANE
                            678 	.globl _LANE_DP_PIE8_CFG0_LANE
                            679 	.globl _LANE_CFG_STATUS3_LANE
                            680 	.globl _LANE_CFG4
                            681 	.globl _LANE_CFG2_LANE
                            682 	.globl _LANE_CFG_STATUS2_LANE
                            683 	.globl _LANE_STATUS0
                            684 	.globl _LANE_CFG0
                            685 	.globl _SQ_REG0
                            686 	.globl _DTL_REG3
                            687 	.globl _DTL_REG2
                            688 	.globl _DTL_REG1
                            689 	.globl _DTL_REG0
                            690 	.globl _RX_LANE_INTERRUPT_REG1
                            691 	.globl _RX_CALIBRATION_REG
                            692 	.globl _INPUT_RX_PIN_REG3_LANE
                            693 	.globl _RX_DATA_PATH_REG
                            694 	.globl _RX_LANE_INTERRUPT_MASK
                            695 	.globl _RX_LANE_INTERRUPT
                            696 	.globl _CDR_LOCK_REG
                            697 	.globl _FRAME_SYNC_DET_REG6
                            698 	.globl _FRAME_SYNC_DET_REG5
                            699 	.globl _FRAME_SYNC_DET_REG4
                            700 	.globl _FRAME_SYNC_DET_REG3
                            701 	.globl _FRAME_SYNC_DET_REG2
                            702 	.globl _FRAME_SYNC_DET_REG1
                            703 	.globl _FRAME_SYNC_DET_REG0
                            704 	.globl _CLKGEN_RX_LANE_REG1_LANE
                            705 	.globl _DIG_RX_RSVD_REG0
                            706 	.globl _SPD_CTRL_RX_LANE_REG1_LANE
                            707 	.globl _INPUT_RX_PIN_REG2_LANE
                            708 	.globl _INPUT_RX_PIN_REG1_LANE
                            709 	.globl _INPUT_RX_PIN_REG0_LANE
                            710 	.globl _RX_SYSTEM_LANE
                            711 	.globl _PM_CTRL_RX_LANE_REG1_LANE
                            712 	.globl _MON_TOP
                            713 	.globl _ANALOG_TX_REALTIME_REG_1
                            714 	.globl _SPD_CTRL_INTERRUPT_CLEAR_REG1_LANE
                            715 	.globl _PM_CTRL_INTERRUPT_ISR_REG1_LANE
                            716 	.globl __FIELDNAME__LANE
                            717 	.globl _INPUT_TX_PIN_REG5_LANE
                            718 	.globl _DIG_TX_RSVD_REG0
                            719 	.globl _TX_CALIBRATION_LANE
                            720 	.globl _INPUT_TX_PIN_REG4_LANE
                            721 	.globl _TX_SYSTEM_LANE
                            722 	.globl _SPD_CTRL_TX_LANE_REG1_LANE
                            723 	.globl _SPD_CTRL_INTERRUPT_REG2
                            724 	.globl _SPD_CTRL_INTERRUPT_REG1_LANE
                            725 	.globl _TX_SPEED_CONVERT_LANE
                            726 	.globl _CLKGEN_TX_LANE_REG1_LANE
                            727 	.globl _PM_CTRL_INTERRUPT_REG2
                            728 	.globl _PM_CTRL_INTERRUPT_REG1_LANE
                            729 	.globl _INPUT_TX_PIN_REG3_LANE
                            730 	.globl _INPUT_TX_PIN_REG2_LANE
                            731 	.globl _INPUT_TX_PIN_REG1_LANE
                            732 	.globl _INPUT_TX_PIN_REG0_LANE
                            733 	.globl _PM_CTRL_TX_LANE_REG2_LANE
                            734 	.globl _PM_CTRL_TX_LANE_REG1_LANE
                            735 	.globl _UPHY14_CMN_ANAREG_TOP_214
                            736 	.globl _UPHY14_CMN_ANAREG_TOP_213
                            737 	.globl _UPHY14_CMN_ANAREG_TOP_212
                            738 	.globl _UPHY14_CMN_ANAREG_TOP_211
                            739 	.globl _UPHY14_CMN_ANAREG_TOP_210
                            740 	.globl _UPHY14_CMN_ANAREG_TOP_209
                            741 	.globl _UPHY14_CMN_ANAREG_TOP_208
                            742 	.globl _UPHY14_CMN_ANAREG_TOP_207
                            743 	.globl _UPHY14_CMN_ANAREG_TOP_206
                            744 	.globl _UPHY14_CMN_ANAREG_TOP_205
                            745 	.globl _UPHY14_CMN_ANAREG_TOP_204
                            746 	.globl _UPHY14_CMN_ANAREG_TOP_203
                            747 	.globl _UPHY14_CMN_ANAREG_TOP_202
                            748 	.globl _UPHY14_CMN_ANAREG_TOP_201
                            749 	.globl _UPHY14_CMN_ANAREG_TOP_200
                            750 	.globl _UPHY14_CMN_ANAREG_TOP_199
                            751 	.globl _UPHY14_CMN_ANAREG_TOP_198
                            752 	.globl _UPHY14_CMN_ANAREG_TOP_197
                            753 	.globl _UPHY14_CMN_ANAREG_TOP_196
                            754 	.globl _UPHY14_CMN_ANAREG_TOP_195
                            755 	.globl _UPHY14_CMN_ANAREG_TOP_194
                            756 	.globl _UPHY14_CMN_ANAREG_TOP_193
                            757 	.globl _UPHY14_CMN_ANAREG_TOP_192
                            758 	.globl _UPHY14_CMN_ANAREG_TOP_191
                            759 	.globl _UPHY14_CMN_ANAREG_TOP_190
                            760 	.globl _UPHY14_CMN_ANAREG_TOP_189
                            761 	.globl _UPHY14_CMN_ANAREG_TOP_188
                            762 	.globl _UPHY14_CMN_ANAREG_TOP_187
                            763 	.globl _UPHY14_CMN_ANAREG_TOP_186
                            764 	.globl _UPHY14_CMN_ANAREG_TOP_185
                            765 	.globl _UPHY14_CMN_ANAREG_TOP_184
                            766 	.globl _UPHY14_CMN_ANAREG_TOP_183
                            767 	.globl _UPHY14_CMN_ANAREG_TOP_182
                            768 	.globl _UPHY14_CMN_ANAREG_TOP_181
                            769 	.globl _UPHY14_CMN_ANAREG_TOP_180
                            770 	.globl _UPHY14_CMN_ANAREG_TOP_179
                            771 	.globl _UPHY14_CMN_ANAREG_TOP_178
                            772 	.globl _UPHY14_CMN_ANAREG_TOP_177
                            773 	.globl _UPHY14_CMN_ANAREG_TOP_176
                            774 	.globl _UPHY14_CMN_ANAREG_TOP_175
                            775 	.globl _UPHY14_CMN_ANAREG_TOP_174
                            776 	.globl _UPHY14_CMN_ANAREG_TOP_173
                            777 	.globl _UPHY14_CMN_ANAREG_TOP_172
                            778 	.globl _UPHY14_CMN_ANAREG_TOP_171
                            779 	.globl _UPHY14_CMN_ANAREG_TOP_170
                            780 	.globl _UPHY14_CMN_ANAREG_TOP_169
                            781 	.globl _UPHY14_CMN_ANAREG_TOP_168
                            782 	.globl _UPHY14_CMN_ANAREG_TOP_167
                            783 	.globl _UPHY14_CMN_ANAREG_TOP_166
                            784 	.globl _UPHY14_CMN_ANAREG_TOP_165
                            785 	.globl _UPHY14_CMN_ANAREG_TOP_164
                            786 	.globl _UPHY14_CMN_ANAREG_TOP_163
                            787 	.globl _UPHY14_CMN_ANAREG_TOP_162
                            788 	.globl _UPHY14_CMN_ANAREG_TOP_161
                            789 	.globl _UPHY14_CMN_ANAREG_TOP_160
                            790 	.globl _UPHY14_CMN_ANAREG_TOP_159
                            791 	.globl _UPHY14_CMN_ANAREG_TOP_158
                            792 	.globl _UPHY14_CMN_ANAREG_TOP_157
                            793 	.globl _UPHY14_CMN_ANAREG_TOP_156
                            794 	.globl _UPHY14_CMN_ANAREG_TOP_155
                            795 	.globl _UPHY14_CMN_ANAREG_TOP_154
                            796 	.globl _UPHY14_CMN_ANAREG_TOP_153
                            797 	.globl _UPHY14_CMN_ANAREG_TOP_152
                            798 	.globl _UPHY14_CMN_ANAREG_TOP_151
                            799 	.globl _UPHY14_CMN_ANAREG_TOP_150
                            800 	.globl _UPHY14_CMN_ANAREG_TOP_149
                            801 	.globl _UPHY14_CMN_ANAREG_TOP_148
                            802 	.globl _UPHY14_CMN_ANAREG_TOP_147
                            803 	.globl _UPHY14_CMN_ANAREG_TOP_146
                            804 	.globl _UPHY14_CMN_ANAREG_TOP_145
                            805 	.globl _UPHY14_CMN_ANAREG_TOP_144
                            806 	.globl _UPHY14_CMN_ANAREG_TOP_143
                            807 	.globl _UPHY14_CMN_ANAREG_TOP_142
                            808 	.globl _UPHY14_CMN_ANAREG_TOP_141
                            809 	.globl _UPHY14_CMN_ANAREG_TOP_140
                            810 	.globl _UPHY14_CMN_ANAREG_TOP_139
                            811 	.globl _UPHY14_CMN_ANAREG_TOP_138
                            812 	.globl _UPHY14_CMN_ANAREG_TOP_137
                            813 	.globl _UPHY14_CMN_ANAREG_TOP_136
                            814 	.globl _UPHY14_CMN_ANAREG_TOP_135
                            815 	.globl _UPHY14_CMN_ANAREG_TOP_134
                            816 	.globl _UPHY14_CMN_ANAREG_TOP_133
                            817 	.globl _UPHY14_CMN_ANAREG_TOP_132
                            818 	.globl _UPHY14_CMN_ANAREG_TOP_131
                            819 	.globl _UPHY14_CMN_ANAREG_TOP_130
                            820 	.globl _UPHY14_CMN_ANAREG_TOP_129
                            821 	.globl _UPHY14_CMN_ANAREG_TOP_128
                            822 	.globl _ANA_DFEO_REG_0B
                            823 	.globl _ANA_DFEO_REG_0A
                            824 	.globl _ANA_DFEO_REG_09
                            825 	.globl _ANA_DFEO_REG_08
                            826 	.globl _ANA_DFEO_REG_07
                            827 	.globl _ANA_DFEO_REG_06
                            828 	.globl _ANA_DFEO_REG_05
                            829 	.globl _ANA_DFEO_REG_04
                            830 	.globl _ANA_DFEO_REG_03
                            831 	.globl _ANA_DFEO_REG_02
                            832 	.globl _ANA_DFEO_REG_01
                            833 	.globl _ANA_DFEO_REG_00
                            834 	.globl _ANA_DFEO_REG_27
                            835 	.globl _ANA_DFEO_REG_26
                            836 	.globl _ANA_DFEO_REG_25
                            837 	.globl _ANA_DFEO_REG_24
                            838 	.globl _ANA_DFEO_REG_23
                            839 	.globl _ANA_DFEO_REG_22
                            840 	.globl _ANA_DFEO_REG_21
                            841 	.globl _ANA_DFEO_REG_20
                            842 	.globl _ANA_DFEO_REG_1F
                            843 	.globl _ANA_DFEO_REG_1E
                            844 	.globl _ANA_DFEO_REG_1D
                            845 	.globl _ANA_DFEO_REG_1C
                            846 	.globl _ANA_DFEO_REG_1B
                            847 	.globl _ANA_DFEO_REG_1A
                            848 	.globl _ANA_DFEO_REG_19
                            849 	.globl _ANA_DFEO_REG_18
                            850 	.globl _ANA_DFEO_REG_17
                            851 	.globl _ANA_DFEO_REG_16
                            852 	.globl _ANA_DFEO_REG_15
                            853 	.globl _ANA_DFEO_REG_14
                            854 	.globl _ANA_DFEO_REG_13
                            855 	.globl _ANA_DFEO_REG_12
                            856 	.globl _ANA_DFEO_REG_11
                            857 	.globl _ANA_DFEO_REG_10
                            858 	.globl _ANA_DFEO_REG_0F
                            859 	.globl _ANA_DFEO_REG_0E
                            860 	.globl _ANA_DFEO_REG_0D
                            861 	.globl _ANA_DFEO_REG_0C
                            862 	.globl _ANA_DFEE_REG_1D
                            863 	.globl _ANA_DFEE_REG_1C
                            864 	.globl _ANA_DFEE_REG_1B
                            865 	.globl _ANA_DFEE_REG_1A
                            866 	.globl _ANA_DFEE_REG_19
                            867 	.globl _ANA_DFEE_REG_18
                            868 	.globl _ANA_DFEE_REG_17
                            869 	.globl _ANA_DFEE_REG_16
                            870 	.globl _ANA_DFEE_REG_15
                            871 	.globl _ANA_DFEE_REG_14
                            872 	.globl _ANA_DFEE_REG_13
                            873 	.globl _ANA_DFEE_REG_12
                            874 	.globl _ANA_DFEE_REG_11
                            875 	.globl _ANA_DFEE_REG_10
                            876 	.globl _ANA_DFEE_REG_0F
                            877 	.globl _ANA_DFEE_REG_0E
                            878 	.globl _ANA_DFEE_REG_0D
                            879 	.globl _ANA_DFEE_REG_0C
                            880 	.globl _ANA_DFEE_REG_0B
                            881 	.globl _ANA_DFEE_REG_0A
                            882 	.globl _ANA_DFEE_REG_09
                            883 	.globl _ANA_DFEE_REG_08
                            884 	.globl _ANA_DFEE_REG_07
                            885 	.globl _ANA_DFEE_REG_06
                            886 	.globl _ANA_DFEE_REG_05
                            887 	.globl _ANA_DFEE_REG_04
                            888 	.globl _ANA_DFEE_REG_03
                            889 	.globl _ANA_DFEE_REG_02
                            890 	.globl _ANA_DFEE_REG_01
                            891 	.globl _ANA_DFEE_REG_00
                            892 	.globl _ANA_DFEE_REG_27
                            893 	.globl _ANA_DFEE_REG_26
                            894 	.globl _ANA_DFEE_REG_25
                            895 	.globl _ANA_DFEE_REG_24
                            896 	.globl _ANA_DFEE_REG_23
                            897 	.globl _ANA_DFEE_REG_22
                            898 	.globl _ANA_DFEE_REG_21
                            899 	.globl _ANA_DFEE_REG_20
                            900 	.globl _ANA_DFEE_REG_1F
                            901 	.globl _ANA_DFEE_REG_1E
                            902 	.globl _UPHY14_TRX_ANAREG_BOT_32
                            903 	.globl _UPHY14_TRX_ANAREG_BOT_31
                            904 	.globl _UPHY14_TRX_ANAREG_BOT_30
                            905 	.globl _UPHY14_TRX_ANAREG_BOT_29
                            906 	.globl _UPHY14_TRX_ANAREG_BOT_28
                            907 	.globl _UPHY14_TRX_ANAREG_BOT_27
                            908 	.globl _UPHY14_TRX_ANAREG_BOT_26
                            909 	.globl _UPHY14_TRX_ANAREG_BOT_25
                            910 	.globl _UPHY14_TRX_ANAREG_BOT_24
                            911 	.globl _UPHY14_TRX_ANAREG_BOT_23
                            912 	.globl _UPHY14_TRX_ANAREG_BOT_22
                            913 	.globl _UPHY14_TRX_ANAREG_BOT_21
                            914 	.globl _UPHY14_TRX_ANAREG_BOT_20
                            915 	.globl _UPHY14_TRX_ANAREG_BOT_19
                            916 	.globl _UPHY14_TRX_ANAREG_BOT_18
                            917 	.globl _UPHY14_TRX_ANAREG_BOT_17
                            918 	.globl _UPHY14_TRX_ANAREG_BOT_16
                            919 	.globl _UPHY14_TRX_ANAREG_BOT_15
                            920 	.globl _UPHY14_TRX_ANAREG_BOT_14
                            921 	.globl _UPHY14_TRX_ANAREG_BOT_13
                            922 	.globl _UPHY14_TRX_ANAREG_BOT_12
                            923 	.globl _UPHY14_TRX_ANAREG_BOT_11
                            924 	.globl _UPHY14_TRX_ANAREG_BOT_10
                            925 	.globl _UPHY14_TRX_ANAREG_BOT_9
                            926 	.globl _UPHY14_TRX_ANAREG_BOT_8
                            927 	.globl _UPHY14_TRX_ANAREG_BOT_7
                            928 	.globl _UPHY14_TRX_ANAREG_BOT_6
                            929 	.globl _UPHY14_TRX_ANAREG_BOT_5
                            930 	.globl _UPHY14_TRX_ANAREG_BOT_4
                            931 	.globl _UPHY14_TRX_ANAREG_BOT_3
                            932 	.globl _UPHY14_TRX_ANAREG_BOT_2
                            933 	.globl _UPHY14_TRX_ANAREG_BOT_1
                            934 	.globl _UPHY14_TRX_ANAREG_BOT_0
                            935 	.globl _UPHY14_TRX_ANAREG_TOP_157
                            936 	.globl _UPHY14_TRX_ANAREG_TOP_156
                            937 	.globl _UPHY14_TRX_ANAREG_TOP_155
                            938 	.globl _UPHY14_TRX_ANAREG_TOP_154
                            939 	.globl _UPHY14_TRX_ANAREG_TOP_153
                            940 	.globl _UPHY14_TRX_ANAREG_TOP_152
                            941 	.globl _UPHY14_TRX_ANAREG_TOP_151
                            942 	.globl _UPHY14_TRX_ANAREG_TOP_150
                            943 	.globl _UPHY14_TRX_ANAREG_TOP_149
                            944 	.globl _UPHY14_TRX_ANAREG_TOP_148
                            945 	.globl _UPHY14_TRX_ANAREG_TOP_147
                            946 	.globl _UPHY14_TRX_ANAREG_TOP_146
                            947 	.globl _UPHY14_TRX_ANAREG_TOP_145
                            948 	.globl _UPHY14_TRX_ANAREG_TOP_144
                            949 	.globl _UPHY14_TRX_ANAREG_TOP_143
                            950 	.globl _UPHY14_TRX_ANAREG_TOP_142
                            951 	.globl _UPHY14_TRX_ANAREG_TOP_141
                            952 	.globl _UPHY14_TRX_ANAREG_TOP_140
                            953 	.globl _UPHY14_TRX_ANAREG_TOP_139
                            954 	.globl _UPHY14_TRX_ANAREG_TOP_138
                            955 	.globl _UPHY14_TRX_ANAREG_TOP_137
                            956 	.globl _UPHY14_TRX_ANAREG_TOP_136
                            957 	.globl _UPHY14_TRX_ANAREG_TOP_135
                            958 	.globl _UPHY14_TRX_ANAREG_TOP_134
                            959 	.globl _UPHY14_TRX_ANAREG_TOP_133
                            960 	.globl _UPHY14_TRX_ANAREG_TOP_132
                            961 	.globl _UPHY14_TRX_ANAREG_TOP_131
                            962 	.globl _UPHY14_TRX_ANAREG_TOP_130
                            963 	.globl _UPHY14_TRX_ANAREG_TOP_129
                            964 	.globl _UPHY14_TRX_ANAREG_TOP_128
                            965 	.globl _UPHY14_TRX_LANEPLL_ANAREG_TOP_143
                            966 	.globl _UPHY14_TRX_LANEPLL_ANAREG_TOP_142
                            967 	.globl _UPHY14_TRX_LANEPLL_ANAREG_TOP_141
                            968 	.globl _UPHY14_TRX_LANEPLL_ANAREG_TOP_140
                            969 	.globl _UPHY14_TRX_LANEPLL_ANAREG_TOP_139
                            970 	.globl _UPHY14_TRX_LANEPLL_ANAREG_TOP_138
                            971 	.globl _UPHY14_TRX_LANEPLL_ANAREG_TOP_137
                            972 	.globl _UPHY14_TRX_LANEPLL_ANAREG_TOP_136
                            973 	.globl _UPHY14_TRX_LANEPLL_ANAREG_TOP_135
                            974 	.globl _UPHY14_TRX_LANEPLL_ANAREG_TOP_134
                            975 	.globl _UPHY14_TRX_LANEPLL_ANAREG_TOP_133
                            976 	.globl _UPHY14_TRX_LANEPLL_ANAREG_TOP_132
                            977 	.globl _UPHY14_TRX_LANEPLL_ANAREG_TOP_131
                            978 	.globl _UPHY14_TRX_LANEPLL_ANAREG_TOP_130
                            979 	.globl _UPHY14_TRX_LANEPLL_ANAREG_TOP_129
                            980 	.globl _UPHY14_TRX_LANEPLL_ANAREG_TOP_128
                            981 	.globl _txdcc_cal
                            982 	.globl _txdcc_pdiv_cal
                            983 	.globl _rxdcc_dll_cal
                            984 	.globl _rxdcc_data_cal
                            985 	.globl _rxdcc_eom_cal
                            986 ;--------------------------------------------------------
                            987 ; special function registers
                            988 ;--------------------------------------------------------
                            989 	.area RSEG    (ABS,DATA)
   0000                     990 	.org 0x0000
                    0080    991 _P0	=	0x0080
                    0082    992 _DPL	=	0x0082
                    0083    993 _DPH	=	0x0083
                    0086    994 _WDTREL	=	0x0086
                    0087    995 _PCON	=	0x0087
                    0088    996 _TCON	=	0x0088
                    0089    997 _TMOD	=	0x0089
                    008A    998 _TL0	=	0x008a
                    008B    999 _TL1	=	0x008b
                    008C   1000 _TH0	=	0x008c
                    008D   1001 _TH1	=	0x008d
                    008E   1002 _CKCON	=	0x008e
                    0090   1003 _P1	=	0x0090
                    0092   1004 _DPS	=	0x0092
                    0094   1005 _PSBANK	=	0x0094
                    0098   1006 _SCON	=	0x0098
                    0099   1007 _SBUF	=	0x0099
                    009A   1008 _IEN2	=	0x009a
                    00A0   1009 _P2	=	0x00a0
                    00A1   1010 _DMAS0	=	0x00a1
                    00A2   1011 _DMAS1	=	0x00a2
                    00A3   1012 _DMAS2	=	0x00a3
                    00A4   1013 _DMAT0	=	0x00a4
                    00A5   1014 _DMAT1	=	0x00a5
                    00A6   1015 _DMAT2	=	0x00a6
                    00A8   1016 _IEN0	=	0x00a8
                    00A9   1017 _IP0	=	0x00a9
                    00AA   1018 _S0RELL	=	0x00aa
                    00B0   1019 _P3	=	0x00b0
                    00B1   1020 _DMAC0	=	0x00b1
                    00B2   1021 _DMAC1	=	0x00b2
                    00B3   1022 _DMAC2	=	0x00b3
                    00B4   1023 _DMASEL	=	0x00b4
                    00B5   1024 _DMAM0	=	0x00b5
                    00B6   1025 _DMAM1	=	0x00b6
                    00B8   1026 _IEN1	=	0x00b8
                    00B9   1027 _IP1	=	0x00b9
                    00BA   1028 _S0RELH	=	0x00ba
                    00C0   1029 _IRCON	=	0x00c0
                    00C1   1030 _CCEN	=	0x00c1
                    00C8   1031 _T2CON	=	0x00c8
                    00CA   1032 _RCAP2L	=	0x00ca
                    00CB   1033 _RCAP2H	=	0x00cb
                    00CC   1034 _TL2	=	0x00cc
                    00CD   1035 _TH2	=	0x00cd
                    00D0   1036 _PSW	=	0x00d0
                    00D8   1037 _ADCON	=	0x00d8
                    00E0   1038 _ACC	=	0x00e0
                    00E8   1039 _EIE	=	0x00e8
                    00F0   1040 _B	=	0x00f0
                    00F7   1041 _SRST	=	0x00f7
                    8C8A   1042 _TMR0	=	0x8c8a
                    8D8B   1043 _TMR1	=	0x8d8b
                    CDCC   1044 _TMR2	=	0xcdcc
                    A2A1   1045 _DMASA	=	0xa2a1
                    A5A4   1046 _DMATA	=	0xa5a4
                    B2B1   1047 _DMAC	=	0xb2b1
                           1048 ;--------------------------------------------------------
                           1049 ; special function bits
                           1050 ;--------------------------------------------------------
                           1051 	.area RSEG    (ABS,DATA)
   0000                    1052 	.org 0x0000
                    0080   1053 _P0_0	=	0x0080
                    0081   1054 _P0_1	=	0x0081
                    0082   1055 _P0_2	=	0x0082
                    0083   1056 _P0_3	=	0x0083
                    0084   1057 _P0_4	=	0x0084
                    0085   1058 _P0_5	=	0x0085
                    0086   1059 _P0_6	=	0x0086
                    0087   1060 _P0_7	=	0x0087
                    0090   1061 _P1_0	=	0x0090
                    0091   1062 _P1_1	=	0x0091
                    0092   1063 _P1_2	=	0x0092
                    0093   1064 _P1_3	=	0x0093
                    0094   1065 _P1_4	=	0x0094
                    0095   1066 _P1_5	=	0x0095
                    0096   1067 _P1_6	=	0x0096
                    0097   1068 _P1_7	=	0x0097
                    00A0   1069 _P2_0	=	0x00a0
                    00A1   1070 _P2_1	=	0x00a1
                    00A2   1071 _P2_2	=	0x00a2
                    00A3   1072 _P2_3	=	0x00a3
                    00A4   1073 _P2_4	=	0x00a4
                    00A5   1074 _P2_5	=	0x00a5
                    00A6   1075 _P2_6	=	0x00a6
                    00A7   1076 _P2_7	=	0x00a7
                    00B0   1077 _P3_0	=	0x00b0
                    00B1   1078 _P3_1	=	0x00b1
                    00B2   1079 _P3_2	=	0x00b2
                    00B3   1080 _P3_3	=	0x00b3
                    00B4   1081 _P3_4	=	0x00b4
                    00B5   1082 _P3_5	=	0x00b5
                    00B6   1083 _P3_6	=	0x00b6
                    00B7   1084 _P3_7	=	0x00b7
                    0088   1085 _IT0	=	0x0088
                    0089   1086 _IE0	=	0x0089
                    008A   1087 _IT1	=	0x008a
                    008B   1088 _IE1	=	0x008b
                    008C   1089 _TR0	=	0x008c
                    008D   1090 _TF0	=	0x008d
                    008E   1091 _TR1	=	0x008e
                    008F   1092 _TF1	=	0x008f
                    00A8   1093 _EX0	=	0x00a8
                    00A9   1094 _ET0	=	0x00a9
                    00AA   1095 _EX1	=	0x00aa
                    00AB   1096 _ET1	=	0x00ab
                    00AC   1097 _ES	=	0x00ac
                    00AD   1098 _ET2	=	0x00ad
                    00AE   1099 _WDT	=	0x00ae
                    00AF   1100 _EA	=	0x00af
                    00B8   1101 _EX7	=	0x00b8
                    00B9   1102 _EX2	=	0x00b9
                    00BA   1103 _EX3	=	0x00ba
                    00BB   1104 _EX4	=	0x00bb
                    00BC   1105 _EX5	=	0x00bc
                    00BD   1106 _EX6	=	0x00bd
                    00BE   1107 _PS1	=	0x00be
                    009A   1108 _ES1	=	0x009a
                    009B   1109 _EX8	=	0x009b
                    009C   1110 _EX9	=	0x009c
                    009D   1111 _EX10	=	0x009d
                    009E   1112 _EX11	=	0x009e
                    009F   1113 _EX12	=	0x009f
                    0098   1114 _RI	=	0x0098
                    0099   1115 _TI	=	0x0099
                    00C6   1116 _TF2	=	0x00c6
                           1117 ;--------------------------------------------------------
                           1118 ; overlayable register banks
                           1119 ;--------------------------------------------------------
                           1120 	.area REG_BANK_0	(REL,OVR,DATA)
   0000                    1121 	.ds 8
                           1122 ;--------------------------------------------------------
                           1123 ; overlayable bit register bank
                           1124 ;--------------------------------------------------------
                           1125 	.area BIT_BANK	(REL,OVR,DATA)
   0000                    1126 bits:
   0000                    1127 	.ds 1
                    8000   1128 	b0 = bits[0]
                    8100   1129 	b1 = bits[1]
                    8200   1130 	b2 = bits[2]
                    8300   1131 	b3 = bits[3]
                    8400   1132 	b4 = bits[4]
                    8500   1133 	b5 = bits[5]
                    8600   1134 	b6 = bits[6]
                    8700   1135 	b7 = bits[7]
                           1136 ;--------------------------------------------------------
                           1137 ; internal ram data
                           1138 ;--------------------------------------------------------
                           1139 	.area DSEG    (DATA)
                           1140 ;--------------------------------------------------------
                           1141 ; overlayable items in internal ram 
                           1142 ;--------------------------------------------------------
                           1143 	.area OSEG    (OVR,DATA)
                           1144 ;--------------------------------------------------------
                           1145 ; indirectly addressable internal ram data
                           1146 ;--------------------------------------------------------
                           1147 	.area ISEG    (DATA)
                           1148 ;--------------------------------------------------------
                           1149 ; absolute internal ram data
                           1150 ;--------------------------------------------------------
                           1151 	.area IABS    (ABS,DATA)
                           1152 	.area IABS    (ABS,DATA)
                           1153 ;--------------------------------------------------------
                           1154 ; bit data
                           1155 ;--------------------------------------------------------
                           1156 	.area BSEG    (BIT)
                           1157 ;--------------------------------------------------------
                           1158 ; paged external ram data
                           1159 ;--------------------------------------------------------
                           1160 	.area PSEG    (PAG,XDATA)
                           1161 ;--------------------------------------------------------
                           1162 ; external ram data
                           1163 ;--------------------------------------------------------
                           1164 	.area XSEG    (XDATA)
                    1000   1165 _UPHY14_TRX_LANEPLL_ANAREG_TOP_128	=	0x1000
                    1004   1166 _UPHY14_TRX_LANEPLL_ANAREG_TOP_129	=	0x1004
                    1008   1167 _UPHY14_TRX_LANEPLL_ANAREG_TOP_130	=	0x1008
                    100C   1168 _UPHY14_TRX_LANEPLL_ANAREG_TOP_131	=	0x100c
                    1010   1169 _UPHY14_TRX_LANEPLL_ANAREG_TOP_132	=	0x1010
                    1014   1170 _UPHY14_TRX_LANEPLL_ANAREG_TOP_133	=	0x1014
                    1018   1171 _UPHY14_TRX_LANEPLL_ANAREG_TOP_134	=	0x1018
                    101C   1172 _UPHY14_TRX_LANEPLL_ANAREG_TOP_135	=	0x101c
                    1020   1173 _UPHY14_TRX_LANEPLL_ANAREG_TOP_136	=	0x1020
                    1024   1174 _UPHY14_TRX_LANEPLL_ANAREG_TOP_137	=	0x1024
                    1028   1175 _UPHY14_TRX_LANEPLL_ANAREG_TOP_138	=	0x1028
                    102C   1176 _UPHY14_TRX_LANEPLL_ANAREG_TOP_139	=	0x102c
                    1030   1177 _UPHY14_TRX_LANEPLL_ANAREG_TOP_140	=	0x1030
                    1034   1178 _UPHY14_TRX_LANEPLL_ANAREG_TOP_141	=	0x1034
                    1038   1179 _UPHY14_TRX_LANEPLL_ANAREG_TOP_142	=	0x1038
                    103C   1180 _UPHY14_TRX_LANEPLL_ANAREG_TOP_143	=	0x103c
                    0200   1181 _UPHY14_TRX_ANAREG_TOP_128	=	0x0200
                    0204   1182 _UPHY14_TRX_ANAREG_TOP_129	=	0x0204
                    0208   1183 _UPHY14_TRX_ANAREG_TOP_130	=	0x0208
                    020C   1184 _UPHY14_TRX_ANAREG_TOP_131	=	0x020c
                    0210   1185 _UPHY14_TRX_ANAREG_TOP_132	=	0x0210
                    0214   1186 _UPHY14_TRX_ANAREG_TOP_133	=	0x0214
                    0218   1187 _UPHY14_TRX_ANAREG_TOP_134	=	0x0218
                    021C   1188 _UPHY14_TRX_ANAREG_TOP_135	=	0x021c
                    0220   1189 _UPHY14_TRX_ANAREG_TOP_136	=	0x0220
                    0224   1190 _UPHY14_TRX_ANAREG_TOP_137	=	0x0224
                    0228   1191 _UPHY14_TRX_ANAREG_TOP_138	=	0x0228
                    022C   1192 _UPHY14_TRX_ANAREG_TOP_139	=	0x022c
                    0230   1193 _UPHY14_TRX_ANAREG_TOP_140	=	0x0230
                    0234   1194 _UPHY14_TRX_ANAREG_TOP_141	=	0x0234
                    0238   1195 _UPHY14_TRX_ANAREG_TOP_142	=	0x0238
                    023C   1196 _UPHY14_TRX_ANAREG_TOP_143	=	0x023c
                    0240   1197 _UPHY14_TRX_ANAREG_TOP_144	=	0x0240
                    0244   1198 _UPHY14_TRX_ANAREG_TOP_145	=	0x0244
                    0248   1199 _UPHY14_TRX_ANAREG_TOP_146	=	0x0248
                    024C   1200 _UPHY14_TRX_ANAREG_TOP_147	=	0x024c
                    0250   1201 _UPHY14_TRX_ANAREG_TOP_148	=	0x0250
                    0254   1202 _UPHY14_TRX_ANAREG_TOP_149	=	0x0254
                    0258   1203 _UPHY14_TRX_ANAREG_TOP_150	=	0x0258
                    025C   1204 _UPHY14_TRX_ANAREG_TOP_151	=	0x025c
                    0260   1205 _UPHY14_TRX_ANAREG_TOP_152	=	0x0260
                    0264   1206 _UPHY14_TRX_ANAREG_TOP_153	=	0x0264
                    0268   1207 _UPHY14_TRX_ANAREG_TOP_154	=	0x0268
                    026C   1208 _UPHY14_TRX_ANAREG_TOP_155	=	0x026c
                    0270   1209 _UPHY14_TRX_ANAREG_TOP_156	=	0x0270
                    0274   1210 _UPHY14_TRX_ANAREG_TOP_157	=	0x0274
                    0000   1211 _UPHY14_TRX_ANAREG_BOT_0	=	0x0000
                    0004   1212 _UPHY14_TRX_ANAREG_BOT_1	=	0x0004
                    0008   1213 _UPHY14_TRX_ANAREG_BOT_2	=	0x0008
                    000C   1214 _UPHY14_TRX_ANAREG_BOT_3	=	0x000c
                    0010   1215 _UPHY14_TRX_ANAREG_BOT_4	=	0x0010
                    0014   1216 _UPHY14_TRX_ANAREG_BOT_5	=	0x0014
                    0018   1217 _UPHY14_TRX_ANAREG_BOT_6	=	0x0018
                    001C   1218 _UPHY14_TRX_ANAREG_BOT_7	=	0x001c
                    0020   1219 _UPHY14_TRX_ANAREG_BOT_8	=	0x0020
                    0024   1220 _UPHY14_TRX_ANAREG_BOT_9	=	0x0024
                    0028   1221 _UPHY14_TRX_ANAREG_BOT_10	=	0x0028
                    002C   1222 _UPHY14_TRX_ANAREG_BOT_11	=	0x002c
                    0030   1223 _UPHY14_TRX_ANAREG_BOT_12	=	0x0030
                    0034   1224 _UPHY14_TRX_ANAREG_BOT_13	=	0x0034
                    0038   1225 _UPHY14_TRX_ANAREG_BOT_14	=	0x0038
                    003C   1226 _UPHY14_TRX_ANAREG_BOT_15	=	0x003c
                    0040   1227 _UPHY14_TRX_ANAREG_BOT_16	=	0x0040
                    0044   1228 _UPHY14_TRX_ANAREG_BOT_17	=	0x0044
                    0048   1229 _UPHY14_TRX_ANAREG_BOT_18	=	0x0048
                    004C   1230 _UPHY14_TRX_ANAREG_BOT_19	=	0x004c
                    0050   1231 _UPHY14_TRX_ANAREG_BOT_20	=	0x0050
                    0054   1232 _UPHY14_TRX_ANAREG_BOT_21	=	0x0054
                    0058   1233 _UPHY14_TRX_ANAREG_BOT_22	=	0x0058
                    005C   1234 _UPHY14_TRX_ANAREG_BOT_23	=	0x005c
                    0060   1235 _UPHY14_TRX_ANAREG_BOT_24	=	0x0060
                    0064   1236 _UPHY14_TRX_ANAREG_BOT_25	=	0x0064
                    0068   1237 _UPHY14_TRX_ANAREG_BOT_26	=	0x0068
                    006C   1238 _UPHY14_TRX_ANAREG_BOT_27	=	0x006c
                    0070   1239 _UPHY14_TRX_ANAREG_BOT_28	=	0x0070
                    0074   1240 _UPHY14_TRX_ANAREG_BOT_29	=	0x0074
                    0078   1241 _UPHY14_TRX_ANAREG_BOT_30	=	0x0078
                    007C   1242 _UPHY14_TRX_ANAREG_BOT_31	=	0x007c
                    0080   1243 _UPHY14_TRX_ANAREG_BOT_32	=	0x0080
                    0478   1244 _ANA_DFEE_REG_1E	=	0x0478
                    047C   1245 _ANA_DFEE_REG_1F	=	0x047c
                    0480   1246 _ANA_DFEE_REG_20	=	0x0480
                    0484   1247 _ANA_DFEE_REG_21	=	0x0484
                    0488   1248 _ANA_DFEE_REG_22	=	0x0488
                    048C   1249 _ANA_DFEE_REG_23	=	0x048c
                    0490   1250 _ANA_DFEE_REG_24	=	0x0490
                    0494   1251 _ANA_DFEE_REG_25	=	0x0494
                    0498   1252 _ANA_DFEE_REG_26	=	0x0498
                    049C   1253 _ANA_DFEE_REG_27	=	0x049c
                    0400   1254 _ANA_DFEE_REG_00	=	0x0400
                    0404   1255 _ANA_DFEE_REG_01	=	0x0404
                    0408   1256 _ANA_DFEE_REG_02	=	0x0408
                    040C   1257 _ANA_DFEE_REG_03	=	0x040c
                    0410   1258 _ANA_DFEE_REG_04	=	0x0410
                    0414   1259 _ANA_DFEE_REG_05	=	0x0414
                    0418   1260 _ANA_DFEE_REG_06	=	0x0418
                    041C   1261 _ANA_DFEE_REG_07	=	0x041c
                    0420   1262 _ANA_DFEE_REG_08	=	0x0420
                    0424   1263 _ANA_DFEE_REG_09	=	0x0424
                    0428   1264 _ANA_DFEE_REG_0A	=	0x0428
                    042C   1265 _ANA_DFEE_REG_0B	=	0x042c
                    0430   1266 _ANA_DFEE_REG_0C	=	0x0430
                    0434   1267 _ANA_DFEE_REG_0D	=	0x0434
                    0438   1268 _ANA_DFEE_REG_0E	=	0x0438
                    043C   1269 _ANA_DFEE_REG_0F	=	0x043c
                    0440   1270 _ANA_DFEE_REG_10	=	0x0440
                    0444   1271 _ANA_DFEE_REG_11	=	0x0444
                    0448   1272 _ANA_DFEE_REG_12	=	0x0448
                    044C   1273 _ANA_DFEE_REG_13	=	0x044c
                    0450   1274 _ANA_DFEE_REG_14	=	0x0450
                    0454   1275 _ANA_DFEE_REG_15	=	0x0454
                    0458   1276 _ANA_DFEE_REG_16	=	0x0458
                    045C   1277 _ANA_DFEE_REG_17	=	0x045c
                    0460   1278 _ANA_DFEE_REG_18	=	0x0460
                    0464   1279 _ANA_DFEE_REG_19	=	0x0464
                    0468   1280 _ANA_DFEE_REG_1A	=	0x0468
                    046C   1281 _ANA_DFEE_REG_1B	=	0x046c
                    0470   1282 _ANA_DFEE_REG_1C	=	0x0470
                    0474   1283 _ANA_DFEE_REG_1D	=	0x0474
                    0830   1284 _ANA_DFEO_REG_0C	=	0x0830
                    0834   1285 _ANA_DFEO_REG_0D	=	0x0834
                    0838   1286 _ANA_DFEO_REG_0E	=	0x0838
                    083C   1287 _ANA_DFEO_REG_0F	=	0x083c
                    0840   1288 _ANA_DFEO_REG_10	=	0x0840
                    0844   1289 _ANA_DFEO_REG_11	=	0x0844
                    0848   1290 _ANA_DFEO_REG_12	=	0x0848
                    084C   1291 _ANA_DFEO_REG_13	=	0x084c
                    0850   1292 _ANA_DFEO_REG_14	=	0x0850
                    0854   1293 _ANA_DFEO_REG_15	=	0x0854
                    0858   1294 _ANA_DFEO_REG_16	=	0x0858
                    085C   1295 _ANA_DFEO_REG_17	=	0x085c
                    0860   1296 _ANA_DFEO_REG_18	=	0x0860
                    0864   1297 _ANA_DFEO_REG_19	=	0x0864
                    0868   1298 _ANA_DFEO_REG_1A	=	0x0868
                    086C   1299 _ANA_DFEO_REG_1B	=	0x086c
                    0870   1300 _ANA_DFEO_REG_1C	=	0x0870
                    0874   1301 _ANA_DFEO_REG_1D	=	0x0874
                    0878   1302 _ANA_DFEO_REG_1E	=	0x0878
                    087C   1303 _ANA_DFEO_REG_1F	=	0x087c
                    0880   1304 _ANA_DFEO_REG_20	=	0x0880
                    0884   1305 _ANA_DFEO_REG_21	=	0x0884
                    0888   1306 _ANA_DFEO_REG_22	=	0x0888
                    088C   1307 _ANA_DFEO_REG_23	=	0x088c
                    0890   1308 _ANA_DFEO_REG_24	=	0x0890
                    0894   1309 _ANA_DFEO_REG_25	=	0x0894
                    0898   1310 _ANA_DFEO_REG_26	=	0x0898
                    089C   1311 _ANA_DFEO_REG_27	=	0x089c
                    0800   1312 _ANA_DFEO_REG_00	=	0x0800
                    0804   1313 _ANA_DFEO_REG_01	=	0x0804
                    0808   1314 _ANA_DFEO_REG_02	=	0x0808
                    080C   1315 _ANA_DFEO_REG_03	=	0x080c
                    0810   1316 _ANA_DFEO_REG_04	=	0x0810
                    0814   1317 _ANA_DFEO_REG_05	=	0x0814
                    0818   1318 _ANA_DFEO_REG_06	=	0x0818
                    081C   1319 _ANA_DFEO_REG_07	=	0x081c
                    0820   1320 _ANA_DFEO_REG_08	=	0x0820
                    0824   1321 _ANA_DFEO_REG_09	=	0x0824
                    0828   1322 _ANA_DFEO_REG_0A	=	0x0828
                    082C   1323 _ANA_DFEO_REG_0B	=	0x082c
                    8200   1324 _UPHY14_CMN_ANAREG_TOP_128	=	0x8200
                    8204   1325 _UPHY14_CMN_ANAREG_TOP_129	=	0x8204
                    8208   1326 _UPHY14_CMN_ANAREG_TOP_130	=	0x8208
                    820C   1327 _UPHY14_CMN_ANAREG_TOP_131	=	0x820c
                    8210   1328 _UPHY14_CMN_ANAREG_TOP_132	=	0x8210
                    8214   1329 _UPHY14_CMN_ANAREG_TOP_133	=	0x8214
                    8218   1330 _UPHY14_CMN_ANAREG_TOP_134	=	0x8218
                    821C   1331 _UPHY14_CMN_ANAREG_TOP_135	=	0x821c
                    8220   1332 _UPHY14_CMN_ANAREG_TOP_136	=	0x8220
                    8224   1333 _UPHY14_CMN_ANAREG_TOP_137	=	0x8224
                    8228   1334 _UPHY14_CMN_ANAREG_TOP_138	=	0x8228
                    822C   1335 _UPHY14_CMN_ANAREG_TOP_139	=	0x822c
                    8230   1336 _UPHY14_CMN_ANAREG_TOP_140	=	0x8230
                    8234   1337 _UPHY14_CMN_ANAREG_TOP_141	=	0x8234
                    8238   1338 _UPHY14_CMN_ANAREG_TOP_142	=	0x8238
                    823C   1339 _UPHY14_CMN_ANAREG_TOP_143	=	0x823c
                    8240   1340 _UPHY14_CMN_ANAREG_TOP_144	=	0x8240
                    8244   1341 _UPHY14_CMN_ANAREG_TOP_145	=	0x8244
                    8248   1342 _UPHY14_CMN_ANAREG_TOP_146	=	0x8248
                    824C   1343 _UPHY14_CMN_ANAREG_TOP_147	=	0x824c
                    8250   1344 _UPHY14_CMN_ANAREG_TOP_148	=	0x8250
                    8254   1345 _UPHY14_CMN_ANAREG_TOP_149	=	0x8254
                    8258   1346 _UPHY14_CMN_ANAREG_TOP_150	=	0x8258
                    825C   1347 _UPHY14_CMN_ANAREG_TOP_151	=	0x825c
                    8260   1348 _UPHY14_CMN_ANAREG_TOP_152	=	0x8260
                    8264   1349 _UPHY14_CMN_ANAREG_TOP_153	=	0x8264
                    8268   1350 _UPHY14_CMN_ANAREG_TOP_154	=	0x8268
                    826C   1351 _UPHY14_CMN_ANAREG_TOP_155	=	0x826c
                    8270   1352 _UPHY14_CMN_ANAREG_TOP_156	=	0x8270
                    8274   1353 _UPHY14_CMN_ANAREG_TOP_157	=	0x8274
                    8278   1354 _UPHY14_CMN_ANAREG_TOP_158	=	0x8278
                    827C   1355 _UPHY14_CMN_ANAREG_TOP_159	=	0x827c
                    8280   1356 _UPHY14_CMN_ANAREG_TOP_160	=	0x8280
                    8284   1357 _UPHY14_CMN_ANAREG_TOP_161	=	0x8284
                    8288   1358 _UPHY14_CMN_ANAREG_TOP_162	=	0x8288
                    828C   1359 _UPHY14_CMN_ANAREG_TOP_163	=	0x828c
                    8290   1360 _UPHY14_CMN_ANAREG_TOP_164	=	0x8290
                    8294   1361 _UPHY14_CMN_ANAREG_TOP_165	=	0x8294
                    8298   1362 _UPHY14_CMN_ANAREG_TOP_166	=	0x8298
                    829C   1363 _UPHY14_CMN_ANAREG_TOP_167	=	0x829c
                    82A0   1364 _UPHY14_CMN_ANAREG_TOP_168	=	0x82a0
                    82A4   1365 _UPHY14_CMN_ANAREG_TOP_169	=	0x82a4
                    82A8   1366 _UPHY14_CMN_ANAREG_TOP_170	=	0x82a8
                    82AC   1367 _UPHY14_CMN_ANAREG_TOP_171	=	0x82ac
                    82B0   1368 _UPHY14_CMN_ANAREG_TOP_172	=	0x82b0
                    82B4   1369 _UPHY14_CMN_ANAREG_TOP_173	=	0x82b4
                    82B8   1370 _UPHY14_CMN_ANAREG_TOP_174	=	0x82b8
                    82BC   1371 _UPHY14_CMN_ANAREG_TOP_175	=	0x82bc
                    82C0   1372 _UPHY14_CMN_ANAREG_TOP_176	=	0x82c0
                    82C4   1373 _UPHY14_CMN_ANAREG_TOP_177	=	0x82c4
                    82C8   1374 _UPHY14_CMN_ANAREG_TOP_178	=	0x82c8
                    82CC   1375 _UPHY14_CMN_ANAREG_TOP_179	=	0x82cc
                    82D0   1376 _UPHY14_CMN_ANAREG_TOP_180	=	0x82d0
                    82D4   1377 _UPHY14_CMN_ANAREG_TOP_181	=	0x82d4
                    82D8   1378 _UPHY14_CMN_ANAREG_TOP_182	=	0x82d8
                    82DC   1379 _UPHY14_CMN_ANAREG_TOP_183	=	0x82dc
                    82E0   1380 _UPHY14_CMN_ANAREG_TOP_184	=	0x82e0
                    82E4   1381 _UPHY14_CMN_ANAREG_TOP_185	=	0x82e4
                    82E8   1382 _UPHY14_CMN_ANAREG_TOP_186	=	0x82e8
                    82EC   1383 _UPHY14_CMN_ANAREG_TOP_187	=	0x82ec
                    82F0   1384 _UPHY14_CMN_ANAREG_TOP_188	=	0x82f0
                    82F4   1385 _UPHY14_CMN_ANAREG_TOP_189	=	0x82f4
                    82F8   1386 _UPHY14_CMN_ANAREG_TOP_190	=	0x82f8
                    82FC   1387 _UPHY14_CMN_ANAREG_TOP_191	=	0x82fc
                    8300   1388 _UPHY14_CMN_ANAREG_TOP_192	=	0x8300
                    8304   1389 _UPHY14_CMN_ANAREG_TOP_193	=	0x8304
                    8308   1390 _UPHY14_CMN_ANAREG_TOP_194	=	0x8308
                    830C   1391 _UPHY14_CMN_ANAREG_TOP_195	=	0x830c
                    8310   1392 _UPHY14_CMN_ANAREG_TOP_196	=	0x8310
                    8314   1393 _UPHY14_CMN_ANAREG_TOP_197	=	0x8314
                    8318   1394 _UPHY14_CMN_ANAREG_TOP_198	=	0x8318
                    831C   1395 _UPHY14_CMN_ANAREG_TOP_199	=	0x831c
                    8320   1396 _UPHY14_CMN_ANAREG_TOP_200	=	0x8320
                    8324   1397 _UPHY14_CMN_ANAREG_TOP_201	=	0x8324
                    8328   1398 _UPHY14_CMN_ANAREG_TOP_202	=	0x8328
                    832C   1399 _UPHY14_CMN_ANAREG_TOP_203	=	0x832c
                    8330   1400 _UPHY14_CMN_ANAREG_TOP_204	=	0x8330
                    8334   1401 _UPHY14_CMN_ANAREG_TOP_205	=	0x8334
                    8338   1402 _UPHY14_CMN_ANAREG_TOP_206	=	0x8338
                    833C   1403 _UPHY14_CMN_ANAREG_TOP_207	=	0x833c
                    8340   1404 _UPHY14_CMN_ANAREG_TOP_208	=	0x8340
                    8344   1405 _UPHY14_CMN_ANAREG_TOP_209	=	0x8344
                    8348   1406 _UPHY14_CMN_ANAREG_TOP_210	=	0x8348
                    834C   1407 _UPHY14_CMN_ANAREG_TOP_211	=	0x834c
                    8350   1408 _UPHY14_CMN_ANAREG_TOP_212	=	0x8350
                    8354   1409 _UPHY14_CMN_ANAREG_TOP_213	=	0x8354
                    8358   1410 _UPHY14_CMN_ANAREG_TOP_214	=	0x8358
                    2000   1411 _PM_CTRL_TX_LANE_REG1_LANE	=	0x2000
                    2004   1412 _PM_CTRL_TX_LANE_REG2_LANE	=	0x2004
                    2008   1413 _INPUT_TX_PIN_REG0_LANE	=	0x2008
                    200C   1414 _INPUT_TX_PIN_REG1_LANE	=	0x200c
                    2010   1415 _INPUT_TX_PIN_REG2_LANE	=	0x2010
                    2014   1416 _INPUT_TX_PIN_REG3_LANE	=	0x2014
                    2018   1417 _PM_CTRL_INTERRUPT_REG1_LANE	=	0x2018
                    201C   1418 _PM_CTRL_INTERRUPT_REG2	=	0x201c
                    2020   1419 _CLKGEN_TX_LANE_REG1_LANE	=	0x2020
                    2024   1420 _TX_SPEED_CONVERT_LANE	=	0x2024
                    2028   1421 _SPD_CTRL_INTERRUPT_REG1_LANE	=	0x2028
                    202C   1422 _SPD_CTRL_INTERRUPT_REG2	=	0x202c
                    2030   1423 _SPD_CTRL_TX_LANE_REG1_LANE	=	0x2030
                    2034   1424 _TX_SYSTEM_LANE	=	0x2034
                    203C   1425 _INPUT_TX_PIN_REG4_LANE	=	0x203c
                    2040   1426 _TX_CALIBRATION_LANE	=	0x2040
                    2044   1427 _DIG_TX_RSVD_REG0	=	0x2044
                    2048   1428 _INPUT_TX_PIN_REG5_LANE	=	0x2048
                    204C   1429 __FIELDNAME__LANE	=	0x204c
                    2050   1430 _PM_CTRL_INTERRUPT_ISR_REG1_LANE	=	0x2050
                    2054   1431 _SPD_CTRL_INTERRUPT_CLEAR_REG1_LANE	=	0x2054
                    2058   1432 _ANALOG_TX_REALTIME_REG_1	=	0x2058
                    205C   1433 _MON_TOP	=	0x205c
                    2100   1434 _PM_CTRL_RX_LANE_REG1_LANE	=	0x2100
                    2104   1435 _RX_SYSTEM_LANE	=	0x2104
                    2108   1436 _INPUT_RX_PIN_REG0_LANE	=	0x2108
                    210C   1437 _INPUT_RX_PIN_REG1_LANE	=	0x210c
                    2110   1438 _INPUT_RX_PIN_REG2_LANE	=	0x2110
                    2114   1439 _SPD_CTRL_RX_LANE_REG1_LANE	=	0x2114
                    2118   1440 _DIG_RX_RSVD_REG0	=	0x2118
                    211C   1441 _CLKGEN_RX_LANE_REG1_LANE	=	0x211c
                    2120   1442 _FRAME_SYNC_DET_REG0	=	0x2120
                    2124   1443 _FRAME_SYNC_DET_REG1	=	0x2124
                    2128   1444 _FRAME_SYNC_DET_REG2	=	0x2128
                    212C   1445 _FRAME_SYNC_DET_REG3	=	0x212c
                    2130   1446 _FRAME_SYNC_DET_REG4	=	0x2130
                    2134   1447 _FRAME_SYNC_DET_REG5	=	0x2134
                    2138   1448 _FRAME_SYNC_DET_REG6	=	0x2138
                    213C   1449 _CDR_LOCK_REG	=	0x213c
                    2140   1450 _RX_LANE_INTERRUPT	=	0x2140
                    2144   1451 _RX_LANE_INTERRUPT_MASK	=	0x2144
                    2148   1452 _RX_DATA_PATH_REG	=	0x2148
                    214C   1453 _INPUT_RX_PIN_REG3_LANE	=	0x214c
                    2150   1454 _RX_CALIBRATION_REG	=	0x2150
                    2158   1455 _RX_LANE_INTERRUPT_REG1	=	0x2158
                    2160   1456 _DTL_REG0	=	0x2160
                    2164   1457 _DTL_REG1	=	0x2164
                    2168   1458 _DTL_REG2	=	0x2168
                    216C   1459 _DTL_REG3	=	0x216c
                    2170   1460 _SQ_REG0	=	0x2170
                    4000   1461 _LANE_CFG0	=	0x4000
                    4004   1462 _LANE_STATUS0	=	0x4004
                    4008   1463 _LANE_CFG_STATUS2_LANE	=	0x4008
                    400C   1464 _LANE_CFG2_LANE	=	0x400c
                    4010   1465 _LANE_CFG4	=	0x4010
                    4014   1466 _LANE_CFG_STATUS3_LANE	=	0x4014
                    4018   1467 _LANE_DP_PIE8_CFG0_LANE	=	0x4018
                    401C   1468 _LANE_USB_DP_CFG1_LANE	=	0x401c
                    4020   1469 _LANE_USB_DP_CFG2_LANE	=	0x4020
                    4024   1470 _LANE_EQ_CFG0_LANE	=	0x4024
                    4028   1471 _LANE_EQ_CFG1_LANE	=	0x4028
                    402C   1472 _LANE_PRESET_CFG0_LANE	=	0x402c
                    4030   1473 _LANE_PRESET_CFG2_LANE	=	0x4030
                    4034   1474 _LANE_PRESET_CFG4_LANE	=	0x4034
                    4038   1475 _LANE_PRESET_CFG6_LANE	=	0x4038
                    403C   1476 _LANE_PRESET_CFG8_LANE	=	0x403c
                    4040   1477 _LANE_PRESET_CFG10_LANE	=	0x4040
                    4044   1478 _LANE_PRESET_CFG12_LANE	=	0x4044
                    4048   1479 _LANE_PRESET_CFG14_LANE	=	0x4048
                    404C   1480 _LANE_PRESET_CFG16_LANE	=	0x404c
                    4050   1481 _LANE_COEFF_MAX0_LANE	=	0x4050
                    4054   1482 _LANE_REMOTE_SET_LANE	=	0x4054
                    4058   1483 _LANE_EQ_16G_CFG0_LANE	=	0x4058
                    405C   1484 _LANE_16G_PRESET_CFG0_LANE	=	0x405c
                    4060   1485 _LANE_16G_PRESET_CFG2_LANE	=	0x4060
                    4064   1486 _LANE_16G_PRESET_CFG4_LANE	=	0x4064
                    4068   1487 _LANE_16G_PRESET_CFG6_LANE	=	0x4068
                    406C   1488 _LANE_16G_PRESET_CFG8_LANE	=	0x406c
                    4070   1489 _LANE_16G_PRESET_CFG10_LANE	=	0x4070
                    4074   1490 _LANE_16G_PRESET_CFG12_LANE	=	0x4074
                    4078   1491 _LANE_16G_PRESET_CFG14_LANE	=	0x4078
                    407C   1492 _LANE_16G_PRESET_CFG16_LANE	=	0x407c
                    4080   1493 _LANE_EQ_32G_CFG0_LANE	=	0x4080
                    4084   1494 _LANE_32G_PRESET_CFG0_LANE	=	0x4084
                    4088   1495 _LANE_32G_PRESET_CFG2_LANE	=	0x4088
                    408C   1496 _LANE_32G_PRESET_CFG4_LANE	=	0x408c
                    4090   1497 _LANE_32G_PRESET_CFG6_LANE	=	0x4090
                    4094   1498 _LANE_32G_PRESET_CFG8_LANE	=	0x4094
                    4098   1499 _LANE_32G_PRESET_CFG10_LANE	=	0x4098
                    409C   1500 _LANE_32G_PRESET_CFG12_LANE	=	0x409c
                    40A0   1501 _LANE_32G_PRESET_CFG14_LANE	=	0x40a0
                    40A4   1502 _LANE_32G_PRESET_CFG16_LANE	=	0x40a4
                    2200   1503 _MCU_CONTROL_LANE	=	0x2200
                    2204   1504 _MCU_GPIO	=	0x2204
                    2208   1505 _CACHE_DEBUG0	=	0x2208
                    220C   1506 _CACHE_DEBUG1	=	0x220c
                    2210   1507 _LANE_SYSTEM0	=	0x2210
                    2230   1508 _MCU_STATUS0_LANE	=	0x2230
                    2234   1509 _MCU_STATUS1_LANE	=	0x2234
                    2238   1510 _MCU_STATUS2_LANE	=	0x2238
                    223C   1511 _MCU_STATUS3_LANE	=	0x223c
                    2240   1512 _MCU_INT0_CONTROL	=	0x2240
                    2244   1513 _MCU_INT1_CONTROL	=	0x2244
                    2248   1514 _MCU_INT2_CONTROL	=	0x2248
                    224C   1515 _MCU_INT3_CONTROL	=	0x224c
                    2250   1516 _MCU_INT4_CONTROL	=	0x2250
                    2254   1517 _MCU_INT5_CONTROL	=	0x2254
                    2258   1518 _MCU_INT6_CONTROL	=	0x2258
                    225C   1519 _MCU_INT7_CONTROL	=	0x225c
                    2260   1520 _MCU_INT8_CONTROL	=	0x2260
                    2264   1521 _MCU_INT9_CONTROL	=	0x2264
                    2268   1522 _MCU_INT10_CONTROL	=	0x2268
                    226C   1523 _MCU_INT11_CONTROL	=	0x226c
                    2270   1524 _MCU_INT12_CONTROL	=	0x2270
                    2274   1525 _MCU_TIMER_CONTROL	=	0x2274
                    2278   1526 _MCU_TIMER0_CONTROL	=	0x2278
                    227C   1527 _MCU_TIMER1_CONTROL	=	0x227c
                    2280   1528 _MCU_TIMER2_CONTROL	=	0x2280
                    2284   1529 _MCU_TIMER3_CONTROL	=	0x2284
                    2288   1530 _MCU_IRQ_LANE	=	0x2288
                    228C   1531 _MCU_IRQ_MASK_LANE	=	0x228c
                    2290   1532 _MCU_MEM_REG1_LANE	=	0x2290
                    2294   1533 _MCU_MEM_REG2_LANE	=	0x2294
                    2298   1534 _MCU_TIMER_CTRL_1_LANE	=	0x2298
                    229C   1535 _MCU_TIMER_CTRL_2_LANE	=	0x229c
                    22A0   1536 _MCU_TIMER_CTRL_3_LANE	=	0x22a0
                    22A4   1537 _MCU_TIMER_CTRL_4_LANE	=	0x22a4
                    22A8   1538 _MCU_TIMER_CTRL_5_LANE	=	0x22a8
                    22AC   1539 _MCU_TIMER_CTRL_6_LANE	=	0x22ac
                    22B0   1540 _MCU_TIMER_CTRL_7_LANE	=	0x22b0
                    22B4   1541 _MCU_DEBUG0_LANE	=	0x22b4
                    22B8   1542 _MCU_DEBUG1_LANE	=	0x22b8
                    22BC   1543 _MCU_DEBUG2_LANE	=	0x22bc
                    22C0   1544 _MCU_DEBUG3_LANE	=	0x22c0
                    22C4   1545 _MCU_DEBUG_LANE	=	0x22c4
                    22C8   1546 _EXT_INT_CONTROL	=	0x22c8
                    22CC   1547 _ANA_IF_TRX_REG0	=	0x22cc
                    22D0   1548 _ANA_IF_DFEE_REG0	=	0x22d0
                    22D4   1549 _ANA_IF_DFEO_REG0	=	0x22d4
                    22D8   1550 _MCU_IRQ_ISR_LANE	=	0x22d8
                    22DC   1551 _MCU_WDT_LANE	=	0x22dc
                    22E0   1552 _MCU_INT_CONTROL_13	=	0x22e0
                    22E4   1553 _MCU_COMMAND0	=	0x22e4
                    22F4   1554 _MEM_ECC_ERR_ADDRESS0	=	0x22f4
                    22F8   1555 _XDATA_MEM_CHECKSUM_LANE0	=	0x22f8
                    22FC   1556 _XDATA_MEM_CHECKSUM_LANE1	=	0x22fc
                    2300   1557 _PT_CONTROL0	=	0x2300
                    2304   1558 _PT_CONTROL1	=	0x2304
                    2308   1559 _PT_USER_PATTERN0	=	0x2308
                    230C   1560 _PT_USER_PATTERN1	=	0x230c
                    2310   1561 _PT_USER_PATTERN2	=	0x2310
                    2314   1562 _PT_COUNTER0	=	0x2314
                    2318   1563 _PT_COUNTER1	=	0x2318
                    231C   1564 _PT_COUNTER2	=	0x231c
                    2400   1565 _DFE_CTRL_REG0	=	0x2400
                    2404   1566 _DFE_CTRL_REG1	=	0x2404
                    2408   1567 _DFE_CTRL_REG2	=	0x2408
                    240C   1568 _DFE_CTRL_REG3	=	0x240c
                    2410   1569 _RX_EQ_CLK_CTRL	=	0x2410
                    2414   1570 _DFE_CTRL_REG4	=	0x2414
                    2418   1571 _DFE_ANA_REG0	=	0x2418
                    241C   1572 _DFE_ANA_REG1	=	0x241c
                    2420   1573 _DFE_STEP_REG0	=	0x2420
                    2424   1574 _DFE_STEP_REG1	=	0x2424
                    2430   1575 _DFE_FEN_EVEN_REG	=	0x2430
                    2434   1576 _DFE_FEN_ODD_REG	=	0x2434
                    2438   1577 _DFE_DC_EVEN_REG8	=	0x2438
                    243C   1578 _DFE_DC_ODD_REG8	=	0x243c
                    2440   1579 _DFE_FEXT_EVEN_REG0	=	0x2440
                    2444   1580 _DFE_FEXT_EVEN_REG1	=	0x2444
                    2448   1581 _DFE_FEXT_EVEN_REG2	=	0x2448
                    244C   1582 _DFE_FEXT_EVEN_REG3	=	0x244c
                    2450   1583 _DFE_FEXT_EVEN_REG4	=	0x2450
                    2454   1584 _DFE_FEXT_EVEN_REG5	=	0x2454
                    2458   1585 _DFE_FEXT_EVEN_REG6	=	0x2458
                    245C   1586 _DFE_FEXT_EVEN_REG7	=	0x245c
                    2460   1587 _DFE_FEXT_ODD_REG0	=	0x2460
                    2464   1588 _DFE_FEXT_ODD_REG1	=	0x2464
                    2468   1589 _DFE_FEXT_ODD_REG2	=	0x2468
                    246C   1590 _DFE_FEXT_ODD_REG3	=	0x246c
                    2470   1591 _DFE_FEXT_ODD_REG4	=	0x2470
                    2474   1592 _DFE_FEXT_ODD_REG5	=	0x2474
                    2478   1593 _DFE_FEXT_ODD_REG6	=	0x2478
                    247C   1594 _DFE_FEXT_ODD_REG7	=	0x247c
                    2480   1595 _DFE_READ_EVEN_SM_REG0	=	0x2480
                    2484   1596 _DFE_READ_EVEN_SM_REG1	=	0x2484
                    2488   1597 _DFE_READ_EVEN_SM_REG2	=	0x2488
                    248C   1598 _DFE_READ_EVEN_SM_REG3	=	0x248c
                    2490   1599 _DFE_READ_EVEN_SM_REG4	=	0x2490
                    2494   1600 _DFE_READ_EVEN_SM_REG5	=	0x2494
                    2498   1601 _DFE_READ_EVEN_SM_REG6	=	0x2498
                    249C   1602 _DFE_READ_EVEN_SM_REG7	=	0x249c
                    24A0   1603 _DFE_READ_ODD_SM_REG0	=	0x24a0
                    24A4   1604 _DFE_READ_ODD_SM_REG1	=	0x24a4
                    24A8   1605 _DFE_READ_ODD_SM_REG2	=	0x24a8
                    24AC   1606 _DFE_READ_ODD_SM_REG3	=	0x24ac
                    24B0   1607 _DFE_READ_ODD_SM_REG4	=	0x24b0
                    24B4   1608 _DFE_READ_ODD_SM_REG5	=	0x24b4
                    24B8   1609 _DFE_READ_ODD_SM_REG6	=	0x24b8
                    24BC   1610 _DFE_READ_ODD_SM_REG7	=	0x24bc
                    24C0   1611 _DFE_READ_EVEN_SM_REG8	=	0x24c0
                    24C4   1612 _DFE_READ_ODD_SM_REG8	=	0x24c4
                    24D0   1613 _DFE_READ_EVEN_2C_REG0	=	0x24d0
                    24D4   1614 _DFE_READ_EVEN_2C_REG1	=	0x24d4
                    24D8   1615 _DFE_READ_EVEN_2C_REG2	=	0x24d8
                    24DC   1616 _DFE_READ_EVEN_2C_REG3	=	0x24dc
                    24E0   1617 _DFE_READ_EVEN_2C_REG4	=	0x24e0
                    24E4   1618 _DFE_READ_EVEN_2C_REG5	=	0x24e4
                    24E8   1619 _DFE_READ_EVEN_2C_REG6	=	0x24e8
                    24EC   1620 _DFE_READ_EVEN_2C_REG7	=	0x24ec
                    24F0   1621 _DFE_READ_ODD_2C_REG0	=	0x24f0
                    24F4   1622 _DFE_READ_ODD_2C_REG1	=	0x24f4
                    24F8   1623 _DFE_READ_ODD_2C_REG2	=	0x24f8
                    24FC   1624 _DFE_READ_ODD_2C_REG3	=	0x24fc
                    2500   1625 _DFE_READ_ODD_2C_REG4	=	0x2500
                    2504   1626 _DFE_READ_ODD_2C_REG5	=	0x2504
                    2508   1627 _DFE_READ_ODD_2C_REG6	=	0x2508
                    250C   1628 _DFE_READ_ODD_2C_REG7	=	0x250c
                    2510   1629 _DFE_READ_EVEN_2C_REG8	=	0x2510
                    2514   1630 _DFE_READ_ODD_2C_REG8	=	0x2514
                    2518   1631 _CAL_OFST_REG0	=	0x2518
                    251C   1632 _CAL_OFST_REG1	=	0x251c
                    2520   1633 _CAL_OFST_REG2	=	0x2520
                    2530   1634 _DFE_DCE_REG0	=	0x2530
                    2540   1635 _DFE_STATIC_LANE_REG0	=	0x2540
                    2544   1636 _DFE_STATIC_LANE_REG1	=	0x2544
                    2548   1637 _DFE_STATIC_LANE_REG3	=	0x2548
                    254C   1638 _DFE_STATIC_LANE_REG4	=	0x254c
                    2550   1639 _DFE_STATIC_LANE_REG5	=	0x2550
                    2554   1640 _DFE_STATIC_LANE_REG6	=	0x2554
                    2560   1641 _EOM_VLD_REG0	=	0x2560
                    2564   1642 _EOM_VLD_REG1	=	0x2564
                    2568   1643 _EOM_VLD_REG2	=	0x2568
                    256C   1644 _EOM_VLD_REG3	=	0x256c
                    2570   1645 _EOM_ERR_REG0	=	0x2570
                    2574   1646 _EOM_ERR_REG1	=	0x2574
                    2578   1647 _EOM_ERR_REG2	=	0x2578
                    257C   1648 _EOM_ERR_REG3	=	0x257c
                    2580   1649 _EOM_REG0	=	0x2580
                    25F0   1650 _EOM_VLD_REG4	=	0x25f0
                    25F4   1651 _LANE_MARGIN_REG0	=	0x25f4
                    6000   1652 _CAL_CTRL1_LANE	=	0x6000
                    6004   1653 _CAL_CTRL2_LANE	=	0x6004
                    6008   1654 _CAL_CTRL3_LANE	=	0x6008
                    600C   1655 _CAL_CTRL4_LANE	=	0x600c
                    6010   1656 _CAL_SAVE_DATA1_LANE	=	0x6010
                    6014   1657 _CAL_SAVE_DATA2_LANE	=	0x6014
                    6018   1658 _CAL_SAVE_DATA3_LANE	=	0x6018
                    601C   1659 _PHY_REMOTE_CTRL_COMMAND_LANE	=	0x601c
                    6020   1660 _PHY_REMOTE_CTRL_VALUE_LANE	=	0x6020
                    6024   1661 _PHY_LOCAL_VALUE_LANE	=	0x6024
                    6028   1662 _TRX_TRAIN_IF_TIMERS1_LANE	=	0x6028
                    602C   1663 _TRX_TRAIN_IF_TIMERS2_LANE	=	0x602c
                    6030   1664 _TRX_TRAIN_IF_TIMERS_ENABLE_LANE	=	0x6030
                    6034   1665 _DFE_CONTROL_0	=	0x6034
                    6038   1666 _DFE_CONTROL_1	=	0x6038
                    6040   1667 _DFE_CONTROL_2	=	0x6040
                    6044   1668 _DFE_CONTROL_3	=	0x6044
                    6048   1669 _DFE_CONTROL_4	=	0x6048
                    604C   1670 _DFE_CONTROL_5	=	0x604c
                    6050   1671 _TRAIN_CONTROL_0	=	0x6050
                    6054   1672 _TRAIN_CONTROL_1	=	0x6054
                    6058   1673 _TRAIN_CONTROL_2	=	0x6058
                    605C   1674 _RPTA_CONFIG_0	=	0x605c
                    6060   1675 _RPTA_CONFIG_1	=	0x6060
                    6064   1676 _DLL_CAL	=	0x6064
                    6068   1677 _TRAIN_PARA_0	=	0x6068
                    606C   1678 _TRAIN_PARA_1	=	0x606c
                    6070   1679 _TRAIN_PARA_2	=	0x6070
                    6074   1680 _TRAIN_PARA_3	=	0x6074
                    6078   1681 _DFE_CONTROL_6	=	0x6078
                    607C   1682 _DFE_TEST_0	=	0x607c
                    6080   1683 _DFE_TEST_1	=	0x6080
                    6084   1684 _DFE_TEST_4	=	0x6084
                    6088   1685 _DFE_TEST_5	=	0x6088
                    608C   1686 _DFE_CONTROL_7	=	0x608c
                    6090   1687 _DFE_CONTROL_8	=	0x6090
                    6094   1688 _DFE_CONTROL_9	=	0x6094
                    6098   1689 _DFE_CONTROL_10	=	0x6098
                    609C   1690 _DFE_CONTROL_11	=	0x609c
                    60A0   1691 _CDS_CTRL_REG0	=	0x60a0
                    60A4   1692 _CDS_CTRL_REG1	=	0x60a4
                    60A8   1693 _ESM_POP_P_CNT_LOW_LANE	=	0x60a8
                    60AC   1694 _ESM_ERR_P_CNT_LOW_LANE	=	0x60ac
                    60B0   1695 _ESM_ERR_POP_CNT_HIGH_LANE	=	0x60b0
                    60B4   1696 _TRAIN_CONTROL_3	=	0x60b4
                    60B8   1697 _TRAIN_CONTROL_4	=	0x60b8
                    60BC   1698 _TRAIN_CONTROL_5	=	0x60bc
                    60C0   1699 _TRAIN_CONTROL_6	=	0x60c0
                    60C4   1700 _TRAIN_CONTROL_7	=	0x60c4
                    60C8   1701 _TRAIN_CONTROL_8	=	0x60c8
                    60CC   1702 _TRAIN_CONTROL_9	=	0x60cc
                    60D0   1703 _TRAIN_CONTROL_10	=	0x60d0
                    60D4   1704 _TRAIN_CONTROL_11	=	0x60d4
                    60D8   1705 _TRAIN_CONTROL_12	=	0x60d8
                    60DC   1706 _ESM_POP_N_CNT_LOW_LANE	=	0x60dc
                    60E0   1707 _ESM_ERR_N_CNT_LOW_LANE	=	0x60e0
                    60E4   1708 _TRAIN_CONTROL_13	=	0x60e4
                    60E8   1709 _TRAIN_CONTROL_14	=	0x60e8
                    60EC   1710 _TRAIN_CONTROL_15	=	0x60ec
                    60F0   1711 _TRAIN_CONTROL_16	=	0x60f0
                    60F4   1712 _TRAIN_CONTROL_17	=	0x60f4
                    60F8   1713 _END_XDAT_LANE	=	0x60f8
                    A000   1714 _TX_CMN_REG	=	0xa000
                    A008   1715 _DTX_REG0	=	0xa008
                    A00C   1716 _DTX_REG1	=	0xa00c
                    A010   1717 _DTX_REG2	=	0xa010
                    A014   1718 _DTX_REG3	=	0xa014
                    A018   1719 _DTX_REG4	=	0xa018
                    A01C   1720 _DTX_PHY_ALIGN_REG0	=	0xa01c
                    A024   1721 _DTX_PHY_ALIGN_REG1	=	0xa024
                    A028   1722 _DTX_PHY_ALIGN_REG2	=	0xa028
                    A02C   1723 _SRIS_REG0	=	0xa02c
                    A030   1724 _SRIS_REG1	=	0xa030
                    A100   1725 _RX_CMN_0	=	0xa100
                    A110   1726 _DFE_STATIC_REG0	=	0xa110
                    A114   1727 _DFE_STATIC_REG1	=	0xa114
                    A118   1728 _DFE_STATIC_REG3	=	0xa118
                    A11C   1729 _DFE_STATIC_REG4	=	0xa11c
                    A120   1730 _DFE_STATIC_REG5	=	0xa120
                    A124   1731 _DFE_STATIC_REG6	=	0xa124
                    4200   1732 _GLOB_RST_CLK_CTRL	=	0x4200
                    4204   1733 _GLOB_CLK_SRC_LO	=	0x4204
                    4208   1734 _GLOB_CLK_SRC_HI	=	0x4208
                    420C   1735 _GLOB_MISC_CTRL	=	0x420c
                    4210   1736 _GLOB_DP_SAL_CFG	=	0x4210
                    4214   1737 _GLOB_DP_SAL_CFG1	=	0x4214
                    4218   1738 _GLOB_DP_SAL_CFG3	=	0x4218
                    421C   1739 _GLOB_DP_SAL_CFG5	=	0x421c
                    4220   1740 _GLOB_PM_CFG0	=	0x4220
                    4224   1741 _GLOB_COUNTER_CTRL	=	0x4224
                    4228   1742 _GLOB_COUNTER_HI	=	0x4228
                    422C   1743 _GLOB_PM_DP_CTRL	=	0x422c
                    4230   1744 _GLOB_DP_BAL_CFG0	=	0x4230
                    4234   1745 _GLOB_DP_BAL_CFG2	=	0x4234
                    4238   1746 _GLOB_DP_BAL_CFG4	=	0x4238
                    423C   1747 _GLOB_BIST_CTRL	=	0x423c
                    4240   1748 _GLOB_BIST_LANE_TYPE	=	0x4240
                    4244   1749 _GLOB_BIST_START	=	0x4244
                    4248   1750 _GLOB_BIST_MASK	=	0x4248
                    424C   1751 _GLOB_BIST_RESULT	=	0x424c
                    4250   1752 _GLOB_BIST_SEQR_CFG	=	0x4250
                    4254   1753 _GLOB_BIST_DATA_HI	=	0x4254
                    4258   1754 _GLOB_PIPE_REVISION	=	0x4258
                    425C   1755 _GLOB_L1_SUBSTATES_CFG	=	0x425c
                    A200   1756 _MCU_CONTROL_0	=	0xa200
                    A204   1757 _MCU_CONTROL_1	=	0xa204
                    A208   1758 _MCU_CONTROL_2	=	0xa208
                    A20C   1759 _MCU_CONTROL_3	=	0xa20c
                    A210   1760 _MCU_CONTROL_4	=	0xa210
                    A214   1761 _MCU_DEBUG0	=	0xa214
                    A218   1762 _MCU_DEBUG1	=	0xa218
                    A21C   1763 _MEMORY_CONTROL_0	=	0xa21c
                    A220   1764 _MEMORY_CONTROL_1	=	0xa220
                    A224   1765 _MEMORY_CONTROL_2	=	0xa224
                    A228   1766 _MEMORY_CONTROL_3	=	0xa228
                    A22C   1767 _MEMORY_CONTROL_4	=	0xa22c
                    A234   1768 _MCU_INFO_0	=	0xa234
                    A238   1769 _MCU_INFO_1	=	0xa238
                    A23C   1770 _MCU_INFO_2	=	0xa23c
                    A240   1771 _MCU_INFO_3	=	0xa240
                    A244   1772 _MEM_CMN_ECC_ERR_ADDRESS0	=	0xa244
                    A2E0   1773 _ANA_IF_CMN_REG1	=	0xa2e0
                    A2E4   1774 _MEM_IRQ	=	0xa2e4
                    A2E8   1775 _MEM_IRQ_MASK	=	0xa2e8
                    A2EC   1776 _ANA_IF_CMN_REG0	=	0xa2ec
                    A2F0   1777 _APB_CONTROL_REG	=	0xa2f0
                    A2F4   1778 _MEM_IRQ_CLEAR	=	0xa2f4
                    A2F8   1779 _MCU_SYNC1	=	0xa2f8
                    A2FC   1780 _MCU_SYNC2	=	0xa2fc
                    A300   1781 _TEST0	=	0xa300
                    A304   1782 _TEST1	=	0xa304
                    A308   1783 _TEST2	=	0xa308
                    A30C   1784 _TEST3	=	0xa30c
                    A310   1785 _TEST4	=	0xa310
                    A314   1786 _SYSTEM	=	0xa314
                    A318   1787 _PM_CMN_REG1	=	0xa318
                    A31C   1788 _INPUT_CMN_PIN_REG0	=	0xa31c
                    A320   1789 _INPUT_CMN_PIN_REG1	=	0xa320
                    A324   1790 _INPUT_CMN_PIN_REG2	=	0xa324
                    A328   1791 _ANA_TSEN_CONTROL	=	0xa328
                    A32C   1792 _PLLCAL_REG0	=	0xa32c
                    A330   1793 _PLLCAL_REG1	=	0xa330
                    A334   1794 _CLKGEN_CMN_REG1	=	0xa334
                    A338   1795 _SPD_CMN_REG1	=	0xa338
                    A33C   1796 _OUTPUT_CMN_PIN_REG0	=	0xa33c
                    A340   1797 _CMN_CALIBRATION	=	0xa340
                    A344   1798 __FIELDNAME_	=	0xa344
                    A348   1799 _INPUT_CMN_PIN_REG3	=	0xa348
                    A34C   1800 _PM_CMN_REG2	=	0xa34c
                    A354   1801 _TEST5	=	0xa354
                    A358   1802 _XDATA_MEM_CHECKSUM_CMN_0	=	0xa358
                    A35C   1803 _XDATA_MEM_CHECKSUM_CMN_1	=	0xa35c
                    A360   1804 _XDATA_MEM_CHECKSUM_CMN_2	=	0xa360
                    A364   1805 _MCU_SDT_CMN	=	0xa364
                    A368   1806 _CMN_CACHE_DEBUG0	=	0xa368
                    A36C   1807 _MCU_INT_ADDR	=	0xa36c
                    A370   1808 _CMN_ISR_2	=	0xa370
                    A374   1809 _CMN_ISR_MASK_2	=	0xa374
                    A378   1810 _CMN_ISR_CLEAR_2	=	0xa378
                    A37C   1811 _CMN_MCU_GPIO	=	0xa37c
                    A380   1812 _CMN_CACHE_DEBUG1	=	0xa380
                    A384   1813 _CMN_MCU_TIMER_CONTROL	=	0xa384
                    A388   1814 _CMN_MCU_TIMER_CTRL_2_LANE	=	0xa388
                    A38C   1815 _CMN_MCU_TIMER_CTRL_3_LANE	=	0xa38c
                    A390   1816 _CMN_MCU_TIMER_CTRL_4_LANE	=	0xa390
                    A394   1817 _CMN_MCU_TIMER_CTRL_5_LANE	=	0xa394
                    A398   1818 _CMN_MCU_TIMER0_CONTROL	=	0xa398
                    A39C   1819 _CMN_MCU_TIMER1_CONTROL	=	0xa39c
                    A3A0   1820 _CMN_MCU_TIMER2_CONTROL	=	0xa3a0
                    A3A4   1821 _CMN_MCU_TIMER3_CONTROL	=	0xa3a4
                    A3A8   1822 _CMN_ISR_1	=	0xa3a8
                    A3AC   1823 _CMN_ISR_MASK_1	=	0xa3ac
                    A3B0   1824 _SET_LANE_ISR	=	0xa3b0
                    A3F4   1825 _CMN_MCU_REG	=	0xa3f4
                    A3F8   1826 _CID_REG0	=	0xa3f8
                    A3FC   1827 _CID_REG1	=	0xa3fc
                    E600   1828 _FW_REV	=	0xe600
                    E604   1829 _CONTROL_CONFIG0	=	0xe604
                    E608   1830 _CONTROL_CONFIG1	=	0xe608
                    E60C   1831 _CONTROL_CONFIG2	=	0xe60c
                    E610   1832 _CONTROL_CONFIG3	=	0xe610
                    E614   1833 _CONTROL_CONFIG4	=	0xe614
                    E618   1834 _CONTROL_CONFIG5	=	0xe618
                    E61C   1835 _CONTROL_CONFIG6	=	0xe61c
                    E620   1836 _CONTROL_CONFIG7	=	0xe620
                    E624   1837 _CAL_DATA0	=	0xe624
                    E628   1838 _TRAIN_IF_CONFIG	=	0xe628
                    E62C   1839 _CONTROL_CONFIG8	=	0xe62c
                    E630   1840 _CONTROL_CONFIG9	=	0xe630
                    E634   1841 _CON_CAL_STEP_SIZE1	=	0xe634
                    E638   1842 _CON_CAL_STEP_SIZE2	=	0xe638
                    E63C   1843 _CON_CAL_STEP_SIZE3	=	0xe63c
                    E640   1844 _CON_CAL_STEP_SIZE4	=	0xe640
                    E644   1845 _CON_CAL_STEP_SIZE5	=	0xe644
                    E648   1846 _CAL_TIME_OUT_AND_DIS	=	0xe648
                    E64C   1847 _CAL_STATUS_READ	=	0xe64c
                    E650   1848 _MCU_CONFIG	=	0xe650
                    E654   1849 _CAL_DATA1	=	0xe654
                    E658   1850 _LOOP_CNTS	=	0xe658
                    E65C   1851 _MCU_CONFIG1	=	0xe65c
                    E660   1852 _TIMER_SEL1	=	0xe660
                    E664   1853 _TIMER_SEL2	=	0xe664
                    E668   1854 _TIMER_SEL3	=	0xe668
                    E66C   1855 _G_SELLV_TXCLK	=	0xe66c
                    E670   1856 _G_SELLV_TXDATA	=	0xe670
                    E674   1857 _G_SELLV_TXPRE	=	0xe674
                    E678   1858 _G_SELLV_RXEOMCLK	=	0xe678
                    E67C   1859 _G_SELLV_RXDATACLK	=	0xe67c
                    E680   1860 _G_SELLV_RXSAMPLER	=	0xe680
                    E684   1861 _SAS_PRESET0_TB	=	0xe684
                    E688   1862 _SAS_PRESET1_TB	=	0xe688
                    E68C   1863 _SAS_PRESET2_TB	=	0xe68c
                    E690   1864 _ETH_PRESET0_TB	=	0xe690
                    E694   1865 _ETH_PRESET1_TB	=	0xe694
                    E698   1866 _TX_SAVE_0	=	0xe698
                    E69C   1867 _TX_SAVE_1	=	0xe69c
                    E6A0   1868 _TX_SAVE_2	=	0xe6a0
                    E6A4   1869 _TX_SAVE_3	=	0xe6a4
                    E6A8   1870 _TX_SAVE_4	=	0xe6a8
                    E6AC   1871 _CDS_EYE_CLK_THR	=	0xe6ac
                    E6B0   1872 _SYNC_INFO	=	0xe6b0
                    E6B4   1873 _MCU_INFO_4	=	0xe6b4
                    E6B8   1874 _MCU_INFO_5	=	0xe6b8
                    E6BC   1875 _MCU_INFO_12	=	0xe6bc
                    E6C0   1876 _MCU_INFO_13	=	0xe6c0
                    E6C4   1877 _END_XDAT_CMN	=	0xe6c4
                    2600   1878 _DME_ENC_REG0	=	0x2600
                    2604   1879 _DME_ENC_REG1	=	0x2604
                    2608   1880 _DME_ENC_REG2	=	0x2608
                    260C   1881 _DME_DEC_REG0	=	0x260c
                    2610   1882 _DME_DEC_REG1	=	0x2610
                    2614   1883 _TX_TRAIN_IF_REG0	=	0x2614
                    2618   1884 _TX_TRAIN_IF_REG1	=	0x2618
                    261C   1885 _TX_TRAIN_IF_REG2	=	0x261c
                    2620   1886 _TX_TRAIN_IF_REG3	=	0x2620
                    2624   1887 _TX_TRAIN_PATTTERN_REG0	=	0x2624
                    2628   1888 _TX_TRAIN_DRIVER_REG0	=	0x2628
                    262C   1889 _TX_TRAIN_DRIVER_REG1	=	0x262c
                    2630   1890 _TX_TRAIN_DRIVER_REG2	=	0x2630
                    2634   1891 _TX_TRAIN_DEFAULT_REG0	=	0x2634
                    2638   1892 _TX_TRAIN_DEFAULT_REG1	=	0x2638
                    263C   1893 _TX_TRAIN_DEFAULT_REG2	=	0x263c
                    2640   1894 _TX_TRAIN_DEFAULT_REG3	=	0x2640
                    2644   1895 _TX_TRAIN_DEFAULT_REG4	=	0x2644
                    2648   1896 _TX_TRAIN_DEFAULT_REG5	=	0x2648
                    264C   1897 _TX_EMPH_CTRL_REG0	=	0x264c
                    2650   1898 _LINK_TRAIN_MODE0	=	0x2650
                    2654   1899 _TX_DRV_RD_OUT_REG0	=	0x2654
                    2658   1900 _TX_AMP_CTRL_REG0	=	0x2658
                    265C   1901 _TRX_TRAIN_IF_INTERRUPT_LANE	=	0x265c
                    2660   1902 _TRX_TRAIN_IF_INTERRUPT_MASK0_LANE	=	0x2660
                    2664   1903 _TRX_TRAIN_IF_INTERRUPT_CLEAR_LANE	=	0x2664
                    2668   1904 _TX_TRAIN_IF_REG4	=	0x2668
                    266C   1905 _TX_TRAIN_IF_REG5	=	0x266c
                    2670   1906 _TX_TRAIN_IF_REG6	=	0x2670
                    2674   1907 _TX_TRAIN_IF_REG7	=	0x2674
                    2678   1908 _TX_TRAIN_CTRL_LANE	=	0x2678
                    267C   1909 _TX_TRAIN_IF_REG8	=	0x267c
                    6100   1910 _DFE_READ_EVEN_REG0	=	0x6100
                    6104   1911 _DFE_READ_EVEN_REG1	=	0x6104
                    6108   1912 _DFE_READ_EVEN_REG2	=	0x6108
                    610C   1913 _DFE_READ_EVEN_REG3	=	0x610c
                    6110   1914 _DFE_READ_EVEN_REG4	=	0x6110
                    6114   1915 _DFE_READ_EVEN_REG5	=	0x6114
                    6118   1916 _DFE_READ_EVEN_REG6	=	0x6118
                    611C   1917 _DFE_READ_EVEN_REG7	=	0x611c
                    6120   1918 _DFE_READ_ODD_REG0	=	0x6120
                    6124   1919 _DFE_READ_ODD_REG1	=	0x6124
                    6128   1920 _DFE_READ_ODD_REG2	=	0x6128
                    612C   1921 _DFE_READ_ODD_REG3	=	0x612c
                    6130   1922 _DFE_READ_ODD_REG4	=	0x6130
                    6134   1923 _DFE_READ_ODD_REG5	=	0x6134
                    6138   1924 _DFE_READ_ODD_REG6	=	0x6138
                    613C   1925 _DFE_READ_ODD_REG7	=	0x613c
                    6140   1926 _DFE_READ_EVEN_REG8	=	0x6140
                    6144   1927 _DFE_READ_ODD_REG8	=	0x6144
                    6148   1928 _DFE_READ_F0A_EVEN	=	0x6148
                    614C   1929 _DFE_READ_F0A_ODD	=	0x614c
                    6150   1930 _DFE_READ_F0B_EVEN	=	0x6150
                    6154   1931 _DFE_READ_F0B_ODD	=	0x6154
                    6158   1932 _DFE_READ_F0D_EVEN	=	0x6158
                    615C   1933 _DFE_READ_F0D_ODD	=	0x615c
                    6160   1934 _DFE_READ_F0D_LEFT_EVEN	=	0x6160
                    6164   1935 _DFE_READ_F0D_LEFT_ODD	=	0x6164
                    6168   1936 _DFE_READ_F0D_RIGHT_EVEN	=	0x6168
                    616C   1937 _DFE_READ_F0D_RIGHT_ODD	=	0x616c
                    6170   1938 _CDS_READ_MISC0	=	0x6170
                    6174   1939 _CDS_READ_MISC1	=	0x6174
                    6214   1940 _TXTRAIN_IF_REG0	=	0x6214
                    E000   1941 _lc_speedtable	=	0xe000
                    E1C0   1942 _ring_speedtable	=	0xe1c0
                    E5C0   1943 _phy_mode_cmn_table	=	0xe5c0
                    6300   1944 _max_gen	=	0x6300
                    6301   1945 _min_gen	=	0x6301
                    6304   1946 _speedtable	=	0x6304
                    65D4   1947 _phy_mode_lane_table	=	0x65d4
                    60B4   1948 _rc_save	=	0x60b4
                    60D0   1949 _txffe_save	=	0x60d0
                    60E4   1950 _phase_save	=	0x60e4
                    6030   1951 _train_gn1_index	=	0x6030
                    6031   1952 _train_g1_index	=	0x6031
                    6032   1953 _train_g0_index	=	0x6032
                    E6B0   1954 _local_tx_preset_tb	=	0xe6b0
                    E5C1   1955 _cmx_cal_lcvco_dac	=	0xe5c1
                    E5C1   1956 _cmx_cal_lcvco_dac_lsb	=	0xe5c1
                    E5C4   1957 _cmx_cal_lcvco_dac_msb	=	0xe5c4
                    E5CA   1958 _cmx_cal_lccap_msb	=	0xe5ca
                    E5C8   1959 _cmx_cal_lccap_lsb	=	0xe5c8
                    E5CC   1960 _cmx_cal_plldcc	=	0xe5cc
                    E5D0   1961 _cmx_cal_pll_speed_ring	=	0xe5d0
                    E5D4   1962 _cmx_cal_pll_sllp_dac_coarse_ring	=	0xe5d4
                    E5D8   1963 _cmx_cal_sllp_dac_fine_ring	=	0xe5d8
                    65D4   1964 _lnx_cal_txdcc_pdiv	=	0x65d4
                    65D8   1965 _lnx_cal_txdcc_pdiv_hg	=	0x65d8
                    65DA   1966 _lnx_cal_txdcc	=	0x65da
                    65DE   1967 _lnx_cal_txdcc_hg	=	0x65de
                    65E0   1968 _lnx_cal_rxdcc_dll	=	0x65e0
                    65E4   1969 _lnx_cal_rxdcc_dll_hg	=	0x65e4
                    65E6   1970 _lnx_cal_rxdcc_data	=	0x65e6
                    65F0   1971 _lnx_cal_rxdcc_data_hg	=	0x65f0
                    65F5   1972 _lnx_cal_rxdcc_eom	=	0x65f5
                    65FF   1973 _lnx_cal_rxdcc_eom_hg	=	0x65ff
                    6604   1974 _lnx_cal_dll_gmsel	=	0x6604
                    6606   1975 _lnx_cal_vdda_dll_sel	=	0x6606
                    660A   1976 _lnx_cal_dll_eom_gmsel	=	0x660a
                    660C   1977 _lnx_cal_vdda_dll_eom_sel	=	0x660c
                    6610   1978 _lnx_cal_eom_dpher	=	0x6610
                    6612   1979 _lnx_cal_align90_dummy_clk	=	0x6612
                    661A   1980 _lnx_cal_align90_dac	=	0x661a
                    6622   1981 _lnx_cal_align90_gm	=	0x6622
                    662A   1982 _lnx_cal_sellv_txdata	=	0x662a
                    6634   1983 _lnx_cal_sellv_txclk	=	0x6634
                    663E   1984 _lnx_cal_sellv_rxdataclk	=	0x663e
                    6648   1985 _lnx_cal_sellv_txpre	=	0x6648
                    6652   1986 _lnx_cal_sellv_rxsampler	=	0x6652
                    665C   1987 _lnx_cal_sellv_rxeomclk	=	0x665c
                    6666   1988 _lnx_spdoft_tx_preset_index_lane	=	0x6666
                    6490   1989 _lnx_calx_txdcc_pdiv	=	0x6490
                    6496   1990 _lnx_calx_txdcc_pdiv_hg	=	0x6496
                    6499   1991 _lnx_calx_txdcc	=	0x6499
                    649F   1992 _lnx_calx_txdcc_hg	=	0x649f
                    64A2   1993 _lnx_calx_rxdcc_dll	=	0x64a2
                    64A8   1994 _lnx_calx_rxdcc_dll_hg	=	0x64a8
                    64AB   1995 _lnx_calx_dll_gmsel	=	0x64ab
                    64AE   1996 _lnx_calx_vdda_dll_sel	=	0x64ae
                    64B4   1997 _lnx_calx_dll_eom_gmsel	=	0x64b4
                    64B7   1998 _lnx_calx_vdda_dll_eom_sel	=	0x64b7
                    64BD   1999 _lnx_calx_eom_dpher	=	0x64bd
                    64C0   2000 _lnx_calx_align90_dummy_clk	=	0x64c0
                    64CC   2001 _lnx_calx_align90_dac	=	0x64cc
                    64D8   2002 _lnx_calx_align90_gm	=	0x64d8
                    6100   2003 _cds28	=	0x6100
                    6178   2004 _dfe_sm	=	0x6178
                    61B8   2005 _dfe_sm_dc	=	0x61b8
                    61C0   2006 _dfe_sm_save	=	0x61c0
                    03FC   2007 _UPHY_ANAREG_REV_0	=	0x03fc
                    E684   2008 _tx_tb	=	0xe684
                    E698   2009 _train_save_tb	=	0xe698
                    607C   2010 _sq_thrs_ratio_tb	=	0x607c
                           2011 ;--------------------------------------------------------
                           2012 ; absolute external ram data
                           2013 ;--------------------------------------------------------
                           2014 	.area XABS    (ABS,XDATA)
                           2015 ;--------------------------------------------------------
                           2016 ; external initialized ram data
                           2017 ;--------------------------------------------------------
                           2018 	.area HOME    (CODE)
                           2019 	.area GSINIT0 (CODE)
                           2020 	.area GSINIT1 (CODE)
                           2021 	.area GSINIT2 (CODE)
                           2022 	.area GSINIT3 (CODE)
                           2023 	.area GSINIT4 (CODE)
                           2024 	.area GSINIT5 (CODE)
                           2025 	.area GSINIT  (CODE)
                           2026 	.area GSFINAL (CODE)
                           2027 	.area CSEG    (CODE)
                           2028 ;--------------------------------------------------------
                           2029 ; global & static initialisations
                           2030 ;--------------------------------------------------------
                           2031 	.area HOME    (CODE)
                           2032 	.area GSINIT  (CODE)
                           2033 	.area GSFINAL (CODE)
                           2034 	.area GSINIT  (CODE)
                           2035 ;--------------------------------------------------------
                           2036 ; Home
                           2037 ;--------------------------------------------------------
                           2038 	.area HOME    (CODE)
                           2039 	.area HOME    (CODE)
                           2040 ;--------------------------------------------------------
                           2041 ; code
                           2042 ;--------------------------------------------------------
                           2043 	.area BANK2   (CODE)
                           2044 ;------------------------------------------------------------
                           2045 ;Allocation info for local variables in function 'txdcc_clk_toggle'
                           2046 ;------------------------------------------------------------
                           2047 ;------------------------------------------------------------
                           2048 ;	../../shared/src/dcc_cal.c:41: void txdcc_clk_toggle( void ) BANKING_CTRL {
                           2049 ;	-----------------------------------------
                           2050 ;	 function txdcc_clk_toggle
                           2051 ;	-----------------------------------------
   0000                    2052 _txdcc_clk_toggle:
                    0002   2053 	ar2 = 0x02
                    0003   2054 	ar3 = 0x03
                    0004   2055 	ar4 = 0x04
                    0005   2056 	ar5 = 0x05
                    0006   2057 	ar6 = 0x06
                    0007   2058 	ar7 = 0x07
                    0000   2059 	ar0 = 0x00
                    0001   2060 	ar1 = 0x01
                           2061 ;	../../shared/src/dcc_cal.c:43: TXDCC_CLK = 1;
   0000 90 02 20           2062 	mov	dptr,#_UPHY14_TRX_ANAREG_TOP_136
   0003 E0                 2063 	movx	a,@dptr
   0004 44 01              2064 	orl	a,#0x01
   0006 F0                 2065 	movx	@dptr,a
                           2066 ;	../../shared/src/dcc_cal.c:44: delay01(30);
   0007 90 00 1E           2067 	mov	dptr,#0x001E
   000A 78r00              2068 	mov	r0,#_delay01
   000C 79s00              2069 	mov	r1,#(_delay01 >> 8)
   000E 7As00              2070 	mov	r2,#(_delay01 >> 16)
   0010 12s00r00           2071 	lcall	__sdcc_banked_call
                           2072 ;	../../shared/src/dcc_cal.c:45: TXDCC_CLK = 0;
   0013 90 02 20           2073 	mov	dptr,#_UPHY14_TRX_ANAREG_TOP_136
   0016 E0                 2074 	movx	a,@dptr
   0017 54 FE              2075 	anl	a,#0xfe
   0019 F0                 2076 	movx	@dptr,a
                           2077 ;	../../shared/src/dcc_cal.c:46: delay01(30);
   001A 90 00 1E           2078 	mov	dptr,#0x001E
   001D 78r00              2079 	mov	r0,#_delay01
   001F 79s00              2080 	mov	r1,#(_delay01 >> 8)
   0021 7As00              2081 	mov	r2,#(_delay01 >> 16)
   0023 12s00r00           2082 	lcall	__sdcc_banked_call
   0026 02s00r00           2083 	ljmp	__sdcc_banked_ret
                           2084 ;------------------------------------------------------------
                           2085 ;Allocation info for local variables in function 'txdcc_cal'
                           2086 ;------------------------------------------------------------
                           2087 ;dcc_cnt                   Allocated to stack - offset 1
                           2088 ;latched_TXDCC_DN          Allocated to registers r2 
                           2089 ;int_dn                    Allocated to stack - offset 2
                           2090 ;int_up                    Allocated to stack - offset 3
                           2091 ;dir                       Allocated to stack - offset 4
                           2092 ;time_out_cnt              Allocated to registers r5 
                           2093 ;in_cont_mode              Allocated to stack - offset 5
                           2094 ;in_power_on               Allocated to stack - offset 6
                           2095 ;ext_en                    Allocated to registers r4 
                           2096 ;saved_speed_div           Allocated to registers r4 
                           2097 ;hg_set                    Allocated to stack - offset 7
                           2098 ;sloc0                     Allocated to stack - offset 12
                           2099 ;------------------------------------------------------------
                           2100 ;	../../shared/src/dcc_cal.c:52: void txdcc_cal(void) BANKING_CTRL {
                           2101 ;	-----------------------------------------
                           2102 ;	 function txdcc_cal
                           2103 ;	-----------------------------------------
   0029                    2104 _txdcc_cal:
   0029 C0*00              2105 	push	_bp
   002B E5 81              2106 	mov	a,sp
   002D F5*00              2107 	mov	_bp,a
   002F 24 07              2108 	add	a,#0x07
   0031 F5 81              2109 	mov	sp,a
                           2110 ;	../../shared/src/dcc_cal.c:65: PHY_STATUS = ST_TXDCC_CAL;    
   0033 90 22 30           2111 	mov	dptr,#_MCU_STATUS0_LANE
   0036 74 15              2112 	mov	a,#0x15
   0038 F0                 2113 	movx	@dptr,a
                           2114 ;	../../shared/src/dcc_cal.c:67: lnx_TXDCC_CAL_DONE_LANE = 0; 
   0039 90 60 02           2115 	mov	dptr,#(_CAL_CTRL1_LANE + 0x0002)
   003C E0                 2116 	movx	a,@dptr
   003D 54 FE              2117 	anl	a,#0xfe
   003F F0                 2118 	movx	@dptr,a
                           2119 ;	../../shared/src/dcc_cal.c:69: in_cont_mode = 0;
   0040 E5*00              2120 	mov	a,_bp
   0042 24 05              2121 	add	a,#0x05
   0044 F8                 2122 	mov	r0,a
   0045 76 00              2123 	mov	@r0,#0x00
                           2124 ;	../../shared/src/dcc_cal.c:70: in_power_on = 0;
   0047 E5*00              2125 	mov	a,_bp
   0049 24 06              2126 	add	a,#0x06
   004B F8                 2127 	mov	r0,a
                           2128 ;	../../shared/src/dcc_cal.c:71: saved_speed_div = 0;
                           2129 ;	../../shared/src/dcc_cal.c:72: time_out_cnt = 0;
                           2130 ;	../../shared/src/dcc_cal.c:73: dir = 0;  
   004C E4                 2131 	clr	a
   004D F6                 2132 	mov	@r0,a
   004E FC                 2133 	mov	r4,a
   004F FD                 2134 	mov	r5,a
   0050 E5*00              2135 	mov	a,_bp
   0052 24 04              2136 	add	a,#0x04
   0054 F8                 2137 	mov	r0,a
   0055 76 00              2138 	mov	@r0,#0x00
                           2139 ;	../../shared/src/dcc_cal.c:74: hg_set = 0;
   0057 E5*00              2140 	mov	a,_bp
   0059 24 07              2141 	add	a,#0x07
   005B F8                 2142 	mov	r0,a
   005C 76 00              2143 	mov	@r0,#0x00
                           2144 ;	../../shared/src/dcc_cal.c:77: if (lnx_CAL_DONE_LANE == 0) {                        //power-on calibration
   005E 90 60 03           2145 	mov	dptr,#(_CAL_CTRL1_LANE + 0x0003)
   0061 E0                 2146 	movx	a,@dptr
   0062 30 E0 03           2147 	jnb	acc.0,00187$
   0065 02s01r04           2148 	ljmp	00112$
   0068                    2149 00187$:
                           2150 ;	../../shared/src/dcc_cal.c:78: ext_en = cmx_EXT_FORCE_CAL_DONE || cmx_TXDCC_CAL_EXT_EN;
   0068 90 E6 06           2151 	mov	dptr,#(_CONTROL_CONFIG0 + 0x0002)
   006B E0                 2152 	movx	a,@dptr
   006C 20 E1 0B           2153 	jb	acc.1,00159$
   006F 90 E6 0B           2154 	mov	dptr,#(_CONTROL_CONFIG1 + 0x0003)
   0072 E0                 2155 	movx	a,@dptr
   0073 20 E1 04           2156 	jb	acc.1,00159$
   0076 7A 00              2157 	mov	r2,#0x00
   0078 80 02              2158 	sjmp	00160$
   007A                    2159 00159$:
   007A 7A 01              2160 	mov	r2,#0x01
   007C                    2161 00160$:
   007C C0 04              2162 	push	ar4
   007E 8A 04              2163 	mov	ar4,r2
                           2164 ;	../../shared/src/dcc_cal.c:79: if (ext_en){                                     //use ext value for power-on, bypass calibration
   0080 EC                 2165 	mov	a,r4
   0081 D0 04              2166 	pop	ar4
   0083 60 30              2167 	jz	00102$
                           2168 ;	../../shared/src/dcc_cal.c:80: dcc_cnt = lnx_cal_txdcc[PWR][tx_pll_rate];
   0085 C0 04              2169 	push	ar4
   0087 A2*00              2170 	mov	c,_tx_pll_rate
   0089 E4                 2171 	clr	a
   008A 33                 2172 	rlc	a
   008B 24 DA              2173 	add	a,#_lnx_cal_txdcc
   008D F5 82              2174 	mov	dpl,a
   008F E4                 2175 	clr	a
   0090 34 65              2176 	addc	a,#(_lnx_cal_txdcc >> 8)
   0092 F5 83              2177 	mov	dph,a
   0094 E0                 2178 	movx	a,@dptr
   0095 FC                 2179 	mov	r4,a
   0096 A8*00              2180 	mov	r0,_bp
   0098 08                 2181 	inc	r0
   0099 A6 04              2182 	mov	@r0,ar4
                           2183 ;	../../shared/src/dcc_cal.c:81: TXDCC_HG = lnx_cal_txdcc_hg[tx_pll_rate];      //load the HG setting. 
   009B A2*00              2184 	mov	c,_tx_pll_rate
   009D E4                 2185 	clr	a
   009E 33                 2186 	rlc	a
   009F 24 DE              2187 	add	a,#_lnx_cal_txdcc_hg
   00A1 F5 82              2188 	mov	dpl,a
   00A3 E4                 2189 	clr	a
   00A4 34 65              2190 	addc	a,#(_lnx_cal_txdcc_hg >> 8)
   00A6 F5 83              2191 	mov	dph,a
   00A8 E0                 2192 	movx	a,@dptr
   00A9 90 02 50           2193 	mov	dptr,#_UPHY14_TRX_ANAREG_TOP_148
   00AC 13                 2194 	rrc	a
   00AD E0                 2195 	movx	a,@dptr
   00AE 92 E7              2196 	mov	acc.7,c
   00B0 F0                 2197 	movx	@dptr,a
   00B1 D0 04              2198 	pop	ar4
   00B3 80 39              2199 	sjmp	00103$
   00B5                    2200 00102$:
                           2201 ;	../../shared/src/dcc_cal.c:84: lnx_TXDCC_CAL_PASS_LANE = 0; 
   00B5 90 60 06           2202 	mov	dptr,#(_CAL_CTRL2_LANE + 0x0002)
   00B8 E0                 2203 	movx	a,@dptr
   00B9 54 EF              2204 	anl	a,#0xef
   00BB F0                 2205 	movx	@dptr,a
                           2206 ;	../../shared/src/dcc_cal.c:85: TXDCCCAL_EN = 1;
   00BC 90 02 4C           2207 	mov	dptr,#_UPHY14_TRX_ANAREG_TOP_147
   00BF E0                 2208 	movx	a,@dptr
   00C0 44 80              2209 	orl	a,#0x80
   00C2 F0                 2210 	movx	@dptr,a
                           2211 ;	../../shared/src/dcc_cal.c:86: TRXDCCIN_SEL = 4;
   00C3 90 00 44           2212 	mov	dptr,#_UPHY14_TRX_ANAREG_BOT_17
   00C6 E0                 2213 	movx	a,@dptr
   00C7 54 1F              2214 	anl	a,#0x1f
   00C9 44 80              2215 	orl	a,#0x80
   00CB F0                 2216 	movx	@dptr,a
                           2217 ;	../../shared/src/dcc_cal.c:87: TXDCC_HG = 0; 
   00CC 90 02 50           2218 	mov	dptr,#_UPHY14_TRX_ANAREG_TOP_148
   00CF E0                 2219 	movx	a,@dptr
   00D0 54 7F              2220 	anl	a,#0x7f
   00D2 F0                 2221 	movx	@dptr,a
                           2222 ;	../../shared/src/dcc_cal.c:88: saved_speed_div = TX_SPEED_DIV;               //E2C clock DCC cal need to force SPEED_DIV to 0
   00D3 90 02 58           2223 	mov	dptr,#_UPHY14_TRX_ANAREG_TOP_150
   00D6 E0                 2224 	movx	a,@dptr
   00D7 54 07              2225 	anl	a,#0x07
   00D9 FA                 2226 	mov	r2,a
   00DA FC                 2227 	mov	r4,a
                           2228 ;	../../shared/src/dcc_cal.c:89: in_power_on = 1;                              //flag the power-on calibration, so restore speed_div at the end
   00DB E5*00              2229 	mov	a,_bp
   00DD 24 06              2230 	add	a,#0x06
   00DF F8                 2231 	mov	r0,a
   00E0 76 01              2232 	mov	@r0,#0x01
                           2233 ;	../../shared/src/dcc_cal.c:90: TX_SPEED_DIV = 0;                             //Before force SPEED_DIV to 0, save the original one 
   00E2 90 02 58           2234 	mov	dptr,#_UPHY14_TRX_ANAREG_TOP_150
   00E5 E0                 2235 	movx	a,@dptr
   00E6 54 F8              2236 	anl	a,#0xf8
   00E8 F0                 2237 	movx	@dptr,a
                           2238 ;	../../shared/src/dcc_cal.c:91: dcc_cnt = 0x20;
   00E9 A8*00              2239 	mov	r0,_bp
   00EB 08                 2240 	inc	r0
   00EC 76 20              2241 	mov	@r0,#0x20
   00EE                    2242 00103$:
                           2243 ;	../../shared/src/dcc_cal.c:93: TXDCC_EN = 1;                                  //enable TXDCC_EN during power-on, never deassert
   00EE C0 04              2244 	push	ar4
   00F0 90 02 48           2245 	mov	dptr,#_UPHY14_TRX_ANAREG_TOP_146
   00F3 E0                 2246 	movx	a,@dptr
   00F4 44 01              2247 	orl	a,#0x01
   00F6 F0                 2248 	movx	@dptr,a
                           2249 ;	../../shared/src/dcc_cal.c:94: txdcc_step_cnt = TXDCC_CAL_STEP_SIZE;              //for power-on (inc. EXT_EN), reset fraction code to middle
   00F7 90 E6 3F           2250 	mov	dptr,#(_CON_CAL_STEP_SIZE3 + 0x0003)
   00FA E0                 2251 	movx	a,@dptr
   00FB 90s00r00           2252 	mov	dptr,#_txdcc_step_cnt
   00FE F0                 2253 	movx	@dptr,a
   00FF D0 04              2254 	pop	ar4
   0101 02s01r97           2255 	ljmp	00149$
   0104                    2256 00112$:
                           2257 ;	../../shared/src/dcc_cal.c:96: else if (LOAD_CAL_ON) {                         //not power-on. Speed-change, load result for current rate
   0104 90 60 08           2258 	mov	dptr,#_CAL_CTRL3_LANE
   0107 E0                 2259 	movx	a,@dptr
   0108 60 47              2260 	jz	00109$
                           2261 ;	../../shared/src/dcc_cal.c:98: dcc_cnt = lnx_cal_txdcc[PWR + cmx_TXDCC_CAL_CONT_CUR_LOAD_EN][tx_pll_rate];  
   010A C0 04              2262 	push	ar4
   010C 90 E6 32           2263 	mov	dptr,#(_CONTROL_CONFIG9 + 0x0002)
   010F E0                 2264 	movx	a,@dptr
   0110 23                 2265 	rl	a
   0111 54 01              2266 	anl	a,#0x01
   0113 25 E0              2267 	add	a,acc
   0115 24 DA              2268 	add	a,#_lnx_cal_txdcc
   0117 FC                 2269 	mov	r4,a
   0118 E4                 2270 	clr	a
   0119 34 65              2271 	addc	a,#(_lnx_cal_txdcc >> 8)
   011B FF                 2272 	mov	r7,a
   011C A2*00              2273 	mov	c,_tx_pll_rate
   011E E4                 2274 	clr	a
   011F 33                 2275 	rlc	a
   0120 2C                 2276 	add	a,r4
   0121 F5 82              2277 	mov	dpl,a
   0123 E4                 2278 	clr	a
   0124 3F                 2279 	addc	a,r7
   0125 F5 83              2280 	mov	dph,a
   0127 E0                 2281 	movx	a,@dptr
   0128 FA                 2282 	mov	r2,a
   0129 A8*00              2283 	mov	r0,_bp
   012B 08                 2284 	inc	r0
   012C A6 02              2285 	mov	@r0,ar2
                           2286 ;	../../shared/src/dcc_cal.c:99: txdcc_step_cnt = TXDCC_CAL_STEP_SIZE;             //when speed change, restore the fracition code to middle
   012E 90 E6 3F           2287 	mov	dptr,#(_CON_CAL_STEP_SIZE3 + 0x0003)
   0131 E0                 2288 	movx	a,@dptr
   0132 90s00r00           2289 	mov	dptr,#_txdcc_step_cnt
   0135 F0                 2290 	movx	@dptr,a
                           2291 ;	../../shared/src/dcc_cal.c:100: TXDCC_HG = lnx_cal_txdcc_hg[tx_pll_rate];      //load the HG setting. 
   0136 A2*00              2292 	mov	c,_tx_pll_rate
   0138 E4                 2293 	clr	a
   0139 33                 2294 	rlc	a
   013A 24 DE              2295 	add	a,#_lnx_cal_txdcc_hg
   013C F5 82              2296 	mov	dpl,a
   013E E4                 2297 	clr	a
   013F 34 65              2298 	addc	a,#(_lnx_cal_txdcc_hg >> 8)
   0141 F5 83              2299 	mov	dph,a
   0143 E0                 2300 	movx	a,@dptr
   0144 FA                 2301 	mov	r2,a
   0145 90 02 50           2302 	mov	dptr,#_UPHY14_TRX_ANAREG_TOP_148
   0148 13                 2303 	rrc	a
   0149 E0                 2304 	movx	a,@dptr
   014A 92 E7              2305 	mov	acc.7,c
   014C F0                 2306 	movx	@dptr,a
   014D D0 04              2307 	pop	ar4
   014F 80 46              2308 	sjmp	00149$
   0151                    2309 00109$:
                           2310 ;	../../shared/src/dcc_cal.c:102: else if (cmx_TXDCC_CAL_CONT_EN && TX_SPEED_DIV == 0) {  //not power-on. Continious mode, only performed when SPEED_DIV = 0
   0151 90 E6 0E           2311 	mov	dptr,#(_CONTROL_CONFIG2 + 0x0002)
   0154 E0                 2312 	movx	a,@dptr
   0155 30 E7 35           2313 	jnb	acc.7,00105$
   0158 90 02 58           2314 	mov	dptr,#_UPHY14_TRX_ANAREG_TOP_150
   015B E0                 2315 	movx	a,@dptr
   015C 54 07              2316 	anl	a,#0x07
   015E 70 2D              2317 	jnz	00105$
                           2318 ;	../../shared/src/dcc_cal.c:103: TXDCCCAL_EN = 1;
   0160 90 02 4C           2319 	mov	dptr,#_UPHY14_TRX_ANAREG_TOP_147
   0163 E0                 2320 	movx	a,@dptr
   0164 44 80              2321 	orl	a,#0x80
   0166 F0                 2322 	movx	@dptr,a
                           2323 ;	../../shared/src/dcc_cal.c:104: TRXDCCIN_SEL = 4;
   0167 90 00 44           2324 	mov	dptr,#_UPHY14_TRX_ANAREG_BOT_17
   016A E0                 2325 	movx	a,@dptr
   016B 54 1F              2326 	anl	a,#0x1f
   016D 44 80              2327 	orl	a,#0x80
   016F F0                 2328 	movx	@dptr,a
                           2329 ;	../../shared/src/dcc_cal.c:105: dcc_cnt = lnx_cal_txdcc[CONT][tx_pll_rate];    //always load cont result
   0170 A2*00              2330 	mov	c,_tx_pll_rate
   0172 E4                 2331 	clr	a
   0173 33                 2332 	rlc	a
   0174 24 DC              2333 	add	a,#(_lnx_cal_txdcc + 0x0002)
   0176 F5 82              2334 	mov	dpl,a
   0178 E4                 2335 	clr	a
   0179 34 65              2336 	addc	a,#((_lnx_cal_txdcc + 0x0002) >> 8)
   017B F5 83              2337 	mov	dph,a
   017D E0                 2338 	movx	a,@dptr
   017E FA                 2339 	mov	r2,a
   017F A8*00              2340 	mov	r0,_bp
   0181 08                 2341 	inc	r0
   0182 A6 02              2342 	mov	@r0,ar2
                           2343 ;	../../shared/src/dcc_cal.c:106: in_cont_mode = 1;                              //when continious mode, use fraction code
   0184 E5*00              2344 	mov	a,_bp
   0186 24 05              2345 	add	a,#0x05
   0188 F8                 2346 	mov	r0,a
   0189 76 01              2347 	mov	@r0,#0x01
   018B 80 0A              2348 	sjmp	00149$
   018D                    2349 00105$:
                           2350 ;	../../shared/src/dcc_cal.c:109: lnx_TXDCC_CAL_DONE_LANE = 1;
   018D 90 60 02           2351 	mov	dptr,#(_CAL_CTRL1_LANE + 0x0002)
   0190 E0                 2352 	movx	a,@dptr
   0191 44 01              2353 	orl	a,#0x01
   0193 F0                 2354 	movx	@dptr,a
                           2355 ;	../../shared/src/dcc_cal.c:110: return;
   0194 02s03rE1           2356 	ljmp	00156$
                           2357 ;	../../shared/src/dcc_cal.c:114: do {
   0197                    2358 00149$:
                           2359 ;	../../shared/src/dcc_cal.c:115: TXDCC_CNT = dcc_cnt;
   0197 A8*00              2360 	mov	r0,_bp
   0199 08                 2361 	inc	r0
   019A 86 02              2362 	mov	ar2,@r0
   019C 90 02 4C           2363 	mov	dptr,#_UPHY14_TRX_ANAREG_TOP_147
   019F EA                 2364 	mov	a,r2
   01A0 2A                 2365 	add	a,r2
   01A1 54 7E              2366 	anl	a,#0x7e
   01A3 F5 F0              2367 	mov	b,a
   01A5 E0                 2368 	movx	a,@dptr
   01A6 54 81              2369 	anl	a,#0x81
   01A8 45 F0              2370 	orl	a,b
   01AA F0                 2371 	movx	@dptr,a
                           2372 ;	../../shared/src/dcc_cal.c:116: txdcc_clk_toggle();
   01AB C0 04              2373 	push	ar4
   01AD C0 05              2374 	push	ar5
   01AF 78r00              2375 	mov	r0,#_txdcc_clk_toggle
   01B1 79s00              2376 	mov	r1,#(_txdcc_clk_toggle >> 8)
   01B3 7As00              2377 	mov	r2,#(_txdcc_clk_toggle >> 16)
   01B5 12s00r00           2378 	lcall	__sdcc_banked_call
   01B8 D0 05              2379 	pop	ar5
   01BA D0 04              2380 	pop	ar4
                           2381 ;	../../shared/src/dcc_cal.c:118: time_out_cnt ++;
   01BC 0D                 2382 	inc	r5
                           2383 ;	../../shared/src/dcc_cal.c:119: if( TXDCCCAL_EN == 0 ) break;                                       //either LOAD, or EXT_EN in power-on
   01BD 90 02 4C           2384 	mov	dptr,#_UPHY14_TRX_ANAREG_TOP_147
   01C0 E0                 2385 	movx	a,@dptr
   01C1 20 E7 03           2386 	jb	acc.7,00194$
   01C4 02s03r75           2387 	ljmp	00151$
   01C7                    2388 00194$:
                           2389 ;	../../shared/src/dcc_cal.c:120: if( lnx_CAL_DONE_LANE == 1 && time_out_cnt > 1) break;                   //continious mode, has ran 1 round
   01C7 90 60 03           2390 	mov	dptr,#(_CAL_CTRL1_LANE + 0x0003)
   01CA E0                 2391 	movx	a,@dptr
   01CB 54 01              2392 	anl	a,#0x01
   01CD FA                 2393 	mov	r2,a
   01CE BA 01 0A           2394 	cjne	r2,#0x01,00117$
   01D1 74 01              2395 	mov	a,#0x01
   01D3 B5 05 00           2396 	cjne	a,ar5,00197$
   01D6                    2397 00197$:
   01D6 50 03              2398 	jnc	00198$
   01D8 02s03r75           2399 	ljmp	00151$
   01DB                    2400 00198$:
   01DB                    2401 00117$:
                           2402 ;	../../shared/src/dcc_cal.c:121: if( lnx_CAL_DONE_LANE == 0 && is_toggle_pat( dir, time_out_cnt - 1 ))  { lnx_TXDCC_CAL_PASS_LANE = 1;  break; }     //power-on, toggled
   01DB 90 60 03           2403 	mov	dptr,#(_CAL_CTRL1_LANE + 0x0003)
   01DE E0                 2404 	movx	a,@dptr
   01DF 20 E0 2D           2405 	jb	acc.0,00120$
   01E2 ED                 2406 	mov	a,r5
   01E3 14                 2407 	dec	a
   01E4 FA                 2408 	mov	r2,a
   01E5 C0 04              2409 	push	ar4
   01E7 C0 05              2410 	push	ar5
   01E9 C0 02              2411 	push	ar2
   01EB E5*00              2412 	mov	a,_bp
   01ED 24 04              2413 	add	a,#0x04
   01EF F8                 2414 	mov	r0,a
   01F0 86 82              2415 	mov	dpl,@r0
   01F2 78r00              2416 	mov	r0,#_is_toggle_pat
   01F4 79s00              2417 	mov	r1,#(_is_toggle_pat >> 8)
   01F6 7As00              2418 	mov	r2,#(_is_toggle_pat >> 16)
   01F8 12s00r00           2419 	lcall	__sdcc_banked_call
   01FB 15 81              2420 	dec	sp
   01FD D0 05              2421 	pop	ar5
   01FF D0 04              2422 	pop	ar4
   0201 92*00              2423 	mov	b0,c
   0203 50 0A              2424 	jnc	00120$
   0205 90 60 06           2425 	mov	dptr,#(_CAL_CTRL2_LANE + 0x0002)
   0208 E0                 2426 	movx	a,@dptr
   0209 44 10              2427 	orl	a,#0x10
   020B F0                 2428 	movx	@dptr,a
   020C 02s03r75           2429 	ljmp	00151$
   020F                    2430 00120$:
                           2431 ;	../../shared/src/dcc_cal.c:122: if( lnx_CAL_DONE_LANE == 0 && time_out_cnt >= TXDCC_LOOP_MAX && cmx_TXDCC_CAL_TIMEOUT_DIS == 0) break;     //power-on, reached maximum rounds
   020F 90 60 03           2432 	mov	dptr,#(_CAL_CTRL1_LANE + 0x0003)
   0212 E0                 2433 	movx	a,@dptr
   0213 20 E0 0F           2434 	jb	acc.0,00123$
   0216 BD 40 00           2435 	cjne	r5,#0x40,00202$
   0219                    2436 00202$:
   0219 40 0A              2437 	jc	00123$
   021B 90 E6 48           2438 	mov	dptr,#_CAL_TIME_OUT_AND_DIS
   021E E0                 2439 	movx	a,@dptr
   021F 20 E4 03           2440 	jb	acc.4,00204$
   0222 02s03r75           2441 	ljmp	00151$
   0225                    2442 00204$:
   0225                    2443 00123$:
                           2444 ;	../../shared/src/dcc_cal.c:124: latched_TXDCC_DN = TXDCC_DN;
   0225 90 20 40           2445 	mov	dptr,#_TX_CALIBRATION_LANE
   0228 E0                 2446 	movx	a,@dptr
   0229 54 01              2447 	anl	a,#0x01
   022B FA                 2448 	mov	r2,a
                           2449 ;	../../shared/src/dcc_cal.c:125: int_up = 0;
   022C E5*00              2450 	mov	a,_bp
   022E 24 03              2451 	add	a,#0x03
   0230 F8                 2452 	mov	r0,a
   0231 76 00              2453 	mov	@r0,#0x00
                           2454 ;	../../shared/src/dcc_cal.c:126: int_dn = 0; 
   0233 A8*00              2455 	mov	r0,_bp
   0235 08                 2456 	inc	r0
   0236 08                 2457 	inc	r0
   0237 76 00              2458 	mov	@r0,#0x00
                           2459 ;	../../shared/src/dcc_cal.c:128: if (in_cont_mode) { //continious calibration
   0239 E5*00              2460 	mov	a,_bp
   023B 24 05              2461 	add	a,#0x05
   023D F8                 2462 	mov	r0,a
   023E E6                 2463 	mov	a,@r0
   023F 60 72              2464 	jz	00138$
                           2465 ;	../../shared/src/dcc_cal.c:129: if (latched_TXDCC_DN) {txdcc_step_cnt--;}
   0241 EA                 2466 	mov	a,r2
   0242 60 0B              2467 	jz	00127$
   0244 90s00r00           2468 	mov	dptr,#_txdcc_step_cnt
   0247 E0                 2469 	movx	a,@dptr
   0248 14                 2470 	dec	a
   0249 90s00r00           2471 	mov	dptr,#_txdcc_step_cnt
   024C F0                 2472 	movx	@dptr,a
   024D 80 07              2473 	sjmp	00128$
   024F                    2474 00127$:
                           2475 ;	../../shared/src/dcc_cal.c:130: else                  {txdcc_step_cnt++;}
   024F 90s00r00           2476 	mov	dptr,#_txdcc_step_cnt
   0252 E0                 2477 	movx	a,@dptr
   0253 24 01              2478 	add	a,#0x01
   0255 F0                 2479 	movx	@dptr,a
   0256                    2480 00128$:
                           2481 ;	../../shared/src/dcc_cal.c:132: if( txdcc_step_cnt == 0) {
   0256 90s00r00           2482 	mov	dptr,#_txdcc_step_cnt
   0259 E0                 2483 	movx	a,@dptr
   025A FA                 2484 	mov	r2,a
   025B 70 1B              2485 	jnz	00132$
                           2486 ;	../../shared/src/dcc_cal.c:133: int_up = 0;
   025D C0 04              2487 	push	ar4
   025F E5*00              2488 	mov	a,_bp
   0261 24 03              2489 	add	a,#0x03
   0263 F8                 2490 	mov	r0,a
   0264 76 00              2491 	mov	@r0,#0x00
                           2492 ;	../../shared/src/dcc_cal.c:134: int_dn = 1; 
   0266 A8*00              2493 	mov	r0,_bp
   0268 08                 2494 	inc	r0
   0269 08                 2495 	inc	r0
   026A 76 01              2496 	mov	@r0,#0x01
                           2497 ;	../../shared/src/dcc_cal.c:135: txdcc_step_cnt = TXDCC_CAL_STEP_SIZE;  //after up/dn triggered, reset fraction code to middle
   026C 90 E6 3F           2498 	mov	dptr,#(_CON_CAL_STEP_SIZE3 + 0x0003)
   026F E0                 2499 	movx	a,@dptr
   0270 90s00r00           2500 	mov	dptr,#_txdcc_step_cnt
   0273 F0                 2501 	movx	@dptr,a
   0274 D0 04              2502 	pop	ar4
   0276 80 5A              2503 	sjmp	00139$
   0278                    2504 00132$:
                           2505 ;	../../shared/src/dcc_cal.c:137: else if(txdcc_step_cnt>=(TXDCC_CAL_STEP_SIZE<<1)) {
   0278 C0 04              2506 	push	ar4
   027A 90 E6 3F           2507 	mov	dptr,#(_CON_CAL_STEP_SIZE3 + 0x0003)
   027D E0                 2508 	movx	a,@dptr
   027E FC                 2509 	mov	r4,a
   027F E4                 2510 	clr	a
   0280 CC                 2511 	xch	a,r4
   0281 25 E0              2512 	add	a,acc
   0283 CC                 2513 	xch	a,r4
   0284 33                 2514 	rlc	a
   0285 FF                 2515 	mov	r7,a
   0286 8A 03              2516 	mov	ar3,r2
   0288 7E 00              2517 	mov	r6,#0x00
   028A C3                 2518 	clr	c
   028B EB                 2519 	mov	a,r3
   028C 9C                 2520 	subb	a,r4
   028D EE                 2521 	mov	a,r6
   028E 64 80              2522 	xrl	a,#0x80
   0290 8F F0              2523 	mov	b,r7
   0292 63 F0 80           2524 	xrl	b,#0x80
   0295 95 F0              2525 	subb	a,b
   0297 D0 04              2526 	pop	ar4
   0299 40 37              2527 	jc	00139$
                           2528 ;	../../shared/src/dcc_cal.c:138: int_up = 1;
   029B E5*00              2529 	mov	a,_bp
   029D 24 03              2530 	add	a,#0x03
   029F F8                 2531 	mov	r0,a
   02A0 76 01              2532 	mov	@r0,#0x01
                           2533 ;	../../shared/src/dcc_cal.c:139: int_dn = 0; 
   02A2 A8*00              2534 	mov	r0,_bp
   02A4 08                 2535 	inc	r0
   02A5 08                 2536 	inc	r0
   02A6 76 00              2537 	mov	@r0,#0x00
                           2538 ;	../../shared/src/dcc_cal.c:140: txdcc_step_cnt = TXDCC_CAL_STEP_SIZE;  //after up/dn triggered, reset fraction code to middle
   02A8 90 E6 3F           2539 	mov	dptr,#(_CON_CAL_STEP_SIZE3 + 0x0003)
   02AB E0                 2540 	movx	a,@dptr
   02AC FB                 2541 	mov	r3,a
   02AD 90s00r00           2542 	mov	dptr,#_txdcc_step_cnt
   02B0 F0                 2543 	movx	@dptr,a
   02B1 80 1F              2544 	sjmp	00139$
   02B3                    2545 00138$:
                           2546 ;	../../shared/src/dcc_cal.c:144: if (latched_TXDCC_DN) {int_up = 0; int_dn = 1;}
   02B3 EA                 2547 	mov	a,r2
   02B4 60 0F              2548 	jz	00135$
   02B6 E5*00              2549 	mov	a,_bp
   02B8 24 03              2550 	add	a,#0x03
   02BA F8                 2551 	mov	r0,a
   02BB 76 00              2552 	mov	@r0,#0x00
   02BD A8*00              2553 	mov	r0,_bp
   02BF 08                 2554 	inc	r0
   02C0 08                 2555 	inc	r0
   02C1 76 01              2556 	mov	@r0,#0x01
   02C3 80 0D              2557 	sjmp	00139$
   02C5                    2558 00135$:
                           2559 ;	../../shared/src/dcc_cal.c:145: else                  {int_up = 1; int_dn = 0;}
   02C5 E5*00              2560 	mov	a,_bp
   02C7 24 03              2561 	add	a,#0x03
   02C9 F8                 2562 	mov	r0,a
   02CA 76 01              2563 	mov	@r0,#0x01
   02CC A8*00              2564 	mov	r0,_bp
   02CE 08                 2565 	inc	r0
   02CF 08                 2566 	inc	r0
   02D0 76 00              2567 	mov	@r0,#0x00
   02D2                    2568 00139$:
                           2569 ;	../../shared/src/dcc_cal.c:148: if (int_dn == 1) {
   02D2 A8*00              2570 	mov	r0,_bp
   02D4 08                 2571 	inc	r0
   02D5 08                 2572 	inc	r0
   02D6 B6 01 1F           2573 	cjne	@r0,#0x01,00143$
                           2574 ;	../../shared/src/dcc_cal.c:149: dcc_cnt = sign_abs_dn(dcc_cnt);
   02D9 A8*00              2575 	mov	r0,_bp
   02DB 08                 2576 	inc	r0
   02DC 86 82              2577 	mov	dpl,@r0
   02DE C0 04              2578 	push	ar4
   02E0 C0 05              2579 	push	ar5
   02E2 78r00              2580 	mov	r0,#_sign_abs_dn
   02E4 79s00              2581 	mov	r1,#(_sign_abs_dn >> 8)
   02E6 7As00              2582 	mov	r2,#(_sign_abs_dn >> 16)
   02E8 12s00r00           2583 	lcall	__sdcc_banked_call
   02EB AA 82              2584 	mov	r2,dpl
   02ED D0 05              2585 	pop	ar5
   02EF D0 04              2586 	pop	ar4
   02F1 A8*00              2587 	mov	r0,_bp
   02F3 08                 2588 	inc	r0
   02F4 A6 02              2589 	mov	@r0,ar2
   02F6 80 2E              2590 	sjmp	00144$
   02F8                    2591 00143$:
                           2592 ;	../../shared/src/dcc_cal.c:151: else if (int_up == 1) {
   02F8 E5*00              2593 	mov	a,_bp
   02FA 24 03              2594 	add	a,#0x03
   02FC F8                 2595 	mov	r0,a
   02FD B6 01 26           2596 	cjne	@r0,#0x01,00144$
                           2597 ;	../../shared/src/dcc_cal.c:152: dir |= 1;
   0300 E5*00              2598 	mov	a,_bp
   0302 24 04              2599 	add	a,#0x04
   0304 F8                 2600 	mov	r0,a
   0305 E6                 2601 	mov	a,@r0
   0306 44 01              2602 	orl	a,#0x01
   0308 F6                 2603 	mov	@r0,a
                           2604 ;	../../shared/src/dcc_cal.c:153: dcc_cnt = sign_abs_up(dcc_cnt);      
   0309 A8*00              2605 	mov	r0,_bp
   030B 08                 2606 	inc	r0
   030C 86 82              2607 	mov	dpl,@r0
   030E C0 04              2608 	push	ar4
   0310 C0 05              2609 	push	ar5
   0312 78r00              2610 	mov	r0,#_sign_abs_up
   0314 79s00              2611 	mov	r1,#(_sign_abs_up >> 8)
   0316 7As00              2612 	mov	r2,#(_sign_abs_up >> 16)
   0318 12s00r00           2613 	lcall	__sdcc_banked_call
   031B AA 82              2614 	mov	r2,dpl
   031D D0 05              2615 	pop	ar5
   031F D0 04              2616 	pop	ar4
   0321 A8*00              2617 	mov	r0,_bp
   0323 08                 2618 	inc	r0
   0324 A6 02              2619 	mov	@r0,ar2
   0326                    2620 00144$:
                           2621 ;	../../shared/src/dcc_cal.c:155: dir<<=1;
   0326 E5*00              2622 	mov	a,_bp
   0328 24 04              2623 	add	a,#0x04
   032A F8                 2624 	mov	r0,a
   032B E6                 2625 	mov	a,@r0
   032C 25 E0              2626 	add	a,acc
   032E F6                 2627 	mov	@r0,a
                           2628 ;	../../shared/src/dcc_cal.c:156: dir = dir & 0x3f;
   032F E5*00              2629 	mov	a,_bp
   0331 24 04              2630 	add	a,#0x04
   0333 F8                 2631 	mov	r0,a
   0334 E6                 2632 	mov	a,@r0
   0335 54 3F              2633 	anl	a,#0x3F
   0337 F6                 2634 	mov	@r0,a
                           2635 ;	../../shared/src/dcc_cal.c:160: if (in_power_on && ((dcc_cnt & 0x1f) == 24) && (hg_set == 0)){
   0338 E5*00              2636 	mov	a,_bp
   033A 24 06              2637 	add	a,#0x06
   033C F8                 2638 	mov	r0,a
   033D E6                 2639 	mov	a,@r0
   033E 70 03              2640 	jnz	00214$
   0340 02s01r97           2641 	ljmp	00149$
   0343                    2642 00214$:
   0343 A8*00              2643 	mov	r0,_bp
   0345 08                 2644 	inc	r0
   0346 74 1F              2645 	mov	a,#0x1F
   0348 56                 2646 	anl	a,@r0
   0349 FA                 2647 	mov	r2,a
   034A BA 18 02           2648 	cjne	r2,#0x18,00215$
   034D 80 03              2649 	sjmp	00216$
   034F                    2650 00215$:
   034F 02s01r97           2651 	ljmp	00149$
   0352                    2652 00216$:
   0352 E5*00              2653 	mov	a,_bp
   0354 24 07              2654 	add	a,#0x07
   0356 F8                 2655 	mov	r0,a
   0357 E6                 2656 	mov	a,@r0
   0358 60 03              2657 	jz	00217$
   035A 02s01r97           2658 	ljmp	00149$
   035D                    2659 00217$:
                           2660 ;	../../shared/src/dcc_cal.c:161: reg_TXDCC_HG_LANE = 1;
   035D 90 02 50           2661 	mov	dptr,#_UPHY14_TRX_ANAREG_TOP_148
   0360 E0                 2662 	movx	a,@dptr
   0361 44 80              2663 	orl	a,#0x80
   0363 F0                 2664 	movx	@dptr,a
                           2665 ;	../../shared/src/dcc_cal.c:162: hg_set = 1;
   0364 E5*00              2666 	mov	a,_bp
   0366 24 07              2667 	add	a,#0x07
   0368 F8                 2668 	mov	r0,a
   0369 76 01              2669 	mov	@r0,#0x01
                           2670 ;	../../shared/src/dcc_cal.c:163: dcc_cnt = 0x20;
   036B A8*00              2671 	mov	r0,_bp
   036D 08                 2672 	inc	r0
   036E 76 20              2673 	mov	@r0,#0x20
                           2674 ;	../../shared/src/dcc_cal.c:164: time_out_cnt = 0;
   0370 7D 00              2675 	mov	r5,#0x00
                           2676 ;	../../shared/src/dcc_cal.c:167: } while (1); 
   0372 02s01r97           2677 	ljmp	00149$
   0375                    2678 00151$:
                           2679 ;	../../shared/src/dcc_cal.c:170: if (in_power_on == 1)
   0375 E5*00              2680 	mov	a,_bp
   0377 24 06              2681 	add	a,#0x06
   0379 F8                 2682 	mov	r0,a
   037A B6 01 0E           2683 	cjne	@r0,#0x01,00153$
                           2684 ;	../../shared/src/dcc_cal.c:171: TX_SPEED_DIV = saved_speed_div;
   037D 90 02 58           2685 	mov	dptr,#_UPHY14_TRX_ANAREG_TOP_150
   0380 EC                 2686 	mov	a,r4
   0381 54 07              2687 	anl	a,#0x07
   0383 F5 F0              2688 	mov	b,a
   0385 E0                 2689 	movx	a,@dptr
   0386 54 F8              2690 	anl	a,#0xf8
   0388 45 F0              2691 	orl	a,b
   038A F0                 2692 	movx	@dptr,a
   038B                    2693 00153$:
                           2694 ;	../../shared/src/dcc_cal.c:175: if (lnx_CAL_DONE_LANE == 0) {                        //if power-on calibration (including ext_en)
   038B 90 60 03           2695 	mov	dptr,#(_CAL_CTRL1_LANE + 0x0003)
   038E E0                 2696 	movx	a,@dptr
   038F 20 E0 2E           2697 	jb	acc.0,00155$
                           2698 ;	../../shared/src/dcc_cal.c:176: lnx_cal_txdcc[PWR][tx_pll_rate] = dcc_cnt;      //save to power-on result
   0392 A2*00              2699 	mov	c,_tx_pll_rate
   0394 E4                 2700 	clr	a
   0395 33                 2701 	rlc	a
   0396 24 DA              2702 	add	a,#_lnx_cal_txdcc
   0398 F5 82              2703 	mov	dpl,a
   039A E4                 2704 	clr	a
   039B 34 65              2705 	addc	a,#(_lnx_cal_txdcc >> 8)
   039D F5 83              2706 	mov	dph,a
   039F A8*00              2707 	mov	r0,_bp
   03A1 08                 2708 	inc	r0
   03A2 E6                 2709 	mov	a,@r0
   03A3 F0                 2710 	movx	@dptr,a
                           2711 ;	../../shared/src/dcc_cal.c:177: lnx_cal_txdcc_hg[tx_pll_rate] = (reg_TXDCC_HG_LANE & 0x01) | 0x00;       //save the HG setting for current rate, will be loaded by continious mode
   03A4 A2*00              2712 	mov	c,_tx_pll_rate
   03A6 E4                 2713 	clr	a
   03A7 33                 2714 	rlc	a
   03A8 24 DE              2715 	add	a,#_lnx_cal_txdcc_hg
   03AA FA                 2716 	mov	r2,a
   03AB E4                 2717 	clr	a
   03AC 34 65              2718 	addc	a,#(_lnx_cal_txdcc_hg >> 8)
   03AE FB                 2719 	mov	r3,a
   03AF 90 02 50           2720 	mov	dptr,#_UPHY14_TRX_ANAREG_TOP_148
   03B2 E0                 2721 	movx	a,@dptr
   03B3 23                 2722 	rl	a
   03B4 54 01              2723 	anl	a,#0x01
   03B6 FC                 2724 	mov	r4,a
   03B7 53 04 01           2725 	anl	ar4,#0x01
   03BA 8A 82              2726 	mov	dpl,r2
   03BC 8B 83              2727 	mov	dph,r3
   03BE EC                 2728 	mov	a,r4
   03BF F0                 2729 	movx	@dptr,a
   03C0                    2730 00155$:
                           2731 ;	../../shared/src/dcc_cal.c:179: lnx_cal_txdcc[CONT][tx_pll_rate] = dcc_cnt;     //no matter power-on or LOAD or continious, need to save to [CONT]
   03C0 A2*00              2732 	mov	c,_tx_pll_rate
   03C2 E4                 2733 	clr	a
   03C3 33                 2734 	rlc	a
   03C4 FA                 2735 	mov	r2,a
   03C5 24 DC              2736 	add	a,#(_lnx_cal_txdcc + 0x0002)
   03C7 F5 82              2737 	mov	dpl,a
   03C9 E4                 2738 	clr	a
   03CA 34 65              2739 	addc	a,#((_lnx_cal_txdcc + 0x0002) >> 8)
   03CC F5 83              2740 	mov	dph,a
   03CE A8*00              2741 	mov	r0,_bp
   03D0 08                 2742 	inc	r0
   03D1 E6                 2743 	mov	a,@r0
   03D2 F0                 2744 	movx	@dptr,a
                           2745 ;	../../shared/src/dcc_cal.c:181: TXDCCCAL_EN = 0;
   03D3 90 02 4C           2746 	mov	dptr,#_UPHY14_TRX_ANAREG_TOP_147
   03D6 E0                 2747 	movx	a,@dptr
   03D7 54 7F              2748 	anl	a,#0x7f
   03D9 F0                 2749 	movx	@dptr,a
                           2750 ;	../../shared/src/dcc_cal.c:182: lnx_TXDCC_CAL_DONE_LANE = 1;
   03DA 90 60 02           2751 	mov	dptr,#(_CAL_CTRL1_LANE + 0x0002)
   03DD E0                 2752 	movx	a,@dptr
   03DE 44 01              2753 	orl	a,#0x01
   03E0 F0                 2754 	movx	@dptr,a
   03E1                    2755 00156$:
   03E1 85*00 81           2756 	mov	sp,_bp
   03E4 D0*00              2757 	pop	_bp
   03E6 02s00r00           2758 	ljmp	__sdcc_banked_ret
                           2759 ;------------------------------------------------------------
                           2760 ;Allocation info for local variables in function 'txdcc_pdiv_cal'
                           2761 ;------------------------------------------------------------
                           2762 ;dcc_cnt                   Allocated to registers r6 
                           2763 ;latched_TXDCC_DN          Allocated to registers r7 
                           2764 ;int_dn                    Allocated to stack - offset 1
                           2765 ;int_up                    Allocated to stack - offset 2
                           2766 ;dir                       Allocated to stack - offset 3
                           2767 ;time_out_cnt              Allocated to stack - offset 4
                           2768 ;in_cont_mode              Allocated to stack - offset 5
                           2769 ;in_power_on               Allocated to stack - offset 6
                           2770 ;ext_en                    Allocated to registers r6 
                           2771 ;saved_speed_div           Allocated to registers r4 
                           2772 ;sloc0                     Allocated to stack - offset 11
                           2773 ;------------------------------------------------------------
                           2774 ;	../../shared/src/dcc_cal.c:189: void txdcc_pdiv_cal(void) BANKING_CTRL {
                           2775 ;	-----------------------------------------
                           2776 ;	 function txdcc_pdiv_cal
                           2777 ;	-----------------------------------------
   03E9                    2778 _txdcc_pdiv_cal:
   03E9 C0*00              2779 	push	_bp
   03EB E5 81              2780 	mov	a,sp
   03ED F5*00              2781 	mov	_bp,a
   03EF 24 06              2782 	add	a,#0x06
   03F1 F5 81              2783 	mov	sp,a
                           2784 ;	../../shared/src/dcc_cal.c:201: PHY_STATUS = ST_TXDCC_PDIV_CAL;    //xbi
   03F3 90 22 30           2785 	mov	dptr,#_MCU_STATUS0_LANE
   03F6 74 39              2786 	mov	a,#0x39
   03F8 F0                 2787 	movx	@dptr,a
                           2788 ;	../../shared/src/dcc_cal.c:203: lnx_TXDCC_PDIV_CAL_DONE_LANE = 0; 
   03F9 90 60 02           2789 	mov	dptr,#(_CAL_CTRL1_LANE + 0x0002)
   03FC E0                 2790 	movx	a,@dptr
   03FD 54 FD              2791 	anl	a,#0xfd
   03FF F0                 2792 	movx	@dptr,a
                           2793 ;	../../shared/src/dcc_cal.c:206: if (TX_SPEED_DIV == 0) {
   0400 90 02 58           2794 	mov	dptr,#_UPHY14_TRX_ANAREG_TOP_150
   0403 E0                 2795 	movx	a,@dptr
   0404 54 07              2796 	anl	a,#0x07
   0406 70 0A              2797 	jnz	00102$
                           2798 ;	../../shared/src/dcc_cal.c:207: lnx_TXDCC_PDIV_CAL_DONE_LANE = 1;
   0408 90 60 02           2799 	mov	dptr,#(_CAL_CTRL1_LANE + 0x0002)
   040B E0                 2800 	movx	a,@dptr
   040C 44 02              2801 	orl	a,#0x02
   040E F0                 2802 	movx	@dptr,a
                           2803 ;	../../shared/src/dcc_cal.c:208: return;
   040F 02s06rEA           2804 	ljmp	00159$
   0412                    2805 00102$:
                           2806 ;	../../shared/src/dcc_cal.c:211: in_cont_mode = 0;
   0412 E5*00              2807 	mov	a,_bp
   0414 24 05              2808 	add	a,#0x05
   0416 F8                 2809 	mov	r0,a
   0417 76 00              2810 	mov	@r0,#0x00
                           2811 ;	../../shared/src/dcc_cal.c:212: in_power_on = 0;
   0419 E5*00              2812 	mov	a,_bp
   041B 24 06              2813 	add	a,#0x06
   041D F8                 2814 	mov	r0,a
                           2815 ;	../../shared/src/dcc_cal.c:213: saved_speed_div = 0;
                           2816 ;	../../shared/src/dcc_cal.c:215: dir = 0;  
   041E E4                 2817 	clr	a
   041F F6                 2818 	mov	@r0,a
   0420 FC                 2819 	mov	r4,a
   0421 E5*00              2820 	mov	a,_bp
   0423 24 03              2821 	add	a,#0x03
   0425 F8                 2822 	mov	r0,a
   0426 76 00              2823 	mov	@r0,#0x00
                           2824 ;	../../shared/src/dcc_cal.c:218: if (lnx_CAL_DONE_LANE == 0) {     //power-on calibration, only performed when speed_div != 0
   0428 90 60 03           2825 	mov	dptr,#(_CAL_CTRL1_LANE + 0x0003)
   042B E0                 2826 	movx	a,@dptr
   042C 20 E0 72           2827 	jb	acc.0,00113$
                           2828 ;	../../shared/src/dcc_cal.c:219: ext_en = cmx_EXT_FORCE_CAL_DONE || cmx_TXDCC_PDIV_CAL_EXT_EN;
   042F 90 E6 06           2829 	mov	dptr,#(_CONTROL_CONFIG0 + 0x0002)
   0432 E0                 2830 	movx	a,@dptr
   0433 20 E1 0B           2831 	jb	acc.1,00162$
   0436 90 E6 0B           2832 	mov	dptr,#(_CONTROL_CONFIG1 + 0x0003)
   0439 E0                 2833 	movx	a,@dptr
   043A 20 E0 04           2834 	jb	acc.0,00162$
   043D 7E 00              2835 	mov	r6,#0x00
   043F 80 02              2836 	sjmp	00163$
   0441                    2837 00162$:
   0441 7E 01              2838 	mov	r6,#0x01
   0443                    2839 00163$:
                           2840 ;	../../shared/src/dcc_cal.c:220: if (ext_en)                                     //use ext value for power-on (stored into PWR), bypass calibration
   0443 EE                 2841 	mov	a,r6
   0444 60 11              2842 	jz	00104$
                           2843 ;	../../shared/src/dcc_cal.c:221: dcc_cnt = lnx_cal_txdcc_pdiv[PWR][tx_pll_rate];
   0446 A2*00              2844 	mov	c,_tx_pll_rate
   0448 E4                 2845 	clr	a
   0449 33                 2846 	rlc	a
   044A 24 D4              2847 	add	a,#_lnx_cal_txdcc_pdiv
   044C F5 82              2848 	mov	dpl,a
   044E E4                 2849 	clr	a
   044F 34 65              2850 	addc	a,#(_lnx_cal_txdcc_pdiv >> 8)
   0451 F5 83              2851 	mov	dph,a
   0453 E0                 2852 	movx	a,@dptr
   0454 FE                 2853 	mov	r6,a
   0455 80 38              2854 	sjmp	00105$
   0457                    2855 00104$:
                           2856 ;	../../shared/src/dcc_cal.c:223: lnx_TXDCC_PDIV_CAL_PASS_LANE = 0; 
   0457 90 60 07           2857 	mov	dptr,#(_CAL_CTRL2_LANE + 0x0003)
   045A E0                 2858 	movx	a,@dptr
   045B 54 DF              2859 	anl	a,#0xdf
   045D F0                 2860 	movx	@dptr,a
                           2861 ;	../../shared/src/dcc_cal.c:224: TXDCCCAL_PDIV_EN = 1;
   045E 90 02 5C           2862 	mov	dptr,#_UPHY14_TRX_ANAREG_TOP_151
   0461 E0                 2863 	movx	a,@dptr
   0462 44 02              2864 	orl	a,#0x02
   0464 F0                 2865 	movx	@dptr,a
                           2866 ;	../../shared/src/dcc_cal.c:225: TXDCCCAL_EN = 1;
   0465 90 02 4C           2867 	mov	dptr,#_UPHY14_TRX_ANAREG_TOP_147
   0468 E0                 2868 	movx	a,@dptr
   0469 44 80              2869 	orl	a,#0x80
   046B F0                 2870 	movx	@dptr,a
                           2871 ;	../../shared/src/dcc_cal.c:226: TRXDCCIN_SEL = 4;
   046C 90 00 44           2872 	mov	dptr,#_UPHY14_TRX_ANAREG_BOT_17
   046F E0                 2873 	movx	a,@dptr
   0470 54 1F              2874 	anl	a,#0x1f
   0472 44 80              2875 	orl	a,#0x80
   0474 F0                 2876 	movx	@dptr,a
                           2877 ;	../../shared/src/dcc_cal.c:227: saved_speed_div = TX_SPEED_DIV;               //PDIV clock DCC cal need to force SPEED_DIV to 1
   0475 90 02 58           2878 	mov	dptr,#_UPHY14_TRX_ANAREG_TOP_150
   0478 E0                 2879 	movx	a,@dptr
   0479 54 07              2880 	anl	a,#0x07
   047B FF                 2881 	mov	r7,a
   047C FC                 2882 	mov	r4,a
                           2883 ;	../../shared/src/dcc_cal.c:228: in_power_on = 1;
   047D E5*00              2884 	mov	a,_bp
   047F 24 06              2885 	add	a,#0x06
   0481 F8                 2886 	mov	r0,a
   0482 76 01              2887 	mov	@r0,#0x01
                           2888 ;	../../shared/src/dcc_cal.c:229: TX_SPEED_DIV = 1;                             //Before force SPEED_DIV to 1, save the original one 
   0484 90 02 58           2889 	mov	dptr,#_UPHY14_TRX_ANAREG_TOP_150
   0487 E0                 2890 	movx	a,@dptr
   0488 54 F8              2891 	anl	a,#0xf8
   048A 44 01              2892 	orl	a,#0x01
   048C F0                 2893 	movx	@dptr,a
                           2894 ;	../../shared/src/dcc_cal.c:230: dcc_cnt = 32;
   048D 7E 20              2895 	mov	r6,#0x20
   048F                    2896 00105$:
                           2897 ;	../../shared/src/dcc_cal.c:232: TXDCC_EN = 1;                                  //enable TXDCC_EN during power-on, never deassert
   048F 90 02 48           2898 	mov	dptr,#_UPHY14_TRX_ANAREG_TOP_146
   0492 E0                 2899 	movx	a,@dptr
   0493 44 01              2900 	orl	a,#0x01
   0495 F0                 2901 	movx	@dptr,a
                           2902 ;	../../shared/src/dcc_cal.c:233: txdcc_pdiv_step_cnt = TXDCC_PDIV_CAL_STEP_SIZE;         //during power-on (inc. EXT_EN), reset fraction code to middle
   0496 90 E6 3E           2903 	mov	dptr,#(_CON_CAL_STEP_SIZE3 + 0x0002)
   0499 E0                 2904 	movx	a,@dptr
   049A FF                 2905 	mov	r7,a
   049B 90s00r00           2906 	mov	dptr,#_txdcc_pdiv_step_cnt
   049E F0                 2907 	movx	@dptr,a
   049F 80 74              2908 	sjmp	00186$
   04A1                    2909 00113$:
                           2910 ;	../../shared/src/dcc_cal.c:235: else if (LOAD_CAL_ON) {                         //not power-on. Speed-change, load result for current rate
   04A1 90 60 08           2911 	mov	dptr,#_CAL_CTRL3_LANE
   04A4 E0                 2912 	movx	a,@dptr
   04A5 60 2D              2913 	jz	00110$
                           2914 ;	../../shared/src/dcc_cal.c:237: dcc_cnt = lnx_cal_txdcc_pdiv[PWR + cmx_TXDCC_PDIV_CAL_CONT_CUR_LOAD_EN][tx_pll_rate];  
   04A7 C0 04              2915 	push	ar4
   04A9 90 E6 32           2916 	mov	dptr,#(_CONTROL_CONFIG9 + 0x0002)
   04AC E0                 2917 	movx	a,@dptr
   04AD 23                 2918 	rl	a
   04AE 23                 2919 	rl	a
   04AF 54 01              2920 	anl	a,#0x01
   04B1 25 E0              2921 	add	a,acc
   04B3 24 D4              2922 	add	a,#_lnx_cal_txdcc_pdiv
   04B5 FF                 2923 	mov	r7,a
   04B6 E4                 2924 	clr	a
   04B7 34 65              2925 	addc	a,#(_lnx_cal_txdcc_pdiv >> 8)
   04B9 FC                 2926 	mov	r4,a
   04BA A2*00              2927 	mov	c,_tx_pll_rate
   04BC E4                 2928 	clr	a
   04BD 33                 2929 	rlc	a
   04BE 2F                 2930 	add	a,r7
   04BF F5 82              2931 	mov	dpl,a
   04C1 E4                 2932 	clr	a
   04C2 3C                 2933 	addc	a,r4
   04C3 F5 83              2934 	mov	dph,a
   04C5 E0                 2935 	movx	a,@dptr
   04C6 FE                 2936 	mov	r6,a
                           2937 ;	../../shared/src/dcc_cal.c:238: txdcc_pdiv_step_cnt = TXDCC_PDIV_CAL_STEP_SIZE;             //when speed change, restore the fracition code to middle
   04C7 90 E6 3E           2938 	mov	dptr,#(_CON_CAL_STEP_SIZE3 + 0x0002)
   04CA E0                 2939 	movx	a,@dptr
   04CB FB                 2940 	mov	r3,a
   04CC 90s00r00           2941 	mov	dptr,#_txdcc_pdiv_step_cnt
   04CF F0                 2942 	movx	@dptr,a
   04D0 D0 04              2943 	pop	ar4
   04D2 80 41              2944 	sjmp	00186$
   04D4                    2945 00110$:
                           2946 ;	../../shared/src/dcc_cal.c:240: else if (cmx_TXDCC_PDIV_CAL_CONT_EN) {               //not power-on. Continious mode.
   04D4 90 E6 0E           2947 	mov	dptr,#(_CONTROL_CONFIG2 + 0x0002)
   04D7 E0                 2948 	movx	a,@dptr
   04D8 30 E6 30           2949 	jnb	acc.6,00107$
                           2950 ;	../../shared/src/dcc_cal.c:241: TXDCCCAL_PDIV_EN = 1;
   04DB 90 02 5C           2951 	mov	dptr,#_UPHY14_TRX_ANAREG_TOP_151
   04DE E0                 2952 	movx	a,@dptr
   04DF 44 02              2953 	orl	a,#0x02
   04E1 F0                 2954 	movx	@dptr,a
                           2955 ;	../../shared/src/dcc_cal.c:242: TXDCCCAL_EN = 1;
   04E2 90 02 4C           2956 	mov	dptr,#_UPHY14_TRX_ANAREG_TOP_147
   04E5 E0                 2957 	movx	a,@dptr
   04E6 44 80              2958 	orl	a,#0x80
   04E8 F0                 2959 	movx	@dptr,a
                           2960 ;	../../shared/src/dcc_cal.c:243: TRXDCCIN_SEL = 4;
   04E9 90 00 44           2961 	mov	dptr,#_UPHY14_TRX_ANAREG_BOT_17
   04EC E0                 2962 	movx	a,@dptr
   04ED 54 1F              2963 	anl	a,#0x1f
   04EF 44 80              2964 	orl	a,#0x80
   04F1 F0                 2965 	movx	@dptr,a
                           2966 ;	../../shared/src/dcc_cal.c:244: dcc_cnt = lnx_cal_txdcc_pdiv[CONT][tx_pll_rate];    //always load cont result
   04F2 A2*00              2967 	mov	c,_tx_pll_rate
   04F4 E4                 2968 	clr	a
   04F5 33                 2969 	rlc	a
   04F6 24 D6              2970 	add	a,#(_lnx_cal_txdcc_pdiv + 0x0002)
   04F8 F5 82              2971 	mov	dpl,a
   04FA E4                 2972 	clr	a
   04FB 34 65              2973 	addc	a,#((_lnx_cal_txdcc_pdiv + 0x0002) >> 8)
   04FD F5 83              2974 	mov	dph,a
   04FF E0                 2975 	movx	a,@dptr
   0500 FB                 2976 	mov	r3,a
   0501 FE                 2977 	mov	r6,a
                           2978 ;	../../shared/src/dcc_cal.c:245: in_cont_mode = 1;                              //when continious mode, use fraction code
   0502 E5*00              2979 	mov	a,_bp
   0504 24 05              2980 	add	a,#0x05
   0506 F8                 2981 	mov	r0,a
   0507 76 01              2982 	mov	@r0,#0x01
   0509 80 0A              2983 	sjmp	00186$
   050B                    2984 00107$:
                           2985 ;	../../shared/src/dcc_cal.c:248: lnx_TXDCC_PDIV_CAL_DONE_LANE = 1;
   050B 90 60 02           2986 	mov	dptr,#(_CAL_CTRL1_LANE + 0x0002)
   050E E0                 2987 	movx	a,@dptr
   050F 44 02              2988 	orl	a,#0x02
   0511 F0                 2989 	movx	@dptr,a
                           2990 ;	../../shared/src/dcc_cal.c:249: return;
   0512 02s06rEA           2991 	ljmp	00159$
                           2992 ;	../../shared/src/dcc_cal.c:253: do {
   0515                    2993 00186$:
   0515 E5*00              2994 	mov	a,_bp
   0517 24 04              2995 	add	a,#0x04
   0519 F8                 2996 	mov	r0,a
   051A 76 00              2997 	mov	@r0,#0x00
   051C                    2998 00152$:
                           2999 ;	../../shared/src/dcc_cal.c:254: TXDCC_PDIV_CNT = dcc_cnt;
   051C 8E 07              3000 	mov	ar7,r6
   051E 90 02 5C           3001 	mov	dptr,#_UPHY14_TRX_ANAREG_TOP_151
   0521 EF                 3002 	mov	a,r7
   0522 2F                 3003 	add	a,r7
   0523 25 E0              3004 	add	a,acc
   0525 54 FC              3005 	anl	a,#0xfc
   0527 F5 F0              3006 	mov	b,a
   0529 E0                 3007 	movx	a,@dptr
   052A 54 03              3008 	anl	a,#0x03
   052C 45 F0              3009 	orl	a,b
   052E F0                 3010 	movx	@dptr,a
                           3011 ;	../../shared/src/dcc_cal.c:255: txdcc_clk_toggle();
   052F C0 04              3012 	push	ar4
   0531 C0 06              3013 	push	ar6
   0533 78r00              3014 	mov	r0,#_txdcc_clk_toggle
   0535 79s00              3015 	mov	r1,#(_txdcc_clk_toggle >> 8)
   0537 7As00              3016 	mov	r2,#(_txdcc_clk_toggle >> 16)
   0539 12s00r00           3017 	lcall	__sdcc_banked_call
   053C D0 06              3018 	pop	ar6
   053E D0 04              3019 	pop	ar4
                           3020 ;	../../shared/src/dcc_cal.c:257: time_out_cnt ++;
   0540 E5*00              3021 	mov	a,_bp
   0542 24 04              3022 	add	a,#0x04
   0544 F8                 3023 	mov	r0,a
   0545 06                 3024 	inc	@r0
                           3025 ;	../../shared/src/dcc_cal.c:258: if( TXDCCCAL_PDIV_EN == 0 ) break;                                       //either LOAD, or EXT_EN in power-on
   0546 90 02 5C           3026 	mov	dptr,#_UPHY14_TRX_ANAREG_TOP_151
   0549 E0                 3027 	movx	a,@dptr
   054A 20 E1 03           3028 	jb	acc.1,00196$
   054D 02s06r98           3029 	ljmp	00154$
   0550                    3030 00196$:
                           3031 ;	../../shared/src/dcc_cal.c:259: if( lnx_CAL_DONE_LANE == 1 && time_out_cnt > 1) break;                   //continious mode, has ran 1 round
   0550 90 60 03           3032 	mov	dptr,#(_CAL_CTRL1_LANE + 0x0003)
   0553 E0                 3033 	movx	a,@dptr
   0554 54 01              3034 	anl	a,#0x01
   0556 FF                 3035 	mov	r7,a
   0557 BF 01 0D           3036 	cjne	r7,#0x01,00118$
   055A E5*00              3037 	mov	a,_bp
   055C 24 04              3038 	add	a,#0x04
   055E F8                 3039 	mov	r0,a
   055F E6                 3040 	mov	a,@r0
   0560 24 FE              3041 	add	a,#0xff - 0x01
   0562 50 03              3042 	jnc	00199$
   0564 02s06r98           3043 	ljmp	00154$
   0567                    3044 00199$:
   0567                    3045 00118$:
                           3046 ;	../../shared/src/dcc_cal.c:260: if( lnx_CAL_DONE_LANE == 0 && is_toggle_pat( dir, time_out_cnt - 1 ))  { lnx_TXDCC_PDIV_CAL_PASS_LANE = 1;  break; }     //power-on, toggled
   0567 90 60 03           3047 	mov	dptr,#(_CAL_CTRL1_LANE + 0x0003)
   056A E0                 3048 	movx	a,@dptr
   056B 20 E0 32           3049 	jb	acc.0,00121$
   056E E5*00              3050 	mov	a,_bp
   0570 24 04              3051 	add	a,#0x04
   0572 F8                 3052 	mov	r0,a
   0573 E6                 3053 	mov	a,@r0
   0574 14                 3054 	dec	a
   0575 FF                 3055 	mov	r7,a
   0576 C0 04              3056 	push	ar4
   0578 C0 06              3057 	push	ar6
   057A C0 07              3058 	push	ar7
   057C E5*00              3059 	mov	a,_bp
   057E 24 03              3060 	add	a,#0x03
   0580 F8                 3061 	mov	r0,a
   0581 86 82              3062 	mov	dpl,@r0
   0583 78r00              3063 	mov	r0,#_is_toggle_pat
   0585 79s00              3064 	mov	r1,#(_is_toggle_pat >> 8)
   0587 7As00              3065 	mov	r2,#(_is_toggle_pat >> 16)
   0589 12s00r00           3066 	lcall	__sdcc_banked_call
   058C 15 81              3067 	dec	sp
   058E D0 06              3068 	pop	ar6
   0590 D0 04              3069 	pop	ar4
   0592 92*00              3070 	mov	b0,c
   0594 50 0A              3071 	jnc	00121$
   0596 90 60 07           3072 	mov	dptr,#(_CAL_CTRL2_LANE + 0x0003)
   0599 E0                 3073 	movx	a,@dptr
   059A 44 20              3074 	orl	a,#0x20
   059C F0                 3075 	movx	@dptr,a
   059D 02s06r98           3076 	ljmp	00154$
   05A0                    3077 00121$:
                           3078 ;	../../shared/src/dcc_cal.c:261: if( lnx_CAL_DONE_LANE == 0 && time_out_cnt >= TXDCC_PDIV_LOOP_MAX && cmx_TXDCC_PDIV_CAL_TIMEOUT_DIS == 0) break;     //power-on, reached maximum rounds
   05A0 90 60 03           3079 	mov	dptr,#(_CAL_CTRL1_LANE + 0x0003)
   05A3 E0                 3080 	movx	a,@dptr
   05A4 20 E0 14           3081 	jb	acc.0,00124$
   05A7 E5*00              3082 	mov	a,_bp
   05A9 24 04              3083 	add	a,#0x04
   05AB F8                 3084 	mov	r0,a
   05AC B6 40 00           3085 	cjne	@r0,#0x40,00203$
   05AF                    3086 00203$:
   05AF 40 0A              3087 	jc	00124$
   05B1 90 E6 48           3088 	mov	dptr,#_CAL_TIME_OUT_AND_DIS
   05B4 E0                 3089 	movx	a,@dptr
   05B5 20 E3 03           3090 	jb	acc.3,00205$
   05B8 02s06r98           3091 	ljmp	00154$
   05BB                    3092 00205$:
   05BB                    3093 00124$:
                           3094 ;	../../shared/src/dcc_cal.c:263: latched_TXDCC_DN = TXDCC_DN;
   05BB 90 20 40           3095 	mov	dptr,#_TX_CALIBRATION_LANE
   05BE E0                 3096 	movx	a,@dptr
   05BF 54 01              3097 	anl	a,#0x01
   05C1 FF                 3098 	mov	r7,a
                           3099 ;	../../shared/src/dcc_cal.c:264: int_up = 0;
   05C2 A8*00              3100 	mov	r0,_bp
   05C4 08                 3101 	inc	r0
   05C5 08                 3102 	inc	r0
   05C6 76 00              3103 	mov	@r0,#0x00
                           3104 ;	../../shared/src/dcc_cal.c:265: int_dn = 0; 
   05C8 A8*00              3105 	mov	r0,_bp
   05CA 08                 3106 	inc	r0
   05CB 76 00              3107 	mov	@r0,#0x00
                           3108 ;	../../shared/src/dcc_cal.c:267: if (in_cont_mode) { //continious calibration
   05CD E5*00              3109 	mov	a,_bp
   05CF 24 05              3110 	add	a,#0x05
   05D1 F8                 3111 	mov	r0,a
   05D2 E6                 3112 	mov	a,@r0
   05D3 60 6C              3113 	jz	00139$
                           3114 ;	../../shared/src/dcc_cal.c:268: if (latched_TXDCC_DN) {txdcc_pdiv_step_cnt--;}
   05D5 EF                 3115 	mov	a,r7
   05D6 60 0B              3116 	jz	00128$
   05D8 90s00r00           3117 	mov	dptr,#_txdcc_pdiv_step_cnt
   05DB E0                 3118 	movx	a,@dptr
   05DC 14                 3119 	dec	a
   05DD 90s00r00           3120 	mov	dptr,#_txdcc_pdiv_step_cnt
   05E0 F0                 3121 	movx	@dptr,a
   05E1 80 07              3122 	sjmp	00129$
   05E3                    3123 00128$:
                           3124 ;	../../shared/src/dcc_cal.c:269: else                  {txdcc_pdiv_step_cnt++;}
   05E3 90s00r00           3125 	mov	dptr,#_txdcc_pdiv_step_cnt
   05E6 E0                 3126 	movx	a,@dptr
   05E7 24 01              3127 	add	a,#0x01
   05E9 F0                 3128 	movx	@dptr,a
   05EA                    3129 00129$:
                           3130 ;	../../shared/src/dcc_cal.c:271: if( txdcc_pdiv_step_cnt == 0) {
   05EA 90s00r00           3131 	mov	dptr,#_txdcc_pdiv_step_cnt
   05ED E0                 3132 	movx	a,@dptr
   05EE FB                 3133 	mov	r3,a
   05EF 70 19              3134 	jnz	00133$
                           3135 ;	../../shared/src/dcc_cal.c:272: int_up = 0;
   05F1 C0 04              3136 	push	ar4
   05F3 A8*00              3137 	mov	r0,_bp
   05F5 08                 3138 	inc	r0
   05F6 08                 3139 	inc	r0
   05F7 76 00              3140 	mov	@r0,#0x00
                           3141 ;	../../shared/src/dcc_cal.c:273: int_dn = 1; 
   05F9 A8*00              3142 	mov	r0,_bp
   05FB 08                 3143 	inc	r0
   05FC 76 01              3144 	mov	@r0,#0x01
                           3145 ;	../../shared/src/dcc_cal.c:274: txdcc_pdiv_step_cnt = TXDCC_CAL_STEP_SIZE;  //after up/dn triggered, reset fraction code to middle
   05FE 90 E6 3F           3146 	mov	dptr,#(_CON_CAL_STEP_SIZE3 + 0x0003)
   0601 E0                 3147 	movx	a,@dptr
   0602 90s00r00           3148 	mov	dptr,#_txdcc_pdiv_step_cnt
   0605 F0                 3149 	movx	@dptr,a
   0606 D0 04              3150 	pop	ar4
   0608 80 52              3151 	sjmp	00140$
   060A                    3152 00133$:
                           3153 ;	../../shared/src/dcc_cal.c:276: else if(txdcc_pdiv_step_cnt>=(TXDCC_CAL_STEP_SIZE<<1)) {
   060A C0 04              3154 	push	ar4
   060C 90 E6 3F           3155 	mov	dptr,#(_CON_CAL_STEP_SIZE3 + 0x0003)
   060F E0                 3156 	movx	a,@dptr
   0610 FC                 3157 	mov	r4,a
   0611 E4                 3158 	clr	a
   0612 CC                 3159 	xch	a,r4
   0613 25 E0              3160 	add	a,acc
   0615 CC                 3161 	xch	a,r4
   0616 33                 3162 	rlc	a
   0617 FA                 3163 	mov	r2,a
   0618 7D 00              3164 	mov	r5,#0x00
   061A C3                 3165 	clr	c
   061B EB                 3166 	mov	a,r3
   061C 9C                 3167 	subb	a,r4
   061D ED                 3168 	mov	a,r5
   061E 64 80              3169 	xrl	a,#0x80
   0620 8A F0              3170 	mov	b,r2
   0622 63 F0 80           3171 	xrl	b,#0x80
   0625 95 F0              3172 	subb	a,b
   0627 D0 04              3173 	pop	ar4
   0629 40 31              3174 	jc	00140$
                           3175 ;	../../shared/src/dcc_cal.c:277: int_up = 1;
   062B A8*00              3176 	mov	r0,_bp
   062D 08                 3177 	inc	r0
   062E 08                 3178 	inc	r0
   062F 76 01              3179 	mov	@r0,#0x01
                           3180 ;	../../shared/src/dcc_cal.c:278: int_dn = 0; 
   0631 A8*00              3181 	mov	r0,_bp
   0633 08                 3182 	inc	r0
   0634 76 00              3183 	mov	@r0,#0x00
                           3184 ;	../../shared/src/dcc_cal.c:279: txdcc_pdiv_step_cnt = TXDCC_CAL_STEP_SIZE;  //after up/dn triggered, reset fraction code to middle
   0636 90 E6 3F           3185 	mov	dptr,#(_CON_CAL_STEP_SIZE3 + 0x0003)
   0639 E0                 3186 	movx	a,@dptr
   063A FA                 3187 	mov	r2,a
   063B 90s00r00           3188 	mov	dptr,#_txdcc_pdiv_step_cnt
   063E F0                 3189 	movx	@dptr,a
   063F 80 1B              3190 	sjmp	00140$
   0641                    3191 00139$:
                           3192 ;	../../shared/src/dcc_cal.c:283: if (latched_TXDCC_DN) {int_up = 0; int_dn = 1;}
   0641 EF                 3193 	mov	a,r7
   0642 60 0D              3194 	jz	00136$
   0644 A8*00              3195 	mov	r0,_bp
   0646 08                 3196 	inc	r0
   0647 08                 3197 	inc	r0
   0648 76 00              3198 	mov	@r0,#0x00
   064A A8*00              3199 	mov	r0,_bp
   064C 08                 3200 	inc	r0
   064D 76 01              3201 	mov	@r0,#0x01
   064F 80 0B              3202 	sjmp	00140$
   0651                    3203 00136$:
                           3204 ;	../../shared/src/dcc_cal.c:284: else                  {int_up = 1; int_dn = 0;}
   0651 A8*00              3205 	mov	r0,_bp
   0653 08                 3206 	inc	r0
   0654 08                 3207 	inc	r0
   0655 76 01              3208 	mov	@r0,#0x01
   0657 A8*00              3209 	mov	r0,_bp
   0659 08                 3210 	inc	r0
   065A 76 00              3211 	mov	@r0,#0x00
   065C                    3212 00140$:
                           3213 ;	../../shared/src/dcc_cal.c:287: if (int_dn == 1) {
   065C A8*00              3214 	mov	r0,_bp
   065E 08                 3215 	inc	r0
   065F B6 01 09           3216 	cjne	@r0,#0x01,00150$
                           3217 ;	../../shared/src/dcc_cal.c:288: if (dcc_cnt == 0) {dcc_cnt = 0;}
   0662 EE                 3218 	mov	a,r6
   0663 70 03              3219 	jnz	00142$
   0665 FE                 3220 	mov	r6,a
   0666 80 1B              3221 	sjmp	00151$
   0668                    3222 00142$:
                           3223 ;	../../shared/src/dcc_cal.c:289: else              {dcc_cnt--;}
   0668 1E                 3224 	dec	r6
   0669 80 18              3225 	sjmp	00151$
   066B                    3226 00150$:
                           3227 ;	../../shared/src/dcc_cal.c:291: else if (int_up == 1) {
   066B A8*00              3228 	mov	r0,_bp
   066D 08                 3229 	inc	r0
   066E 08                 3230 	inc	r0
   066F B6 01 11           3231 	cjne	@r0,#0x01,00151$
                           3232 ;	../../shared/src/dcc_cal.c:292: dir |= 1;
   0672 E5*00              3233 	mov	a,_bp
   0674 24 03              3234 	add	a,#0x03
   0676 F8                 3235 	mov	r0,a
   0677 E6                 3236 	mov	a,@r0
   0678 44 01              3237 	orl	a,#0x01
   067A F6                 3238 	mov	@r0,a
                           3239 ;	../../shared/src/dcc_cal.c:293: if (dcc_cnt == 63) {dcc_cnt = 63;}
   067B BE 3F 04           3240 	cjne	r6,#0x3F,00145$
   067E 7E 3F              3241 	mov	r6,#0x3F
   0680 80 01              3242 	sjmp	00151$
   0682                    3243 00145$:
                           3244 ;	../../shared/src/dcc_cal.c:294: else               {dcc_cnt++;}
   0682 0E                 3245 	inc	r6
   0683                    3246 00151$:
                           3247 ;	../../shared/src/dcc_cal.c:296: dir<<=1;
   0683 E5*00              3248 	mov	a,_bp
   0685 24 03              3249 	add	a,#0x03
   0687 F8                 3250 	mov	r0,a
   0688 E6                 3251 	mov	a,@r0
   0689 25 E0              3252 	add	a,acc
   068B F6                 3253 	mov	@r0,a
                           3254 ;	../../shared/src/dcc_cal.c:297: dir = dir & 0x3f;
   068C E5*00              3255 	mov	a,_bp
   068E 24 03              3256 	add	a,#0x03
   0690 F8                 3257 	mov	r0,a
   0691 E6                 3258 	mov	a,@r0
   0692 54 3F              3259 	anl	a,#0x3F
   0694 F6                 3260 	mov	@r0,a
                           3261 ;	../../shared/src/dcc_cal.c:299: } while (1); 
   0695 02s05r1C           3262 	ljmp	00152$
   0698                    3263 00154$:
                           3264 ;	../../shared/src/dcc_cal.c:302: if (in_power_on)
   0698 E5*00              3265 	mov	a,_bp
   069A 24 06              3266 	add	a,#0x06
   069C F8                 3267 	mov	r0,a
   069D E6                 3268 	mov	a,@r0
   069E 60 0E              3269 	jz	00156$
                           3270 ;	../../shared/src/dcc_cal.c:303: TX_SPEED_DIV = saved_speed_div;
   06A0 90 02 58           3271 	mov	dptr,#_UPHY14_TRX_ANAREG_TOP_150
   06A3 EC                 3272 	mov	a,r4
   06A4 54 07              3273 	anl	a,#0x07
   06A6 F5 F0              3274 	mov	b,a
   06A8 E0                 3275 	movx	a,@dptr
   06A9 54 F8              3276 	anl	a,#0xf8
   06AB 45 F0              3277 	orl	a,b
   06AD F0                 3278 	movx	@dptr,a
   06AE                    3279 00156$:
                           3280 ;	../../shared/src/dcc_cal.c:306: if (lnx_CAL_DONE_LANE == 0) {                        //if power-on calibration
   06AE 90 60 03           3281 	mov	dptr,#(_CAL_CTRL1_LANE + 0x0003)
   06B1 E0                 3282 	movx	a,@dptr
   06B2 20 E0 10           3283 	jb	acc.0,00158$
                           3284 ;	../../shared/src/dcc_cal.c:307: lnx_cal_txdcc_pdiv[PWR][tx_pll_rate] = dcc_cnt;      //save to power-on result
   06B5 A2*00              3285 	mov	c,_tx_pll_rate
   06B7 E4                 3286 	clr	a
   06B8 33                 3287 	rlc	a
   06B9 FA                 3288 	mov	r2,a
   06BA 24 D4              3289 	add	a,#_lnx_cal_txdcc_pdiv
   06BC F5 82              3290 	mov	dpl,a
   06BE E4                 3291 	clr	a
   06BF 34 65              3292 	addc	a,#(_lnx_cal_txdcc_pdiv >> 8)
   06C1 F5 83              3293 	mov	dph,a
   06C3 EE                 3294 	mov	a,r6
   06C4 F0                 3295 	movx	@dptr,a
   06C5                    3296 00158$:
                           3297 ;	../../shared/src/dcc_cal.c:309: lnx_cal_txdcc_pdiv[CONT][tx_pll_rate] = dcc_cnt;     //no matter power-on or LOAD or continious, need to save to [CONT]
   06C5 A2*00              3298 	mov	c,_tx_pll_rate
   06C7 E4                 3299 	clr	a
   06C8 33                 3300 	rlc	a
   06C9 FA                 3301 	mov	r2,a
   06CA 24 D6              3302 	add	a,#(_lnx_cal_txdcc_pdiv + 0x0002)
   06CC F5 82              3303 	mov	dpl,a
   06CE E4                 3304 	clr	a
   06CF 34 65              3305 	addc	a,#((_lnx_cal_txdcc_pdiv + 0x0002) >> 8)
   06D1 F5 83              3306 	mov	dph,a
   06D3 EE                 3307 	mov	a,r6
   06D4 F0                 3308 	movx	@dptr,a
                           3309 ;	../../shared/src/dcc_cal.c:311: TXDCCCAL_PDIV_EN = 0;
   06D5 90 02 5C           3310 	mov	dptr,#_UPHY14_TRX_ANAREG_TOP_151
   06D8 E0                 3311 	movx	a,@dptr
   06D9 54 FD              3312 	anl	a,#0xfd
   06DB F0                 3313 	movx	@dptr,a
                           3314 ;	../../shared/src/dcc_cal.c:312: TXDCCCAL_EN = 0;
   06DC 90 02 4C           3315 	mov	dptr,#_UPHY14_TRX_ANAREG_TOP_147
   06DF E0                 3316 	movx	a,@dptr
   06E0 54 7F              3317 	anl	a,#0x7f
   06E2 F0                 3318 	movx	@dptr,a
                           3319 ;	../../shared/src/dcc_cal.c:313: lnx_TXDCC_PDIV_CAL_DONE_LANE = 1;
   06E3 90 60 02           3320 	mov	dptr,#(_CAL_CTRL1_LANE + 0x0002)
   06E6 E0                 3321 	movx	a,@dptr
   06E7 44 02              3322 	orl	a,#0x02
   06E9 F0                 3323 	movx	@dptr,a
   06EA                    3324 00159$:
   06EA 85*00 81           3325 	mov	sp,_bp
   06ED D0*00              3326 	pop	_bp
   06EF 02s00r00           3327 	ljmp	__sdcc_banked_ret
                           3328 ;------------------------------------------------------------
                           3329 ;Allocation info for local variables in function 'rxdcc_clk_toggle'
                           3330 ;------------------------------------------------------------
                           3331 ;------------------------------------------------------------
                           3332 ;	../../shared/src/dcc_cal.c:319: void rxdcc_clk_toggle(void) BANKING_CTRL {
                           3333 ;	-----------------------------------------
                           3334 ;	 function rxdcc_clk_toggle
                           3335 ;	-----------------------------------------
   06F2                    3336 _rxdcc_clk_toggle:
                           3337 ;	../../shared/src/dcc_cal.c:320: delay01(5);
   06F2 90 00 05           3338 	mov	dptr,#0x0005
   06F5 78r00              3339 	mov	r0,#_delay01
   06F7 79s00              3340 	mov	r1,#(_delay01 >> 8)
   06F9 7As00              3341 	mov	r2,#(_delay01 >> 16)
   06FB 12s00r00           3342 	lcall	__sdcc_banked_call
                           3343 ;	../../shared/src/dcc_cal.c:321: RXDCC_DAC_SYNC_CLK = 1;
   06FE 90 00 44           3344 	mov	dptr,#_UPHY14_TRX_ANAREG_BOT_17
   0701 E0                 3345 	movx	a,@dptr
   0702 44 10              3346 	orl	a,#0x10
   0704 F0                 3347 	movx	@dptr,a
                           3348 ;	../../shared/src/dcc_cal.c:322: delay01(5);
   0705 90 00 05           3349 	mov	dptr,#0x0005
   0708 78r00              3350 	mov	r0,#_delay01
   070A 79s00              3351 	mov	r1,#(_delay01 >> 8)
   070C 7As00              3352 	mov	r2,#(_delay01 >> 16)
   070E 12s00r00           3353 	lcall	__sdcc_banked_call
                           3354 ;	../../shared/src/dcc_cal.c:323: RXDCC_DCLKMP_CLK = 1;
   0711 90 02 20           3355 	mov	dptr,#_UPHY14_TRX_ANAREG_TOP_136
   0714 E0                 3356 	movx	a,@dptr
   0715 44 01              3357 	orl	a,#0x01
   0717 F0                 3358 	movx	@dptr,a
                           3359 ;	../../shared/src/dcc_cal.c:324: delay01(25);
   0718 90 00 19           3360 	mov	dptr,#0x0019
   071B 78r00              3361 	mov	r0,#_delay01
   071D 79s00              3362 	mov	r1,#(_delay01 >> 8)
   071F 7As00              3363 	mov	r2,#(_delay01 >> 16)
   0721 12s00r00           3364 	lcall	__sdcc_banked_call
                           3365 ;	../../shared/src/dcc_cal.c:325: RXDCC_DAC_SYNC_CLK = 0;
   0724 90 00 44           3366 	mov	dptr,#_UPHY14_TRX_ANAREG_BOT_17
   0727 E0                 3367 	movx	a,@dptr
   0728 54 EF              3368 	anl	a,#0xef
   072A F0                 3369 	movx	@dptr,a
                           3370 ;	../../shared/src/dcc_cal.c:326: delay01(5);
   072B 90 00 05           3371 	mov	dptr,#0x0005
   072E 78r00              3372 	mov	r0,#_delay01
   0730 79s00              3373 	mov	r1,#(_delay01 >> 8)
   0732 7As00              3374 	mov	r2,#(_delay01 >> 16)
   0734 12s00r00           3375 	lcall	__sdcc_banked_call
                           3376 ;	../../shared/src/dcc_cal.c:327: RXDCC_DCLKMP_CLK = 0;
   0737 90 02 20           3377 	mov	dptr,#_UPHY14_TRX_ANAREG_TOP_136
   073A E0                 3378 	movx	a,@dptr
   073B 54 FE              3379 	anl	a,#0xfe
   073D F0                 3380 	movx	@dptr,a
                           3381 ;	../../shared/src/dcc_cal.c:328: delay01(25);
   073E 90 00 19           3382 	mov	dptr,#0x0019
   0741 78r00              3383 	mov	r0,#_delay01
   0743 79s00              3384 	mov	r1,#(_delay01 >> 8)
   0745 7As00              3385 	mov	r2,#(_delay01 >> 16)
   0747 12s00r00           3386 	lcall	__sdcc_banked_call
   074A 02s00r00           3387 	ljmp	__sdcc_banked_ret
                           3388 ;------------------------------------------------------------
                           3389 ;Allocation info for local variables in function 'rxdcc_dll_cal'
                           3390 ;------------------------------------------------------------
                           3391 ;dcc_cnt                   Allocated to registers r7 
                           3392 ;latched_RXDCC_DN          Allocated to registers r2 
                           3393 ;int_dn                    Allocated to stack - offset 1
                           3394 ;int_up                    Allocated to stack - offset 2
                           3395 ;dir                       Allocated to stack - offset 3
                           3396 ;time_out_cnt              Allocated to stack - offset 4
                           3397 ;in_cont_mode              Allocated to stack - offset 5
                           3398 ;in_power_on               Allocated to stack - offset 6
                           3399 ;ext_en                    Allocated to registers r7 
                           3400 ;hg_set                    Allocated to registers r6 
                           3401 ;------------------------------------------------------------
                           3402 ;	../../shared/src/dcc_cal.c:331: void rxdcc_dll_cal(void) BANKING_CTRL {
                           3403 ;	-----------------------------------------
                           3404 ;	 function rxdcc_dll_cal
                           3405 ;	-----------------------------------------
   074D                    3406 _rxdcc_dll_cal:
   074D C0*00              3407 	push	_bp
   074F E5 81              3408 	mov	a,sp
   0751 F5*00              3409 	mov	_bp,a
   0753 24 06              3410 	add	a,#0x06
   0755 F5 81              3411 	mov	sp,a
                           3412 ;	../../shared/src/dcc_cal.c:343: PHY_STATUS = ST_RXDCC_DLL_CAL;    
   0757 90 22 30           3413 	mov	dptr,#_MCU_STATUS0_LANE
   075A 74 08              3414 	mov	a,#0x08
   075C F0                 3415 	movx	@dptr,a
                           3416 ;	../../shared/src/dcc_cal.c:345: lnx_RXDCC_DLL_CAL_DONE_LANE = 0; 
   075D 90 60 00           3417 	mov	dptr,#_CAL_CTRL1_LANE
   0760 E0                 3418 	movx	a,@dptr
   0761 54 BF              3419 	anl	a,#0xbf
   0763 F0                 3420 	movx	@dptr,a
                           3421 ;	../../shared/src/dcc_cal.c:347: in_cont_mode = 0;
   0764 E5*00              3422 	mov	a,_bp
   0766 24 05              3423 	add	a,#0x05
   0768 F8                 3424 	mov	r0,a
   0769 76 00              3425 	mov	@r0,#0x00
                           3426 ;	../../shared/src/dcc_cal.c:348: in_power_on = 0;
   076B E5*00              3427 	mov	a,_bp
   076D 24 06              3428 	add	a,#0x06
   076F F8                 3429 	mov	r0,a
   0770 76 00              3430 	mov	@r0,#0x00
                           3431 ;	../../shared/src/dcc_cal.c:349: time_out_cnt = 0;
   0772 E5*00              3432 	mov	a,_bp
   0774 24 04              3433 	add	a,#0x04
   0776 F8                 3434 	mov	r0,a
   0777 76 00              3435 	mov	@r0,#0x00
                           3436 ;	../../shared/src/dcc_cal.c:350: dir = 0;  
   0779 E5*00              3437 	mov	a,_bp
   077B 24 03              3438 	add	a,#0x03
   077D F8                 3439 	mov	r0,a
   077E 76 00              3440 	mov	@r0,#0x00
                           3441 ;	../../shared/src/dcc_cal.c:351: hg_set = 0;
   0780 7E 00              3442 	mov	r6,#0x00
                           3443 ;	../../shared/src/dcc_cal.c:354: if (lnx_CAL_DONE_LANE == 0) {                        //power-on calibration
   0782 90 60 03           3444 	mov	dptr,#(_CAL_CTRL1_LANE + 0x0003)
   0785 E0                 3445 	movx	a,@dptr
   0786 30 E0 03           3446 	jnb	acc.0,00182$
   0789 02s08r09           3447 	ljmp	00111$
   078C                    3448 00182$:
                           3449 ;	../../shared/src/dcc_cal.c:355: ext_en = cmx_EXT_FORCE_CAL_DONE || cmx_RXDCC_DLL_CAL_EXT_EN;
   078C 90 E6 06           3450 	mov	dptr,#(_CONTROL_CONFIG0 + 0x0002)
   078F E0                 3451 	movx	a,@dptr
   0790 20 E1 0B           3452 	jb	acc.1,00156$
   0793 90 E6 09           3453 	mov	dptr,#(_CONTROL_CONFIG1 + 0x0001)
   0796 E0                 3454 	movx	a,@dptr
   0797 20 E7 04           3455 	jb	acc.7,00156$
   079A 7F 00              3456 	mov	r7,#0x00
   079C 80 02              3457 	sjmp	00157$
   079E                    3458 00156$:
   079E 7F 01              3459 	mov	r7,#0x01
   07A0                    3460 00157$:
                           3461 ;	../../shared/src/dcc_cal.c:356: if (ext_en) {                                     //use ext value for power-on, bypass calibration
   07A0 EF                 3462 	mov	a,r7
   07A1 60 2B              3463 	jz	00102$
                           3464 ;	../../shared/src/dcc_cal.c:357: dcc_cnt = lnx_cal_rxdcc_dll[PWR][rx_pll_rate];
   07A3 C0 06              3465 	push	ar6
   07A5 A2*00              3466 	mov	c,_rx_pll_rate
   07A7 E4                 3467 	clr	a
   07A8 33                 3468 	rlc	a
   07A9 24 E0              3469 	add	a,#_lnx_cal_rxdcc_dll
   07AB F5 82              3470 	mov	dpl,a
   07AD E4                 3471 	clr	a
   07AE 34 65              3472 	addc	a,#(_lnx_cal_rxdcc_dll >> 8)
   07B0 F5 83              3473 	mov	dph,a
   07B2 E0                 3474 	movx	a,@dptr
   07B3 FF                 3475 	mov	r7,a
                           3476 ;	../../shared/src/dcc_cal.c:358: RXDCC_HG_DLLCLK = lnx_cal_rxdcc_dll_hg[rx_pll_rate];          //load the HG setting. 
   07B4 A2*00              3477 	mov	c,_rx_pll_rate
   07B6 E4                 3478 	clr	a
   07B7 33                 3479 	rlc	a
   07B8 24 E4              3480 	add	a,#_lnx_cal_rxdcc_dll_hg
   07BA F5 82              3481 	mov	dpl,a
   07BC E4                 3482 	clr	a
   07BD 34 65              3483 	addc	a,#(_lnx_cal_rxdcc_dll_hg >> 8)
   07BF F5 83              3484 	mov	dph,a
   07C1 E0                 3485 	movx	a,@dptr
   07C2 90 02 1C           3486 	mov	dptr,#_UPHY14_TRX_ANAREG_TOP_135
   07C5 13                 3487 	rrc	a
   07C6 E0                 3488 	movx	a,@dptr
   07C7 92 E1              3489 	mov	acc.1,c
   07C9 F0                 3490 	movx	@dptr,a
   07CA D0 06              3491 	pop	ar6
   07CC 80 25              3492 	sjmp	00103$
   07CE                    3493 00102$:
                           3494 ;	../../shared/src/dcc_cal.c:361: lnx_RXDCC_DLL_CAL_PASS_LANE = 0; 
   07CE 90 60 04           3495 	mov	dptr,#_CAL_CTRL2_LANE
   07D1 E0                 3496 	movx	a,@dptr
   07D2 54 BF              3497 	anl	a,#0xbf
   07D4 F0                 3498 	movx	@dptr,a
                           3499 ;	../../shared/src/dcc_cal.c:362: RXDCC_CAL_EN = 1;
   07D5 90 00 40           3500 	mov	dptr,#_UPHY14_TRX_ANAREG_BOT_16
   07D8 E0                 3501 	movx	a,@dptr
   07D9 44 01              3502 	orl	a,#0x01
   07DB F0                 3503 	movx	@dptr,a
                           3504 ;	../../shared/src/dcc_cal.c:363: TRXDCCIN_SEL = 0;
   07DC 90 00 44           3505 	mov	dptr,#_UPHY14_TRX_ANAREG_BOT_17
   07DF E0                 3506 	movx	a,@dptr
   07E0 54 1F              3507 	anl	a,#0x1f
   07E2 F0                 3508 	movx	@dptr,a
                           3509 ;	../../shared/src/dcc_cal.c:364: RXDCC_HG_DLLCLK = 0;
   07E3 90 02 1C           3510 	mov	dptr,#_UPHY14_TRX_ANAREG_TOP_135
   07E6 E0                 3511 	movx	a,@dptr
   07E7 54 FD              3512 	anl	a,#0xfd
   07E9 F0                 3513 	movx	@dptr,a
                           3514 ;	../../shared/src/dcc_cal.c:365: dcc_cnt = 0x20;
   07EA 7F 20              3515 	mov	r7,#0x20
                           3516 ;	../../shared/src/dcc_cal.c:366: in_power_on = 1;
   07EC E5*00              3517 	mov	a,_bp
   07EE 24 06              3518 	add	a,#0x06
   07F0 F8                 3519 	mov	r0,a
   07F1 76 01              3520 	mov	@r0,#0x01
   07F3                    3521 00103$:
                           3522 ;	../../shared/src/dcc_cal.c:368: RXDCC_EN_DLLCLK = 1;                           //enable RXDCC_EN during power-on, never deassert
   07F3 C0 06              3523 	push	ar6
   07F5 90 02 18           3524 	mov	dptr,#_UPHY14_TRX_ANAREG_TOP_134
   07F8 E0                 3525 	movx	a,@dptr
   07F9 44 01              3526 	orl	a,#0x01
   07FB F0                 3527 	movx	@dptr,a
                           3528 ;	../../shared/src/dcc_cal.c:369: rxdcc_dll_step_cnt = RXDCC_DLL_CAL_STEP_SIZE;      //for power-on (inc. EXT_EN), reset fraction code to middle
   07FC 90 E6 47           3529 	mov	dptr,#(_CON_CAL_STEP_SIZE5 + 0x0003)
   07FF E0                 3530 	movx	a,@dptr
   0800 90s00r00           3531 	mov	dptr,#_rxdcc_dll_step_cnt
   0803 F0                 3532 	movx	@dptr,a
   0804 D0 06              3533 	pop	ar6
   0806 02s08r89           3534 	ljmp	00148$
   0809                    3535 00111$:
                           3536 ;	../../shared/src/dcc_cal.c:371: else if (LOAD_CAL_ON) {                         //not power-on. Speed-change, load result for current rate
   0809 90 60 08           3537 	mov	dptr,#_CAL_CTRL3_LANE
   080C E0                 3538 	movx	a,@dptr
   080D 60 42              3539 	jz	00108$
                           3540 ;	../../shared/src/dcc_cal.c:373: dcc_cnt = lnx_cal_rxdcc_dll[PWR + cmx_RXDCC_DLL_CAL_CONT_CUR_LOAD_EN][rx_pll_rate];  
   080F C0 06              3541 	push	ar6
   0811 90 E6 31           3542 	mov	dptr,#(_CONTROL_CONFIG9 + 0x0001)
   0814 E0                 3543 	movx	a,@dptr
   0815 23                 3544 	rl	a
   0816 54 01              3545 	anl	a,#0x01
   0818 25 E0              3546 	add	a,acc
   081A 24 E0              3547 	add	a,#_lnx_cal_rxdcc_dll
   081C FE                 3548 	mov	r6,a
   081D E4                 3549 	clr	a
   081E 34 65              3550 	addc	a,#(_lnx_cal_rxdcc_dll >> 8)
   0820 FB                 3551 	mov	r3,a
   0821 A2*00              3552 	mov	c,_rx_pll_rate
   0823 E4                 3553 	clr	a
   0824 33                 3554 	rlc	a
   0825 2E                 3555 	add	a,r6
   0826 F5 82              3556 	mov	dpl,a
   0828 E4                 3557 	clr	a
   0829 3B                 3558 	addc	a,r3
   082A F5 83              3559 	mov	dph,a
   082C E0                 3560 	movx	a,@dptr
   082D FF                 3561 	mov	r7,a
                           3562 ;	../../shared/src/dcc_cal.c:374: rxdcc_dll_step_cnt = RXDCC_DLL_CAL_STEP_SIZE;     //when speed change, restore the fracition code to middle
   082E 90 E6 47           3563 	mov	dptr,#(_CON_CAL_STEP_SIZE5 + 0x0003)
   0831 E0                 3564 	movx	a,@dptr
   0832 90s00r00           3565 	mov	dptr,#_rxdcc_dll_step_cnt
   0835 F0                 3566 	movx	@dptr,a
                           3567 ;	../../shared/src/dcc_cal.c:375: RXDCC_HG_DLLCLK = lnx_cal_rxdcc_dll_hg[rx_pll_rate];          //load the HG setting. 
   0836 A2*00              3568 	mov	c,_rx_pll_rate
   0838 E4                 3569 	clr	a
   0839 33                 3570 	rlc	a
   083A 24 E4              3571 	add	a,#_lnx_cal_rxdcc_dll_hg
   083C F5 82              3572 	mov	dpl,a
   083E E4                 3573 	clr	a
   083F 34 65              3574 	addc	a,#(_lnx_cal_rxdcc_dll_hg >> 8)
   0841 F5 83              3575 	mov	dph,a
   0843 E0                 3576 	movx	a,@dptr
   0844 FA                 3577 	mov	r2,a
   0845 90 02 1C           3578 	mov	dptr,#_UPHY14_TRX_ANAREG_TOP_135
   0848 13                 3579 	rrc	a
   0849 E0                 3580 	movx	a,@dptr
   084A 92 E1              3581 	mov	acc.1,c
   084C F0                 3582 	movx	@dptr,a
   084D D0 06              3583 	pop	ar6
   084F 80 38              3584 	sjmp	00148$
   0851                    3585 00108$:
                           3586 ;	../../shared/src/dcc_cal.c:377: else if (cmx_RXDCC_DLL_CAL_CONT_EN) {  //not power-on. Continious mode, only performed when SPEED_DIV = 0
   0851 90 E6 0D           3587 	mov	dptr,#(_CONTROL_CONFIG2 + 0x0001)
   0854 E0                 3588 	movx	a,@dptr
   0855 30 E7 27           3589 	jnb	acc.7,00105$
                           3590 ;	../../shared/src/dcc_cal.c:378: RXDCC_CAL_EN = 1;
   0858 90 00 40           3591 	mov	dptr,#_UPHY14_TRX_ANAREG_BOT_16
   085B E0                 3592 	movx	a,@dptr
   085C 44 01              3593 	orl	a,#0x01
   085E F0                 3594 	movx	@dptr,a
                           3595 ;	../../shared/src/dcc_cal.c:379: TRXDCCIN_SEL = 0;
   085F 90 00 44           3596 	mov	dptr,#_UPHY14_TRX_ANAREG_BOT_17
   0862 E0                 3597 	movx	a,@dptr
   0863 54 1F              3598 	anl	a,#0x1f
   0865 F0                 3599 	movx	@dptr,a
                           3600 ;	../../shared/src/dcc_cal.c:380: dcc_cnt = lnx_cal_rxdcc_dll[CONT][rx_pll_rate];    //always load cont result
   0866 A2*00              3601 	mov	c,_rx_pll_rate
   0868 E4                 3602 	clr	a
   0869 33                 3603 	rlc	a
   086A 24 E2              3604 	add	a,#(_lnx_cal_rxdcc_dll + 0x0002)
   086C F5 82              3605 	mov	dpl,a
   086E E4                 3606 	clr	a
   086F 34 65              3607 	addc	a,#((_lnx_cal_rxdcc_dll + 0x0002) >> 8)
   0871 F5 83              3608 	mov	dph,a
   0873 E0                 3609 	movx	a,@dptr
   0874 FA                 3610 	mov	r2,a
   0875 FF                 3611 	mov	r7,a
                           3612 ;	../../shared/src/dcc_cal.c:381: in_cont_mode = 1;                                  //when continious mode, use fraction code
   0876 E5*00              3613 	mov	a,_bp
   0878 24 05              3614 	add	a,#0x05
   087A F8                 3615 	mov	r0,a
   087B 76 01              3616 	mov	@r0,#0x01
   087D 80 0A              3617 	sjmp	00148$
   087F                    3618 00105$:
                           3619 ;	../../shared/src/dcc_cal.c:384: lnx_RXDCC_DLL_CAL_DONE_LANE = 1;
   087F 90 60 00           3620 	mov	dptr,#_CAL_CTRL1_LANE
   0882 E0                 3621 	movx	a,@dptr
   0883 44 40              3622 	orl	a,#0x40
   0885 F0                 3623 	movx	@dptr,a
                           3624 ;	../../shared/src/dcc_cal.c:385: return;
   0886 02s0Ar9B           3625 	ljmp	00153$
                           3626 ;	../../shared/src/dcc_cal.c:389: do {
   0889                    3627 00148$:
                           3628 ;	../../shared/src/dcc_cal.c:390: RXDCC_DLLCLK = dcc_cnt;
   0889 8F 02              3629 	mov	ar2,r7
   088B 90 02 1C           3630 	mov	dptr,#_UPHY14_TRX_ANAREG_TOP_135
   088E EA                 3631 	mov	a,r2
   088F 2A                 3632 	add	a,r2
   0890 25 E0              3633 	add	a,acc
   0892 54 FC              3634 	anl	a,#0xfc
   0894 F5 F0              3635 	mov	b,a
   0896 E0                 3636 	movx	a,@dptr
   0897 54 03              3637 	anl	a,#0x03
   0899 45 F0              3638 	orl	a,b
   089B F0                 3639 	movx	@dptr,a
                           3640 ;	../../shared/src/dcc_cal.c:391: rxdcc_clk_toggle();
   089C C0 06              3641 	push	ar6
   089E C0 07              3642 	push	ar7
   08A0 78rF2              3643 	mov	r0,#_rxdcc_clk_toggle
   08A2 79s06              3644 	mov	r1,#(_rxdcc_clk_toggle >> 8)
   08A4 7As00              3645 	mov	r2,#(_rxdcc_clk_toggle >> 16)
   08A6 12s00r00           3646 	lcall	__sdcc_banked_call
   08A9 D0 07              3647 	pop	ar7
   08AB D0 06              3648 	pop	ar6
                           3649 ;	../../shared/src/dcc_cal.c:393: time_out_cnt ++;
   08AD E5*00              3650 	mov	a,_bp
   08AF 24 04              3651 	add	a,#0x04
   08B1 F8                 3652 	mov	r0,a
   08B2 06                 3653 	inc	@r0
                           3654 ;	../../shared/src/dcc_cal.c:394: if( RXDCC_CAL_EN == 0 ) break;                                      //either LOAD, or EXT_EN in power-on
   08B3 90 00 40           3655 	mov	dptr,#_UPHY14_TRX_ANAREG_BOT_16
   08B6 E0                 3656 	movx	a,@dptr
   08B7 20 E0 03           3657 	jb	acc.0,00188$
   08BA 02s0Ar4B           3658 	ljmp	00150$
   08BD                    3659 00188$:
                           3660 ;	../../shared/src/dcc_cal.c:395: if( lnx_CAL_DONE_LANE == 1 && time_out_cnt > 1) break;                   //continious mode, has ran 1 round
   08BD 90 60 03           3661 	mov	dptr,#(_CAL_CTRL1_LANE + 0x0003)
   08C0 E0                 3662 	movx	a,@dptr
   08C1 54 01              3663 	anl	a,#0x01
   08C3 FA                 3664 	mov	r2,a
   08C4 BA 01 0D           3665 	cjne	r2,#0x01,00116$
   08C7 E5*00              3666 	mov	a,_bp
   08C9 24 04              3667 	add	a,#0x04
   08CB F8                 3668 	mov	r0,a
   08CC E6                 3669 	mov	a,@r0
   08CD 24 FE              3670 	add	a,#0xff - 0x01
   08CF 50 03              3671 	jnc	00191$
   08D1 02s0Ar4B           3672 	ljmp	00150$
   08D4                    3673 00191$:
   08D4                    3674 00116$:
                           3675 ;	../../shared/src/dcc_cal.c:396: if( lnx_CAL_DONE_LANE == 0 && is_toggle_pat( dir, time_out_cnt - 1 ))  { lnx_RXDCC_DLL_CAL_PASS_LANE = 1;  break; }     //power-on, toggled
   08D4 90 60 03           3676 	mov	dptr,#(_CAL_CTRL1_LANE + 0x0003)
   08D7 E0                 3677 	movx	a,@dptr
   08D8 20 E0 32           3678 	jb	acc.0,00119$
   08DB E5*00              3679 	mov	a,_bp
   08DD 24 04              3680 	add	a,#0x04
   08DF F8                 3681 	mov	r0,a
   08E0 E6                 3682 	mov	a,@r0
   08E1 14                 3683 	dec	a
   08E2 FA                 3684 	mov	r2,a
   08E3 C0 06              3685 	push	ar6
   08E5 C0 07              3686 	push	ar7
   08E7 C0 02              3687 	push	ar2
   08E9 E5*00              3688 	mov	a,_bp
   08EB 24 03              3689 	add	a,#0x03
   08ED F8                 3690 	mov	r0,a
   08EE 86 82              3691 	mov	dpl,@r0
   08F0 78r00              3692 	mov	r0,#_is_toggle_pat
   08F2 79s00              3693 	mov	r1,#(_is_toggle_pat >> 8)
   08F4 7As00              3694 	mov	r2,#(_is_toggle_pat >> 16)
   08F6 12s00r00           3695 	lcall	__sdcc_banked_call
   08F9 15 81              3696 	dec	sp
   08FB D0 07              3697 	pop	ar7
   08FD D0 06              3698 	pop	ar6
   08FF 92*00              3699 	mov	b0,c
   0901 50 0A              3700 	jnc	00119$
   0903 90 60 04           3701 	mov	dptr,#_CAL_CTRL2_LANE
   0906 E0                 3702 	movx	a,@dptr
   0907 44 40              3703 	orl	a,#0x40
   0909 F0                 3704 	movx	@dptr,a
   090A 02s0Ar4B           3705 	ljmp	00150$
   090D                    3706 00119$:
                           3707 ;	../../shared/src/dcc_cal.c:397: if( lnx_CAL_DONE_LANE == 0 && time_out_cnt >= RXDCC_DLL_LOOP_MAX && cmx_RXDCC_DLL_CAL_TIMEOUT_DIS == 0) break; //power-on, reached maximum rounds
   090D 90 60 03           3708 	mov	dptr,#(_CAL_CTRL1_LANE + 0x0003)
   0910 E0                 3709 	movx	a,@dptr
   0911 20 E0 14           3710 	jb	acc.0,00122$
   0914 E5*00              3711 	mov	a,_bp
   0916 24 04              3712 	add	a,#0x04
   0918 F8                 3713 	mov	r0,a
   0919 B6 40 00           3714 	cjne	@r0,#0x40,00195$
   091C                    3715 00195$:
   091C 40 0A              3716 	jc	00122$
   091E 90 E6 48           3717 	mov	dptr,#_CAL_TIME_OUT_AND_DIS
   0921 E0                 3718 	movx	a,@dptr
   0922 20 E2 03           3719 	jb	acc.2,00197$
   0925 02s0Ar4B           3720 	ljmp	00150$
   0928                    3721 00197$:
   0928                    3722 00122$:
                           3723 ;	../../shared/src/dcc_cal.c:399: latched_RXDCC_DN = TXDCC_DN;   //RXDCC shares TXDCC up/dn
   0928 90 20 40           3724 	mov	dptr,#_TX_CALIBRATION_LANE
   092B E0                 3725 	movx	a,@dptr
   092C 54 01              3726 	anl	a,#0x01
   092E FA                 3727 	mov	r2,a
                           3728 ;	../../shared/src/dcc_cal.c:400: int_up = 0;
   092F A8*00              3729 	mov	r0,_bp
   0931 08                 3730 	inc	r0
   0932 08                 3731 	inc	r0
   0933 76 00              3732 	mov	@r0,#0x00
                           3733 ;	../../shared/src/dcc_cal.c:401: int_dn = 0; 
   0935 A8*00              3734 	mov	r0,_bp
   0937 08                 3735 	inc	r0
   0938 76 00              3736 	mov	@r0,#0x00
                           3737 ;	../../shared/src/dcc_cal.c:403: if (in_cont_mode) { //continious calibration
   093A E5*00              3738 	mov	a,_bp
   093C 24 05              3739 	add	a,#0x05
   093E F8                 3740 	mov	r0,a
   093F E6                 3741 	mov	a,@r0
   0940 60 6C              3742 	jz	00137$
                           3743 ;	../../shared/src/dcc_cal.c:404: if (latched_RXDCC_DN) {rxdcc_dll_step_cnt--;}
   0942 EA                 3744 	mov	a,r2
   0943 60 0B              3745 	jz	00126$
   0945 90s00r00           3746 	mov	dptr,#_rxdcc_dll_step_cnt
   0948 E0                 3747 	movx	a,@dptr
   0949 14                 3748 	dec	a
   094A 90s00r00           3749 	mov	dptr,#_rxdcc_dll_step_cnt
   094D F0                 3750 	movx	@dptr,a
   094E 80 07              3751 	sjmp	00127$
   0950                    3752 00126$:
                           3753 ;	../../shared/src/dcc_cal.c:405: else                  {rxdcc_dll_step_cnt++;}
   0950 90s00r00           3754 	mov	dptr,#_rxdcc_dll_step_cnt
   0953 E0                 3755 	movx	a,@dptr
   0954 24 01              3756 	add	a,#0x01
   0956 F0                 3757 	movx	@dptr,a
   0957                    3758 00127$:
                           3759 ;	../../shared/src/dcc_cal.c:407: if( rxdcc_dll_step_cnt == 0) {
   0957 90s00r00           3760 	mov	dptr,#_rxdcc_dll_step_cnt
   095A E0                 3761 	movx	a,@dptr
   095B FB                 3762 	mov	r3,a
   095C 70 19              3763 	jnz	00131$
                           3764 ;	../../shared/src/dcc_cal.c:408: int_up = 0;
   095E C0 06              3765 	push	ar6
   0960 A8*00              3766 	mov	r0,_bp
   0962 08                 3767 	inc	r0
   0963 08                 3768 	inc	r0
   0964 76 00              3769 	mov	@r0,#0x00
                           3770 ;	../../shared/src/dcc_cal.c:409: int_dn = 1; 
   0966 A8*00              3771 	mov	r0,_bp
   0968 08                 3772 	inc	r0
   0969 76 01              3773 	mov	@r0,#0x01
                           3774 ;	../../shared/src/dcc_cal.c:410: rxdcc_dll_step_cnt = RXDCC_DLL_CAL_STEP_SIZE;  //after up/dn triggered, reset fraction code to middle
   096B 90 E6 47           3775 	mov	dptr,#(_CON_CAL_STEP_SIZE5 + 0x0003)
   096E E0                 3776 	movx	a,@dptr
   096F 90s00r00           3777 	mov	dptr,#_rxdcc_dll_step_cnt
   0972 F0                 3778 	movx	@dptr,a
   0973 D0 06              3779 	pop	ar6
   0975 80 52              3780 	sjmp	00138$
   0977                    3781 00131$:
                           3782 ;	../../shared/src/dcc_cal.c:412: else if(rxdcc_dll_step_cnt>=(RXDCC_DLL_CAL_STEP_SIZE<<1)) {
   0977 C0 06              3783 	push	ar6
   0979 90 E6 47           3784 	mov	dptr,#(_CON_CAL_STEP_SIZE5 + 0x0003)
   097C E0                 3785 	movx	a,@dptr
   097D FE                 3786 	mov	r6,a
   097E E4                 3787 	clr	a
   097F CE                 3788 	xch	a,r6
   0980 25 E0              3789 	add	a,acc
   0982 CE                 3790 	xch	a,r6
   0983 33                 3791 	rlc	a
   0984 FD                 3792 	mov	r5,a
   0985 7C 00              3793 	mov	r4,#0x00
   0987 C3                 3794 	clr	c
   0988 EB                 3795 	mov	a,r3
   0989 9E                 3796 	subb	a,r6
   098A EC                 3797 	mov	a,r4
   098B 64 80              3798 	xrl	a,#0x80
   098D 8D F0              3799 	mov	b,r5
   098F 63 F0 80           3800 	xrl	b,#0x80
   0992 95 F0              3801 	subb	a,b
   0994 D0 06              3802 	pop	ar6
   0996 40 31              3803 	jc	00138$
                           3804 ;	../../shared/src/dcc_cal.c:413: int_up = 1;
   0998 A8*00              3805 	mov	r0,_bp
   099A 08                 3806 	inc	r0
   099B 08                 3807 	inc	r0
   099C 76 01              3808 	mov	@r0,#0x01
                           3809 ;	../../shared/src/dcc_cal.c:414: int_dn = 0; 
   099E A8*00              3810 	mov	r0,_bp
   09A0 08                 3811 	inc	r0
   09A1 76 00              3812 	mov	@r0,#0x00
                           3813 ;	../../shared/src/dcc_cal.c:415: rxdcc_dll_step_cnt = RXDCC_DLL_CAL_STEP_SIZE;  //after up/dn triggered, reset fraction code to middle
   09A3 90 E6 47           3814 	mov	dptr,#(_CON_CAL_STEP_SIZE5 + 0x0003)
   09A6 E0                 3815 	movx	a,@dptr
   09A7 FB                 3816 	mov	r3,a
   09A8 90s00r00           3817 	mov	dptr,#_rxdcc_dll_step_cnt
   09AB F0                 3818 	movx	@dptr,a
   09AC 80 1B              3819 	sjmp	00138$
   09AE                    3820 00137$:
                           3821 ;	../../shared/src/dcc_cal.c:419: if (latched_RXDCC_DN) {int_up = 0; int_dn = 1;}
   09AE EA                 3822 	mov	a,r2
   09AF 60 0D              3823 	jz	00134$
   09B1 A8*00              3824 	mov	r0,_bp
   09B3 08                 3825 	inc	r0
   09B4 08                 3826 	inc	r0
   09B5 76 00              3827 	mov	@r0,#0x00
   09B7 A8*00              3828 	mov	r0,_bp
   09B9 08                 3829 	inc	r0
   09BA 76 01              3830 	mov	@r0,#0x01
   09BC 80 0B              3831 	sjmp	00138$
   09BE                    3832 00134$:
                           3833 ;	../../shared/src/dcc_cal.c:420: else                  {int_up = 1; int_dn = 0;}
   09BE A8*00              3834 	mov	r0,_bp
   09C0 08                 3835 	inc	r0
   09C1 08                 3836 	inc	r0
   09C2 76 01              3837 	mov	@r0,#0x01
   09C4 A8*00              3838 	mov	r0,_bp
   09C6 08                 3839 	inc	r0
   09C7 76 00              3840 	mov	@r0,#0x00
   09C9                    3841 00138$:
                           3842 ;	../../shared/src/dcc_cal.c:423: if (int_dn == 1) {
   09C9 A8*00              3843 	mov	r0,_bp
   09CB 08                 3844 	inc	r0
   09CC B6 01 15           3845 	cjne	@r0,#0x01,00142$
                           3846 ;	../../shared/src/dcc_cal.c:424: dcc_cnt = sign_abs_dn(dcc_cnt);
   09CF 8F 82              3847 	mov	dpl,r7
   09D1 C0 06              3848 	push	ar6
   09D3 78r00              3849 	mov	r0,#_sign_abs_dn
   09D5 79s00              3850 	mov	r1,#(_sign_abs_dn >> 8)
   09D7 7As00              3851 	mov	r2,#(_sign_abs_dn >> 16)
   09D9 12s00r00           3852 	lcall	__sdcc_banked_call
   09DC AA 82              3853 	mov	r2,dpl
   09DE D0 06              3854 	pop	ar6
   09E0 8A 07              3855 	mov	ar7,r2
   09E2 80 23              3856 	sjmp	00143$
   09E4                    3857 00142$:
                           3858 ;	../../shared/src/dcc_cal.c:426: else if (int_up == 1) {
   09E4 A8*00              3859 	mov	r0,_bp
   09E6 08                 3860 	inc	r0
   09E7 08                 3861 	inc	r0
   09E8 B6 01 1C           3862 	cjne	@r0,#0x01,00143$
                           3863 ;	../../shared/src/dcc_cal.c:427: dir |= 1;
   09EB E5*00              3864 	mov	a,_bp
   09ED 24 03              3865 	add	a,#0x03
   09EF F8                 3866 	mov	r0,a
   09F0 E6                 3867 	mov	a,@r0
   09F1 44 01              3868 	orl	a,#0x01
   09F3 F6                 3869 	mov	@r0,a
                           3870 ;	../../shared/src/dcc_cal.c:428: dcc_cnt = sign_abs_up(dcc_cnt);      
   09F4 8F 82              3871 	mov	dpl,r7
   09F6 C0 06              3872 	push	ar6
   09F8 78r00              3873 	mov	r0,#_sign_abs_up
   09FA 79s00              3874 	mov	r1,#(_sign_abs_up >> 8)
   09FC 7As00              3875 	mov	r2,#(_sign_abs_up >> 16)
   09FE 12s00r00           3876 	lcall	__sdcc_banked_call
   0A01 AA 82              3877 	mov	r2,dpl
   0A03 D0 06              3878 	pop	ar6
   0A05 8A 07              3879 	mov	ar7,r2
   0A07                    3880 00143$:
                           3881 ;	../../shared/src/dcc_cal.c:430: dir<<=1;
   0A07 E5*00              3882 	mov	a,_bp
   0A09 24 03              3883 	add	a,#0x03
   0A0B F8                 3884 	mov	r0,a
   0A0C E6                 3885 	mov	a,@r0
   0A0D 25 E0              3886 	add	a,acc
   0A0F F6                 3887 	mov	@r0,a
                           3888 ;	../../shared/src/dcc_cal.c:431: dir = dir & 0x3f;
   0A10 E5*00              3889 	mov	a,_bp
   0A12 24 03              3890 	add	a,#0x03
   0A14 F8                 3891 	mov	r0,a
   0A15 E6                 3892 	mov	a,@r0
   0A16 54 3F              3893 	anl	a,#0x3F
   0A18 F6                 3894 	mov	@r0,a
                           3895 ;	../../shared/src/dcc_cal.c:436: if (in_power_on && ((dcc_cnt & 0x1f) == 24) && (hg_set == 0)){
   0A19 E5*00              3896 	mov	a,_bp
   0A1B 24 06              3897 	add	a,#0x06
   0A1D F8                 3898 	mov	r0,a
   0A1E E6                 3899 	mov	a,@r0
   0A1F 70 03              3900 	jnz	00207$
   0A21 02s08r89           3901 	ljmp	00148$
   0A24                    3902 00207$:
   0A24 74 1F              3903 	mov	a,#0x1F
   0A26 5F                 3904 	anl	a,r7
   0A27 FA                 3905 	mov	r2,a
   0A28 BA 18 02           3906 	cjne	r2,#0x18,00208$
   0A2B 80 03              3907 	sjmp	00209$
   0A2D                    3908 00208$:
   0A2D 02s08r89           3909 	ljmp	00148$
   0A30                    3910 00209$:
   0A30 EE                 3911 	mov	a,r6
   0A31 60 03              3912 	jz	00210$
   0A33 02s08r89           3913 	ljmp	00148$
   0A36                    3914 00210$:
                           3915 ;	../../shared/src/dcc_cal.c:437: reg_RXDCC_HG_DLLCLK_LANE = 1;
   0A36 90 02 1C           3916 	mov	dptr,#_UPHY14_TRX_ANAREG_TOP_135
   0A39 E0                 3917 	movx	a,@dptr
   0A3A 44 02              3918 	orl	a,#0x02
   0A3C F0                 3919 	movx	@dptr,a
                           3920 ;	../../shared/src/dcc_cal.c:438: hg_set = 1;
   0A3D 7E 01              3921 	mov	r6,#0x01
                           3922 ;	../../shared/src/dcc_cal.c:439: dcc_cnt = 0x20;
   0A3F 7F 20              3923 	mov	r7,#0x20
                           3924 ;	../../shared/src/dcc_cal.c:440: time_out_cnt = 0;
   0A41 E5*00              3925 	mov	a,_bp
   0A43 24 04              3926 	add	a,#0x04
   0A45 F8                 3927 	mov	r0,a
   0A46 76 00              3928 	mov	@r0,#0x00
                           3929 ;	../../shared/src/dcc_cal.c:443: } while (1); 
   0A48 02s08r89           3930 	ljmp	00148$
   0A4B                    3931 00150$:
                           3932 ;	../../shared/src/dcc_cal.c:446: if (lnx_CAL_DONE_LANE == 0) {                            //if power-on calibration
   0A4B 90 60 03           3933 	mov	dptr,#(_CAL_CTRL1_LANE + 0x0003)
   0A4E E0                 3934 	movx	a,@dptr
   0A4F 20 E0 2B           3935 	jb	acc.0,00152$
                           3936 ;	../../shared/src/dcc_cal.c:447: lnx_cal_rxdcc_dll[PWR][rx_pll_rate] = dcc_cnt;       //save to power-on result
   0A52 A2*00              3937 	mov	c,_rx_pll_rate
   0A54 E4                 3938 	clr	a
   0A55 33                 3939 	rlc	a
   0A56 24 E0              3940 	add	a,#_lnx_cal_rxdcc_dll
   0A58 F5 82              3941 	mov	dpl,a
   0A5A E4                 3942 	clr	a
   0A5B 34 65              3943 	addc	a,#(_lnx_cal_rxdcc_dll >> 8)
   0A5D F5 83              3944 	mov	dph,a
   0A5F EF                 3945 	mov	a,r7
   0A60 F0                 3946 	movx	@dptr,a
                           3947 ;	../../shared/src/dcc_cal.c:448: lnx_cal_rxdcc_dll_hg[rx_pll_rate] = (reg_RXDCC_HG_DLLCLK_LANE & 0x01) | 0x00; //save the HG setting for current rate, will be loaded by continious mode
   0A61 A2*00              3948 	mov	c,_rx_pll_rate
   0A63 E4                 3949 	clr	a
   0A64 33                 3950 	rlc	a
   0A65 24 E4              3951 	add	a,#_lnx_cal_rxdcc_dll_hg
   0A67 FA                 3952 	mov	r2,a
   0A68 E4                 3953 	clr	a
   0A69 34 65              3954 	addc	a,#(_lnx_cal_rxdcc_dll_hg >> 8)
   0A6B FB                 3955 	mov	r3,a
   0A6C 90 02 1C           3956 	mov	dptr,#_UPHY14_TRX_ANAREG_TOP_135
   0A6F E0                 3957 	movx	a,@dptr
   0A70 03                 3958 	rr	a
   0A71 54 01              3959 	anl	a,#0x01
   0A73 FC                 3960 	mov	r4,a
   0A74 53 04 01           3961 	anl	ar4,#0x01
   0A77 8A 82              3962 	mov	dpl,r2
   0A79 8B 83              3963 	mov	dph,r3
   0A7B EC                 3964 	mov	a,r4
   0A7C F0                 3965 	movx	@dptr,a
   0A7D                    3966 00152$:
                           3967 ;	../../shared/src/dcc_cal.c:450: lnx_cal_rxdcc_dll[CONT][rx_pll_rate] = dcc_cnt;     //no matter power-on or LOAD or continious, need to save to [CONT]
   0A7D A2*00              3968 	mov	c,_rx_pll_rate
   0A7F E4                 3969 	clr	a
   0A80 33                 3970 	rlc	a
   0A81 FA                 3971 	mov	r2,a
   0A82 24 E2              3972 	add	a,#(_lnx_cal_rxdcc_dll + 0x0002)
   0A84 F5 82              3973 	mov	dpl,a
   0A86 E4                 3974 	clr	a
   0A87 34 65              3975 	addc	a,#((_lnx_cal_rxdcc_dll + 0x0002) >> 8)
   0A89 F5 83              3976 	mov	dph,a
   0A8B EF                 3977 	mov	a,r7
   0A8C F0                 3978 	movx	@dptr,a
                           3979 ;	../../shared/src/dcc_cal.c:452: RXDCC_CAL_EN = 0;
   0A8D 90 00 40           3980 	mov	dptr,#_UPHY14_TRX_ANAREG_BOT_16
   0A90 E0                 3981 	movx	a,@dptr
   0A91 54 FE              3982 	anl	a,#0xfe
   0A93 F0                 3983 	movx	@dptr,a
                           3984 ;	../../shared/src/dcc_cal.c:453: lnx_RXDCC_DLL_CAL_DONE_LANE = 1;
   0A94 90 60 00           3985 	mov	dptr,#_CAL_CTRL1_LANE
   0A97 E0                 3986 	movx	a,@dptr
   0A98 44 40              3987 	orl	a,#0x40
   0A9A F0                 3988 	movx	@dptr,a
   0A9B                    3989 00153$:
   0A9B 85*00 81           3990 	mov	sp,_bp
   0A9E D0*00              3991 	pop	_bp
   0AA0 02s00r00           3992 	ljmp	__sdcc_banked_ret
                           3993 ;------------------------------------------------------------
                           3994 ;Allocation info for local variables in function 'rxdcc_data_cal'
                           3995 ;------------------------------------------------------------
                           3996 ;dcc_cnt                   Allocated to registers r7 
                           3997 ;latched_RXDCC_DN          Allocated to registers r2 
                           3998 ;int_dn                    Allocated to stack - offset 1
                           3999 ;int_up                    Allocated to stack - offset 2
                           4000 ;dir                       Allocated to stack - offset 3
                           4001 ;gen                       Allocated to stack - offset 4
                           4002 ;time_out_cnt              Allocated to registers r4 
                           4003 ;in_power_on               Allocated to registers r3 
                           4004 ;in_cont_mode              Allocated to stack - offset 5
                           4005 ;ext_en                    Allocated to registers r7 
                           4006 ;hg_set                    Allocated to stack - offset 6
                           4007 ;------------------------------------------------------------
                           4008 ;	../../shared/src/dcc_cal.c:459: void rxdcc_data_cal(void) BANKING_CTRL {
                           4009 ;	-----------------------------------------
                           4010 ;	 function rxdcc_data_cal
                           4011 ;	-----------------------------------------
   0AA3                    4012 _rxdcc_data_cal:
   0AA3 C0*00              4013 	push	_bp
   0AA5 E5 81              4014 	mov	a,sp
   0AA7 F5*00              4015 	mov	_bp,a
   0AA9 24 06              4016 	add	a,#0x06
   0AAB F5 81              4017 	mov	sp,a
                           4018 ;	../../shared/src/dcc_cal.c:471: PHY_STATUS = ST_RXDCC_DATA_CAL;
   0AAD 90 22 30           4019 	mov	dptr,#_MCU_STATUS0_LANE
   0AB0 74 0E              4020 	mov	a,#0x0E
   0AB2 F0                 4021 	movx	@dptr,a
                           4022 ;	../../shared/src/dcc_cal.c:473: lnx_RXDCC_DATA_CAL_DONE_LANE = 0;
   0AB3 90 60 00           4023 	mov	dptr,#_CAL_CTRL1_LANE
   0AB6 E0                 4024 	movx	a,@dptr
   0AB7 54 7F              4025 	anl	a,#0x7f
   0AB9 F0                 4026 	movx	@dptr,a
                           4027 ;	../../shared/src/dcc_cal.c:475: in_cont_mode = 0;
   0ABA E5*00              4028 	mov	a,_bp
   0ABC 24 05              4029 	add	a,#0x05
   0ABE F8                 4030 	mov	r0,a
                           4031 ;	../../shared/src/dcc_cal.c:476: in_power_on = 0;
                           4032 ;	../../shared/src/dcc_cal.c:477: time_out_cnt = 0;
                           4033 ;	../../shared/src/dcc_cal.c:478: dir = 0;
   0ABF E4                 4034 	clr	a
   0AC0 F6                 4035 	mov	@r0,a
   0AC1 FB                 4036 	mov	r3,a
   0AC2 FC                 4037 	mov	r4,a
   0AC3 E5*00              4038 	mov	a,_bp
   0AC5 24 03              4039 	add	a,#0x03
   0AC7 F8                 4040 	mov	r0,a
   0AC8 76 00              4041 	mov	@r0,#0x00
                           4042 ;	../../shared/src/dcc_cal.c:479: gen = gen_rx;
   0ACA 90s00r00           4043 	mov	dptr,#_gen_rx
   0ACD E0                 4044 	movx	a,@dptr
   0ACE FE                 4045 	mov	r6,a
   0ACF E5*00              4046 	mov	a,_bp
   0AD1 24 04              4047 	add	a,#0x04
   0AD3 F8                 4048 	mov	r0,a
   0AD4 A6 06              4049 	mov	@r0,ar6
                           4050 ;	../../shared/src/dcc_cal.c:480: if(phy_mode == SERDES) gen = 0;
   0AD6 90 A3 16           4051 	mov	dptr,#(_SYSTEM + 0x0002)
   0AD9 E0                 4052 	movx	a,@dptr
   0ADA 54 07              4053 	anl	a,#0x07
   0ADC FF                 4054 	mov	r7,a
   0ADD BF 04 07           4055 	cjne	r7,#0x04,00102$
   0AE0 E5*00              4056 	mov	a,_bp
   0AE2 24 04              4057 	add	a,#0x04
   0AE4 F8                 4058 	mov	r0,a
   0AE5 76 00              4059 	mov	@r0,#0x00
   0AE7                    4060 00102$:
                           4061 ;	../../shared/src/dcc_cal.c:483: if (lnx_CAL_DONE_LANE == 0) {                        //power-on calibration
   0AE7 90 60 03           4062 	mov	dptr,#(_CAL_CTRL1_LANE + 0x0003)
   0AEA E0                 4063 	movx	a,@dptr
   0AEB 30 E0 03           4064 	jnb	acc.0,00193$
   0AEE 02s0Br6F           4065 	ljmp	00114$
   0AF1                    4066 00193$:
                           4067 ;	../../shared/src/dcc_cal.c:484: ext_en = cmx_EXT_FORCE_CAL_DONE || cmx_RXDCC_DATA_CAL_EXT_EN;
   0AF1 90 E6 06           4068 	mov	dptr,#(_CONTROL_CONFIG0 + 0x0002)
   0AF4 E0                 4069 	movx	a,@dptr
   0AF5 20 E1 0B           4070 	jb	acc.1,00162$
   0AF8 90 E6 0A           4071 	mov	dptr,#(_CONTROL_CONFIG1 + 0x0002)
   0AFB E0                 4072 	movx	a,@dptr
   0AFC 20 E0 04           4073 	jb	acc.0,00162$
   0AFF 7F 00              4074 	mov	r7,#0x00
   0B01 80 02              4075 	sjmp	00163$
   0B03                    4076 00162$:
   0B03 7F 01              4077 	mov	r7,#0x01
   0B05                    4078 00163$:
                           4079 ;	../../shared/src/dcc_cal.c:485: if (ext_en) {                                     //use ext value for power-on, bypass calibration
   0B05 EF                 4080 	mov	a,r7
   0B06 60 2F              4081 	jz	00104$
                           4082 ;	../../shared/src/dcc_cal.c:486: dcc_cnt = lnx_cal_rxdcc_data[PWR][gen];
   0B08 C0 03              4083 	push	ar3
   0B0A E5*00              4084 	mov	a,_bp
   0B0C 24 04              4085 	add	a,#0x04
   0B0E F8                 4086 	mov	r0,a
   0B0F E6                 4087 	mov	a,@r0
   0B10 24 E6              4088 	add	a,#_lnx_cal_rxdcc_data
   0B12 F5 82              4089 	mov	dpl,a
   0B14 E4                 4090 	clr	a
   0B15 34 65              4091 	addc	a,#(_lnx_cal_rxdcc_data >> 8)
   0B17 F5 83              4092 	mov	dph,a
   0B19 E0                 4093 	movx	a,@dptr
   0B1A FF                 4094 	mov	r7,a
                           4095 ;	../../shared/src/dcc_cal.c:487: RXDCC_HG_DATACLK = lnx_cal_rxdcc_data_hg[gen];          //load the HG setting.
   0B1B E5*00              4096 	mov	a,_bp
   0B1D 24 04              4097 	add	a,#0x04
   0B1F F8                 4098 	mov	r0,a
   0B20 E6                 4099 	mov	a,@r0
   0B21 24 F0              4100 	add	a,#_lnx_cal_rxdcc_data_hg
   0B23 F5 82              4101 	mov	dpl,a
   0B25 E4                 4102 	clr	a
   0B26 34 65              4103 	addc	a,#(_lnx_cal_rxdcc_data_hg >> 8)
   0B28 F5 83              4104 	mov	dph,a
   0B2A E0                 4105 	movx	a,@dptr
   0B2B 90 02 20           4106 	mov	dptr,#_UPHY14_TRX_ANAREG_TOP_136
   0B2E 13                 4107 	rrc	a
   0B2F E0                 4108 	movx	a,@dptr
   0B30 92 E1              4109 	mov	acc.1,c
   0B32 F0                 4110 	movx	@dptr,a
   0B33 D0 03              4111 	pop	ar3
   0B35 80 22              4112 	sjmp	00105$
   0B37                    4113 00104$:
                           4114 ;	../../shared/src/dcc_cal.c:490: lnx_RXDCC_DATA_CAL_PASS_LANE = 0;
   0B37 90 60 04           4115 	mov	dptr,#_CAL_CTRL2_LANE
   0B3A E0                 4116 	movx	a,@dptr
   0B3B 54 7F              4117 	anl	a,#0x7f
   0B3D F0                 4118 	movx	@dptr,a
                           4119 ;	../../shared/src/dcc_cal.c:491: RXDCC_CAL_EN = 1;
   0B3E 90 00 40           4120 	mov	dptr,#_UPHY14_TRX_ANAREG_BOT_16
   0B41 E0                 4121 	movx	a,@dptr
   0B42 44 01              4122 	orl	a,#0x01
   0B44 F0                 4123 	movx	@dptr,a
                           4124 ;	../../shared/src/dcc_cal.c:492: TRXDCCIN_SEL = 1;
   0B45 90 00 44           4125 	mov	dptr,#_UPHY14_TRX_ANAREG_BOT_17
   0B48 E0                 4126 	movx	a,@dptr
   0B49 54 1F              4127 	anl	a,#0x1f
   0B4B 44 20              4128 	orl	a,#0x20
   0B4D F0                 4129 	movx	@dptr,a
                           4130 ;	../../shared/src/dcc_cal.c:493: RXDCC_HG_DATACLK = 0;
   0B4E 90 02 20           4131 	mov	dptr,#_UPHY14_TRX_ANAREG_TOP_136
   0B51 E0                 4132 	movx	a,@dptr
   0B52 54 FD              4133 	anl	a,#0xfd
   0B54 F0                 4134 	movx	@dptr,a
                           4135 ;	../../shared/src/dcc_cal.c:494: dcc_cnt = 0x20;
   0B55 7F 20              4136 	mov	r7,#0x20
                           4137 ;	../../shared/src/dcc_cal.c:495: in_power_on = 1;
   0B57 7B 01              4138 	mov	r3,#0x01
   0B59                    4139 00105$:
                           4140 ;	../../shared/src/dcc_cal.c:497: RXDCC_EN_DATACLK = 1;                           //enable RXDCC_EN during power-on, never deassert
   0B59 C0 03              4141 	push	ar3
   0B5B 90 02 1C           4142 	mov	dptr,#_UPHY14_TRX_ANAREG_TOP_135
   0B5E E0                 4143 	movx	a,@dptr
   0B5F 44 01              4144 	orl	a,#0x01
   0B61 F0                 4145 	movx	@dptr,a
                           4146 ;	../../shared/src/dcc_cal.c:498: rxdcc_data_step_cnt = RXDCC_DATA_CAL_STEP_SIZE;      //for power-on (inc. EXT_EN), reset fraction code to middle
   0B62 90 E6 39           4147 	mov	dptr,#(_CON_CAL_STEP_SIZE2 + 0x0001)
   0B65 E0                 4148 	movx	a,@dptr
   0B66 90s00r00           4149 	mov	dptr,#_rxdcc_data_step_cnt
   0B69 F0                 4150 	movx	@dptr,a
   0B6A D0 03              4151 	pop	ar3
   0B6C 02s0Cr21           4152 	ljmp	00115$
   0B6F                    4153 00114$:
                           4154 ;	../../shared/src/dcc_cal.c:500: else if (LOAD_CAL_ON) {                         //not power-on. Speed-change, load result for current rate
   0B6F 90 60 08           4155 	mov	dptr,#_CAL_CTRL3_LANE
   0B72 E0                 4156 	movx	a,@dptr
   0B73 60 48              4157 	jz	00111$
                           4158 ;	../../shared/src/dcc_cal.c:502: dcc_cnt = lnx_cal_rxdcc_data[PWR + cmx_RXDCC_DATA_CAL_CONT_CUR_LOAD_EN][gen];
   0B75 C0 03              4159 	push	ar3
   0B77 90 E6 33           4160 	mov	dptr,#(_CONTROL_CONFIG9 + 0x0003)
   0B7A E0                 4161 	movx	a,@dptr
   0B7B 03                 4162 	rr	a
   0B7C 54 01              4163 	anl	a,#0x01
   0B7E 75 F0 05           4164 	mov	b,#0x05
   0B81 A4                 4165 	mul	ab
   0B82 24 E6              4166 	add	a,#_lnx_cal_rxdcc_data
   0B84 FB                 4167 	mov	r3,a
   0B85 E4                 4168 	clr	a
   0B86 34 65              4169 	addc	a,#(_lnx_cal_rxdcc_data >> 8)
   0B88 FA                 4170 	mov	r2,a
   0B89 E5*00              4171 	mov	a,_bp
   0B8B 24 04              4172 	add	a,#0x04
   0B8D F8                 4173 	mov	r0,a
   0B8E E6                 4174 	mov	a,@r0
   0B8F 2B                 4175 	add	a,r3
   0B90 F5 82              4176 	mov	dpl,a
   0B92 E4                 4177 	clr	a
   0B93 3A                 4178 	addc	a,r2
   0B94 F5 83              4179 	mov	dph,a
   0B96 E0                 4180 	movx	a,@dptr
   0B97 FF                 4181 	mov	r7,a
                           4182 ;	../../shared/src/dcc_cal.c:503: rxdcc_data_step_cnt = RXDCC_DATA_CAL_STEP_SIZE;     //when speed change, restore the fracition code to middle
   0B98 90 E6 39           4183 	mov	dptr,#(_CON_CAL_STEP_SIZE2 + 0x0001)
   0B9B E0                 4184 	movx	a,@dptr
   0B9C 90s00r00           4185 	mov	dptr,#_rxdcc_data_step_cnt
   0B9F F0                 4186 	movx	@dptr,a
                           4187 ;	../../shared/src/dcc_cal.c:504: RXDCC_HG_DATACLK = lnx_cal_rxdcc_data_hg[gen];          //load the HG setting.
   0BA0 E5*00              4188 	mov	a,_bp
   0BA2 24 04              4189 	add	a,#0x04
   0BA4 F8                 4190 	mov	r0,a
   0BA5 E6                 4191 	mov	a,@r0
   0BA6 24 F0              4192 	add	a,#_lnx_cal_rxdcc_data_hg
   0BA8 F5 82              4193 	mov	dpl,a
   0BAA E4                 4194 	clr	a
   0BAB 34 65              4195 	addc	a,#(_lnx_cal_rxdcc_data_hg >> 8)
   0BAD F5 83              4196 	mov	dph,a
   0BAF E0                 4197 	movx	a,@dptr
   0BB0 FA                 4198 	mov	r2,a
   0BB1 90 02 20           4199 	mov	dptr,#_UPHY14_TRX_ANAREG_TOP_136
   0BB4 13                 4200 	rrc	a
   0BB5 E0                 4201 	movx	a,@dptr
   0BB6 92 E1              4202 	mov	acc.1,c
   0BB8 F0                 4203 	movx	@dptr,a
   0BB9 D0 03              4204 	pop	ar3
   0BBB 80 64              4205 	sjmp	00115$
   0BBD                    4206 00111$:
                           4207 ;	../../shared/src/dcc_cal.c:506: else if (cmx_RXDCC_DATA_CAL_CONT_EN && RX_SPEED_DIV < 4 ) {  //not power-on. Continious mode, only performed when SPEED_DIV = 0
   0BBD 90 E6 0F           4208 	mov	dptr,#(_CONTROL_CONFIG2 + 0x0003)
   0BC0 E0                 4209 	movx	a,@dptr
   0BC1 30 E1 53           4210 	jnb	acc.1,00107$
   0BC4 90 02 28           4211 	mov	dptr,#_UPHY14_TRX_ANAREG_TOP_138
   0BC7 E0                 4212 	movx	a,@dptr
   0BC8 03                 4213 	rr	a
   0BC9 03                 4214 	rr	a
   0BCA 54 07              4215 	anl	a,#0x07
   0BCC FA                 4216 	mov	r2,a
   0BCD C3                 4217 	clr	c
   0BCE 64 80              4218 	xrl	a,#0x80
   0BD0 94 84              4219 	subb	a,#0x84
   0BD2 50 43              4220 	jnc	00107$
                           4221 ;	../../shared/src/dcc_cal.c:507: RXDCC_CAL_EN = 1;
   0BD4 90 00 40           4222 	mov	dptr,#_UPHY14_TRX_ANAREG_BOT_16
   0BD7 E0                 4223 	movx	a,@dptr
   0BD8 44 01              4224 	orl	a,#0x01
   0BDA F0                 4225 	movx	@dptr,a
                           4226 ;	../../shared/src/dcc_cal.c:508: TRXDCCIN_SEL = 1;
   0BDB 90 00 44           4227 	mov	dptr,#_UPHY14_TRX_ANAREG_BOT_17
   0BDE E0                 4228 	movx	a,@dptr
   0BDF 54 1F              4229 	anl	a,#0x1f
   0BE1 44 20              4230 	orl	a,#0x20
   0BE3 F0                 4231 	movx	@dptr,a
                           4232 ;	../../shared/src/dcc_cal.c:509: dcc_cnt = lnx_cal_rxdcc_data[CONT][gen];    //always load cont result
   0BE4 E5*00              4233 	mov	a,_bp
   0BE6 24 04              4234 	add	a,#0x04
   0BE8 F8                 4235 	mov	r0,a
   0BE9 E6                 4236 	mov	a,@r0
   0BEA 24 EB              4237 	add	a,#(_lnx_cal_rxdcc_data + 0x0005)
   0BEC F5 82              4238 	mov	dpl,a
   0BEE E4                 4239 	clr	a
   0BEF 34 65              4240 	addc	a,#((_lnx_cal_rxdcc_data + 0x0005) >> 8)
   0BF1 F5 83              4241 	mov	dph,a
   0BF3 E0                 4242 	movx	a,@dptr
   0BF4 FF                 4243 	mov	r7,a
                           4244 ;	../../shared/src/dcc_cal.c:510: RXDCC_HG_DATACLK = lnx_cal_rxdcc_data_hg[gen];          //load the HG setting.
   0BF5 E5*00              4245 	mov	a,_bp
   0BF7 24 04              4246 	add	a,#0x04
   0BF9 F8                 4247 	mov	r0,a
   0BFA E6                 4248 	mov	a,@r0
   0BFB 24 F0              4249 	add	a,#_lnx_cal_rxdcc_data_hg
   0BFD F5 82              4250 	mov	dpl,a
   0BFF E4                 4251 	clr	a
   0C00 34 65              4252 	addc	a,#(_lnx_cal_rxdcc_data_hg >> 8)
   0C02 F5 83              4253 	mov	dph,a
   0C04 E0                 4254 	movx	a,@dptr
   0C05 FA                 4255 	mov	r2,a
   0C06 90 02 20           4256 	mov	dptr,#_UPHY14_TRX_ANAREG_TOP_136
   0C09 13                 4257 	rrc	a
   0C0A E0                 4258 	movx	a,@dptr
   0C0B 92 E1              4259 	mov	acc.1,c
   0C0D F0                 4260 	movx	@dptr,a
                           4261 ;	../../shared/src/dcc_cal.c:511: in_cont_mode = 1;                                  //when continious mode, use fraction code
   0C0E E5*00              4262 	mov	a,_bp
   0C10 24 05              4263 	add	a,#0x05
   0C12 F8                 4264 	mov	r0,a
   0C13 76 01              4265 	mov	@r0,#0x01
   0C15 80 0A              4266 	sjmp	00115$
   0C17                    4267 00107$:
                           4268 ;	../../shared/src/dcc_cal.c:514: lnx_RXDCC_DATA_CAL_DONE_LANE = 1;
   0C17 90 60 00           4269 	mov	dptr,#_CAL_CTRL1_LANE
   0C1A E0                 4270 	movx	a,@dptr
   0C1B 44 80              4271 	orl	a,#0x80
   0C1D F0                 4272 	movx	@dptr,a
                           4273 ;	../../shared/src/dcc_cal.c:515: return;
   0C1E 02s0Er64           4274 	ljmp	00159$
   0C21                    4275 00115$:
                           4276 ;	../../shared/src/dcc_cal.c:518: hg_set = RXDCC_HG_DATACLK;
   0C21 90 02 20           4277 	mov	dptr,#_UPHY14_TRX_ANAREG_TOP_136
   0C24 E0                 4278 	movx	a,@dptr
   0C25 03                 4279 	rr	a
   0C26 54 01              4280 	anl	a,#0x01
   0C28 FA                 4281 	mov	r2,a
   0C29 E5*00              4282 	mov	a,_bp
   0C2B 24 06              4283 	add	a,#0x06
   0C2D F8                 4284 	mov	r0,a
   0C2E A6 02              4285 	mov	@r0,ar2
                           4286 ;	../../shared/src/dcc_cal.c:520: do {
   0C30                    4287 00154$:
                           4288 ;	../../shared/src/dcc_cal.c:521: RXDCC_DATACLK = dcc_cnt;
   0C30 8F 02              4289 	mov	ar2,r7
   0C32 90 02 20           4290 	mov	dptr,#_UPHY14_TRX_ANAREG_TOP_136
   0C35 EA                 4291 	mov	a,r2
   0C36 2A                 4292 	add	a,r2
   0C37 25 E0              4293 	add	a,acc
   0C39 54 FC              4294 	anl	a,#0xfc
   0C3B F5 F0              4295 	mov	b,a
   0C3D E0                 4296 	movx	a,@dptr
   0C3E 54 03              4297 	anl	a,#0x03
   0C40 45 F0              4298 	orl	a,b
   0C42 F0                 4299 	movx	@dptr,a
                           4300 ;	../../shared/src/dcc_cal.c:522: rxdcc_clk_toggle();
   0C43 C0 03              4301 	push	ar3
   0C45 C0 04              4302 	push	ar4
   0C47 C0 07              4303 	push	ar7
   0C49 78rF2              4304 	mov	r0,#_rxdcc_clk_toggle
   0C4B 79s06              4305 	mov	r1,#(_rxdcc_clk_toggle >> 8)
   0C4D 7As00              4306 	mov	r2,#(_rxdcc_clk_toggle >> 16)
   0C4F 12s00r00           4307 	lcall	__sdcc_banked_call
   0C52 D0 07              4308 	pop	ar7
   0C54 D0 04              4309 	pop	ar4
   0C56 D0 03              4310 	pop	ar3
                           4311 ;	../../shared/src/dcc_cal.c:524: time_out_cnt ++;
   0C58 0C                 4312 	inc	r4
                           4313 ;	../../shared/src/dcc_cal.c:525: if( RXDCC_CAL_EN == 0 ) break;                                      //either LOAD, or EXT_EN in power-on
   0C59 90 00 40           4314 	mov	dptr,#_UPHY14_TRX_ANAREG_BOT_16
   0C5C E0                 4315 	movx	a,@dptr
   0C5D 20 E0 03           4316 	jb	acc.0,00200$
   0C60 02s0Er0F           4317 	ljmp	00156$
   0C63                    4318 00200$:
                           4319 ;	../../shared/src/dcc_cal.c:526: if( lnx_CAL_DONE_LANE == 0 && RX_SPEED_DIV > 3 ) break;                  //power-on, but SPEED_DIV = 1xx, skip and keep using init code (0x20)
   0C63 90 60 03           4320 	mov	dptr,#(_CAL_CTRL1_LANE + 0x0003)
   0C66 E0                 4321 	movx	a,@dptr
   0C67 20 E0 18           4322 	jb	acc.0,00119$
   0C6A 90 02 28           4323 	mov	dptr,#_UPHY14_TRX_ANAREG_TOP_138
   0C6D E0                 4324 	movx	a,@dptr
   0C6E 03                 4325 	rr	a
   0C6F 03                 4326 	rr	a
   0C70 54 07              4327 	anl	a,#0x07
   0C72 FA                 4328 	mov	r2,a
   0C73 C3                 4329 	clr	c
   0C74 74 83              4330 	mov	a,#(0x03 ^ 0x80)
   0C76 8A F0              4331 	mov	b,r2
   0C78 63 F0 80           4332 	xrl	b,#0x80
   0C7B 95 F0              4333 	subb	a,b
   0C7D 50 03              4334 	jnc	00202$
   0C7F 02s0Er0F           4335 	ljmp	00156$
   0C82                    4336 00202$:
   0C82                    4337 00119$:
                           4338 ;	../../shared/src/dcc_cal.c:527: if( lnx_CAL_DONE_LANE == 1 && time_out_cnt > 1) break;                   //continious mode, has ran 1 round
   0C82 90 60 03           4339 	mov	dptr,#(_CAL_CTRL1_LANE + 0x0003)
   0C85 E0                 4340 	movx	a,@dptr
   0C86 54 01              4341 	anl	a,#0x01
   0C88 FA                 4342 	mov	r2,a
   0C89 BA 01 0A           4343 	cjne	r2,#0x01,00122$
   0C8C 74 01              4344 	mov	a,#0x01
   0C8E B5 04 00           4345 	cjne	a,ar4,00205$
   0C91                    4346 00205$:
   0C91 50 03              4347 	jnc	00206$
   0C93 02s0Er0F           4348 	ljmp	00156$
   0C96                    4349 00206$:
   0C96                    4350 00122$:
                           4351 ;	../../shared/src/dcc_cal.c:528: if( lnx_CAL_DONE_LANE == 0 && is_toggle_pat( dir, time_out_cnt - 1 ))  { lnx_RXDCC_DATA_CAL_PASS_LANE = 1;  break; }     //power-on, toggled
   0C96 90 60 03           4352 	mov	dptr,#(_CAL_CTRL1_LANE + 0x0003)
   0C99 E0                 4353 	movx	a,@dptr
   0C9A 20 E0 31           4354 	jb	acc.0,00125$
   0C9D EC                 4355 	mov	a,r4
   0C9E 14                 4356 	dec	a
   0C9F FA                 4357 	mov	r2,a
   0CA0 C0 03              4358 	push	ar3
   0CA2 C0 04              4359 	push	ar4
   0CA4 C0 07              4360 	push	ar7
   0CA6 C0 02              4361 	push	ar2
   0CA8 E5*00              4362 	mov	a,_bp
   0CAA 24 03              4363 	add	a,#0x03
   0CAC F8                 4364 	mov	r0,a
   0CAD 86 82              4365 	mov	dpl,@r0
   0CAF 78r00              4366 	mov	r0,#_is_toggle_pat
   0CB1 79s00              4367 	mov	r1,#(_is_toggle_pat >> 8)
   0CB3 7As00              4368 	mov	r2,#(_is_toggle_pat >> 16)
   0CB5 12s00r00           4369 	lcall	__sdcc_banked_call
   0CB8 15 81              4370 	dec	sp
   0CBA D0 07              4371 	pop	ar7
   0CBC D0 04              4372 	pop	ar4
   0CBE D0 03              4373 	pop	ar3
   0CC0 92*00              4374 	mov	b0,c
   0CC2 50 0A              4375 	jnc	00125$
   0CC4 90 60 04           4376 	mov	dptr,#_CAL_CTRL2_LANE
   0CC7 E0                 4377 	movx	a,@dptr
   0CC8 44 80              4378 	orl	a,#0x80
   0CCA F0                 4379 	movx	@dptr,a
   0CCB 02s0Er0F           4380 	ljmp	00156$
   0CCE                    4381 00125$:
                           4382 ;	../../shared/src/dcc_cal.c:529: if( lnx_CAL_DONE_LANE == 0 && time_out_cnt >= RXDCC_DATA_LOOP_MAX && cmx_RXDCC_DATA_CAL_TIMEOUT_DIS == 0) break; //power-on, reached maximum rounds
   0CCE 90 60 03           4383 	mov	dptr,#(_CAL_CTRL1_LANE + 0x0003)
   0CD1 E0                 4384 	movx	a,@dptr
   0CD2 20 E0 0F           4385 	jb	acc.0,00128$
   0CD5 BC 40 00           4386 	cjne	r4,#0x40,00210$
   0CD8                    4387 00210$:
   0CD8 40 0A              4388 	jc	00128$
   0CDA 90 E6 48           4389 	mov	dptr,#_CAL_TIME_OUT_AND_DIS
   0CDD E0                 4390 	movx	a,@dptr
   0CDE 20 E1 03           4391 	jb	acc.1,00212$
   0CE1 02s0Er0F           4392 	ljmp	00156$
   0CE4                    4393 00212$:
   0CE4                    4394 00128$:
                           4395 ;	../../shared/src/dcc_cal.c:531: latched_RXDCC_DN = TXDCC_DN;   //RXDCC shares TXDCC up/dn
   0CE4 90 20 40           4396 	mov	dptr,#_TX_CALIBRATION_LANE
   0CE7 E0                 4397 	movx	a,@dptr
   0CE8 54 01              4398 	anl	a,#0x01
   0CEA FA                 4399 	mov	r2,a
                           4400 ;	../../shared/src/dcc_cal.c:532: int_up = 0;
   0CEB A8*00              4401 	mov	r0,_bp
   0CED 08                 4402 	inc	r0
   0CEE 08                 4403 	inc	r0
   0CEF 76 00              4404 	mov	@r0,#0x00
                           4405 ;	../../shared/src/dcc_cal.c:533: int_dn = 0;
   0CF1 A8*00              4406 	mov	r0,_bp
   0CF3 08                 4407 	inc	r0
   0CF4 76 00              4408 	mov	@r0,#0x00
                           4409 ;	../../shared/src/dcc_cal.c:535: if (in_cont_mode) { //continious calibration
   0CF6 E5*00              4410 	mov	a,_bp
   0CF8 24 05              4411 	add	a,#0x05
   0CFA F8                 4412 	mov	r0,a
   0CFB E6                 4413 	mov	a,@r0
   0CFC 60 6C              4414 	jz	00143$
                           4415 ;	../../shared/src/dcc_cal.c:536: if (latched_RXDCC_DN) {rxdcc_data_step_cnt--;}
   0CFE EA                 4416 	mov	a,r2
   0CFF 60 0B              4417 	jz	00132$
   0D01 90s00r00           4418 	mov	dptr,#_rxdcc_data_step_cnt
   0D04 E0                 4419 	movx	a,@dptr
   0D05 14                 4420 	dec	a
   0D06 90s00r00           4421 	mov	dptr,#_rxdcc_data_step_cnt
   0D09 F0                 4422 	movx	@dptr,a
   0D0A 80 07              4423 	sjmp	00133$
   0D0C                    4424 00132$:
                           4425 ;	../../shared/src/dcc_cal.c:537: else                  {rxdcc_data_step_cnt++;}
   0D0C 90s00r00           4426 	mov	dptr,#_rxdcc_data_step_cnt
   0D0F E0                 4427 	movx	a,@dptr
   0D10 24 01              4428 	add	a,#0x01
   0D12 F0                 4429 	movx	@dptr,a
   0D13                    4430 00133$:
                           4431 ;	../../shared/src/dcc_cal.c:539: if( rxdcc_data_step_cnt == 0) {
   0D13 90s00r00           4432 	mov	dptr,#_rxdcc_data_step_cnt
   0D16 E0                 4433 	movx	a,@dptr
   0D17 FA                 4434 	mov	r2,a
   0D18 70 19              4435 	jnz	00137$
                           4436 ;	../../shared/src/dcc_cal.c:540: int_up = 0;
   0D1A C0 03              4437 	push	ar3
   0D1C A8*00              4438 	mov	r0,_bp
   0D1E 08                 4439 	inc	r0
   0D1F 08                 4440 	inc	r0
   0D20 76 00              4441 	mov	@r0,#0x00
                           4442 ;	../../shared/src/dcc_cal.c:541: int_dn = 1;
   0D22 A8*00              4443 	mov	r0,_bp
   0D24 08                 4444 	inc	r0
   0D25 76 01              4445 	mov	@r0,#0x01
                           4446 ;	../../shared/src/dcc_cal.c:542: rxdcc_data_step_cnt = RXDCC_DATA_CAL_STEP_SIZE;  //after up/dn triggered, reset fraction code to middle
   0D27 90 E6 39           4447 	mov	dptr,#(_CON_CAL_STEP_SIZE2 + 0x0001)
   0D2A E0                 4448 	movx	a,@dptr
   0D2B 90s00r00           4449 	mov	dptr,#_rxdcc_data_step_cnt
   0D2E F0                 4450 	movx	@dptr,a
   0D2F D0 03              4451 	pop	ar3
   0D31 80 52              4452 	sjmp	00144$
   0D33                    4453 00137$:
                           4454 ;	../../shared/src/dcc_cal.c:544: else if(rxdcc_data_step_cnt>=(RXDCC_DATA_CAL_STEP_SIZE<<1)) {
   0D33 C0 03              4455 	push	ar3
   0D35 90 E6 39           4456 	mov	dptr,#(_CON_CAL_STEP_SIZE2 + 0x0001)
   0D38 E0                 4457 	movx	a,@dptr
   0D39 FB                 4458 	mov	r3,a
   0D3A E4                 4459 	clr	a
   0D3B CB                 4460 	xch	a,r3
   0D3C 25 E0              4461 	add	a,acc
   0D3E CB                 4462 	xch	a,r3
   0D3F 33                 4463 	rlc	a
   0D40 FE                 4464 	mov	r6,a
   0D41 7D 00              4465 	mov	r5,#0x00
   0D43 C3                 4466 	clr	c
   0D44 EA                 4467 	mov	a,r2
   0D45 9B                 4468 	subb	a,r3
   0D46 ED                 4469 	mov	a,r5
   0D47 64 80              4470 	xrl	a,#0x80
   0D49 8E F0              4471 	mov	b,r6
   0D4B 63 F0 80           4472 	xrl	b,#0x80
   0D4E 95 F0              4473 	subb	a,b
   0D50 D0 03              4474 	pop	ar3
   0D52 40 31              4475 	jc	00144$
                           4476 ;	../../shared/src/dcc_cal.c:545: int_up = 1;
   0D54 A8*00              4477 	mov	r0,_bp
   0D56 08                 4478 	inc	r0
   0D57 08                 4479 	inc	r0
   0D58 76 01              4480 	mov	@r0,#0x01
                           4481 ;	../../shared/src/dcc_cal.c:546: int_dn = 0;
   0D5A A8*00              4482 	mov	r0,_bp
   0D5C 08                 4483 	inc	r0
   0D5D 76 00              4484 	mov	@r0,#0x00
                           4485 ;	../../shared/src/dcc_cal.c:547: rxdcc_data_step_cnt = RXDCC_DATA_CAL_STEP_SIZE;  //after up/dn triggered, reset fraction code to middle
   0D5F 90 E6 39           4486 	mov	dptr,#(_CON_CAL_STEP_SIZE2 + 0x0001)
   0D62 E0                 4487 	movx	a,@dptr
   0D63 FA                 4488 	mov	r2,a
   0D64 90s00r00           4489 	mov	dptr,#_rxdcc_data_step_cnt
   0D67 F0                 4490 	movx	@dptr,a
   0D68 80 1B              4491 	sjmp	00144$
   0D6A                    4492 00143$:
                           4493 ;	../../shared/src/dcc_cal.c:551: if (latched_RXDCC_DN) {int_up = 0; int_dn = 1;}
   0D6A EA                 4494 	mov	a,r2
   0D6B 60 0D              4495 	jz	00140$
   0D6D A8*00              4496 	mov	r0,_bp
   0D6F 08                 4497 	inc	r0
   0D70 08                 4498 	inc	r0
   0D71 76 00              4499 	mov	@r0,#0x00
   0D73 A8*00              4500 	mov	r0,_bp
   0D75 08                 4501 	inc	r0
   0D76 76 01              4502 	mov	@r0,#0x01
   0D78 80 0B              4503 	sjmp	00144$
   0D7A                    4504 00140$:
                           4505 ;	../../shared/src/dcc_cal.c:552: else                  {int_up = 1; int_dn = 0;}
   0D7A A8*00              4506 	mov	r0,_bp
   0D7C 08                 4507 	inc	r0
   0D7D 08                 4508 	inc	r0
   0D7E 76 01              4509 	mov	@r0,#0x01
   0D80 A8*00              4510 	mov	r0,_bp
   0D82 08                 4511 	inc	r0
   0D83 76 00              4512 	mov	@r0,#0x00
   0D85                    4513 00144$:
                           4514 ;	../../shared/src/dcc_cal.c:555: if (int_dn == 1) {
   0D85 A8*00              4515 	mov	r0,_bp
   0D87 08                 4516 	inc	r0
   0D88 B6 01 19           4517 	cjne	@r0,#0x01,00148$
                           4518 ;	../../shared/src/dcc_cal.c:556: dcc_cnt = sign_abs_dn(dcc_cnt);
   0D8B 8F 82              4519 	mov	dpl,r7
   0D8D C0 03              4520 	push	ar3
   0D8F C0 04              4521 	push	ar4
   0D91 78r00              4522 	mov	r0,#_sign_abs_dn
   0D93 79s00              4523 	mov	r1,#(_sign_abs_dn >> 8)
   0D95 7As00              4524 	mov	r2,#(_sign_abs_dn >> 16)
   0D97 12s00r00           4525 	lcall	__sdcc_banked_call
   0D9A AA 82              4526 	mov	r2,dpl
   0D9C D0 04              4527 	pop	ar4
   0D9E D0 03              4528 	pop	ar3
   0DA0 8A 07              4529 	mov	ar7,r2
   0DA2 80 27              4530 	sjmp	00149$
   0DA4                    4531 00148$:
                           4532 ;	../../shared/src/dcc_cal.c:558: else if (int_up == 1) {
   0DA4 A8*00              4533 	mov	r0,_bp
   0DA6 08                 4534 	inc	r0
   0DA7 08                 4535 	inc	r0
   0DA8 B6 01 20           4536 	cjne	@r0,#0x01,00149$
                           4537 ;	../../shared/src/dcc_cal.c:559: dir |= 1;
   0DAB E5*00              4538 	mov	a,_bp
   0DAD 24 03              4539 	add	a,#0x03
   0DAF F8                 4540 	mov	r0,a
   0DB0 E6                 4541 	mov	a,@r0
   0DB1 44 01              4542 	orl	a,#0x01
   0DB3 F6                 4543 	mov	@r0,a
                           4544 ;	../../shared/src/dcc_cal.c:560: dcc_cnt = sign_abs_up(dcc_cnt);
   0DB4 8F 82              4545 	mov	dpl,r7
   0DB6 C0 03              4546 	push	ar3
   0DB8 C0 04              4547 	push	ar4
   0DBA 78r00              4548 	mov	r0,#_sign_abs_up
   0DBC 79s00              4549 	mov	r1,#(_sign_abs_up >> 8)
   0DBE 7As00              4550 	mov	r2,#(_sign_abs_up >> 16)
   0DC0 12s00r00           4551 	lcall	__sdcc_banked_call
   0DC3 AA 82              4552 	mov	r2,dpl
   0DC5 D0 04              4553 	pop	ar4
   0DC7 D0 03              4554 	pop	ar3
   0DC9 8A 07              4555 	mov	ar7,r2
   0DCB                    4556 00149$:
                           4557 ;	../../shared/src/dcc_cal.c:562: dir<<=1;
   0DCB E5*00              4558 	mov	a,_bp
   0DCD 24 03              4559 	add	a,#0x03
   0DCF F8                 4560 	mov	r0,a
   0DD0 E6                 4561 	mov	a,@r0
   0DD1 25 E0              4562 	add	a,acc
   0DD3 F6                 4563 	mov	@r0,a
                           4564 ;	../../shared/src/dcc_cal.c:563: dir = dir & 0x3f;
   0DD4 E5*00              4565 	mov	a,_bp
   0DD6 24 03              4566 	add	a,#0x03
   0DD8 F8                 4567 	mov	r0,a
   0DD9 E6                 4568 	mov	a,@r0
   0DDA 54 3F              4569 	anl	a,#0x3F
   0DDC F6                 4570 	mov	@r0,a
                           4571 ;	../../shared/src/dcc_cal.c:568: if (in_power_on && ( ( dcc_cnt & 0x1f ) == 24) && (hg_set == 0)){
   0DDD EB                 4572 	mov	a,r3
   0DDE 70 03              4573 	jnz	00222$
   0DE0 02s0Cr30           4574 	ljmp	00154$
   0DE3                    4575 00222$:
   0DE3 74 1F              4576 	mov	a,#0x1F
   0DE5 5F                 4577 	anl	a,r7
   0DE6 FA                 4578 	mov	r2,a
   0DE7 BA 18 02           4579 	cjne	r2,#0x18,00223$
   0DEA 80 03              4580 	sjmp	00224$
   0DEC                    4581 00223$:
   0DEC 02s0Cr30           4582 	ljmp	00154$
   0DEF                    4583 00224$:
   0DEF E5*00              4584 	mov	a,_bp
   0DF1 24 06              4585 	add	a,#0x06
   0DF3 F8                 4586 	mov	r0,a
   0DF4 E6                 4587 	mov	a,@r0
   0DF5 60 03              4588 	jz	00225$
   0DF7 02s0Cr30           4589 	ljmp	00154$
   0DFA                    4590 00225$:
                           4591 ;	../../shared/src/dcc_cal.c:569: RXDCC_HG_DATACLK = 1;
   0DFA 90 02 20           4592 	mov	dptr,#_UPHY14_TRX_ANAREG_TOP_136
   0DFD E0                 4593 	movx	a,@dptr
   0DFE 44 02              4594 	orl	a,#0x02
   0E00 F0                 4595 	movx	@dptr,a
                           4596 ;	../../shared/src/dcc_cal.c:570: hg_set = 1;
   0E01 E5*00              4597 	mov	a,_bp
   0E03 24 06              4598 	add	a,#0x06
   0E05 F8                 4599 	mov	r0,a
   0E06 76 01              4600 	mov	@r0,#0x01
                           4601 ;	../../shared/src/dcc_cal.c:571: dcc_cnt = 0x20;
   0E08 7F 20              4602 	mov	r7,#0x20
                           4603 ;	../../shared/src/dcc_cal.c:572: time_out_cnt = 0;
   0E0A 7C 00              4604 	mov	r4,#0x00
                           4605 ;	../../shared/src/dcc_cal.c:574: } while (1);
   0E0C 02s0Cr30           4606 	ljmp	00154$
   0E0F                    4607 00156$:
                           4608 ;	../../shared/src/dcc_cal.c:577: if (lnx_CAL_DONE_LANE == 0) {                            //if power-on calibration
   0E0F 90 60 03           4609 	mov	dptr,#(_CAL_CTRL1_LANE + 0x0003)
   0E12 E0                 4610 	movx	a,@dptr
   0E13 20 E0 2F           4611 	jb	acc.0,00158$
                           4612 ;	../../shared/src/dcc_cal.c:578: lnx_cal_rxdcc_data[PWR][gen] = dcc_cnt;       //save to power-on result
   0E16 E5*00              4613 	mov	a,_bp
   0E18 24 04              4614 	add	a,#0x04
   0E1A F8                 4615 	mov	r0,a
   0E1B E6                 4616 	mov	a,@r0
   0E1C 24 E6              4617 	add	a,#_lnx_cal_rxdcc_data
   0E1E F5 82              4618 	mov	dpl,a
   0E20 E4                 4619 	clr	a
   0E21 34 65              4620 	addc	a,#(_lnx_cal_rxdcc_data >> 8)
   0E23 F5 83              4621 	mov	dph,a
   0E25 EF                 4622 	mov	a,r7
   0E26 F0                 4623 	movx	@dptr,a
                           4624 ;	../../shared/src/dcc_cal.c:579: lnx_cal_rxdcc_data_hg[gen] = (RXDCC_HG_DATACLK & 0x01) | 0x0; //save the HG setting for current rate, will be loaded by continious mode
   0E27 E5*00              4625 	mov	a,_bp
   0E29 24 04              4626 	add	a,#0x04
   0E2B F8                 4627 	mov	r0,a
   0E2C E6                 4628 	mov	a,@r0
   0E2D 24 F0              4629 	add	a,#_lnx_cal_rxdcc_data_hg
   0E2F FA                 4630 	mov	r2,a
   0E30 E4                 4631 	clr	a
   0E31 34 65              4632 	addc	a,#(_lnx_cal_rxdcc_data_hg >> 8)
   0E33 FB                 4633 	mov	r3,a
   0E34 90 02 20           4634 	mov	dptr,#_UPHY14_TRX_ANAREG_TOP_136
   0E37 E0                 4635 	movx	a,@dptr
   0E38 03                 4636 	rr	a
   0E39 54 01              4637 	anl	a,#0x01
   0E3B FC                 4638 	mov	r4,a
   0E3C 53 04 01           4639 	anl	ar4,#0x01
   0E3F 8A 82              4640 	mov	dpl,r2
   0E41 8B 83              4641 	mov	dph,r3
   0E43 EC                 4642 	mov	a,r4
   0E44 F0                 4643 	movx	@dptr,a
   0E45                    4644 00158$:
                           4645 ;	../../shared/src/dcc_cal.c:582: lnx_cal_rxdcc_data[CONT][gen] = dcc_cnt;     //no matter power-on or LOAD or continious, need to save to [CONT]
   0E45 E5*00              4646 	mov	a,_bp
   0E47 24 04              4647 	add	a,#0x04
   0E49 F8                 4648 	mov	r0,a
   0E4A E6                 4649 	mov	a,@r0
   0E4B 24 EB              4650 	add	a,#(_lnx_cal_rxdcc_data + 0x0005)
   0E4D F5 82              4651 	mov	dpl,a
   0E4F E4                 4652 	clr	a
   0E50 34 65              4653 	addc	a,#((_lnx_cal_rxdcc_data + 0x0005) >> 8)
   0E52 F5 83              4654 	mov	dph,a
   0E54 EF                 4655 	mov	a,r7
   0E55 F0                 4656 	movx	@dptr,a
                           4657 ;	../../shared/src/dcc_cal.c:584: RXDCC_CAL_EN = 0;
   0E56 90 00 40           4658 	mov	dptr,#_UPHY14_TRX_ANAREG_BOT_16
   0E59 E0                 4659 	movx	a,@dptr
   0E5A 54 FE              4660 	anl	a,#0xfe
   0E5C F0                 4661 	movx	@dptr,a
                           4662 ;	../../shared/src/dcc_cal.c:585: lnx_RXDCC_DATA_CAL_DONE_LANE = 1;
   0E5D 90 60 00           4663 	mov	dptr,#_CAL_CTRL1_LANE
   0E60 E0                 4664 	movx	a,@dptr
   0E61 44 80              4665 	orl	a,#0x80
   0E63 F0                 4666 	movx	@dptr,a
   0E64                    4667 00159$:
   0E64 85*00 81           4668 	mov	sp,_bp
   0E67 D0*00              4669 	pop	_bp
   0E69 02s00r00           4670 	ljmp	__sdcc_banked_ret
                           4671 ;------------------------------------------------------------
                           4672 ;Allocation info for local variables in function 'rxdcc_eom_cal'
                           4673 ;------------------------------------------------------------
                           4674 ;dcc_cnt                   Allocated to registers r3 
                           4675 ;latched_RXDCC_DN          Allocated to registers r2 
                           4676 ;int_dn                    Allocated to stack - offset 1
                           4677 ;int_up                    Allocated to stack - offset 2
                           4678 ;dir                       Allocated to stack - offset 3
                           4679 ;gen                       Allocated to stack - offset 4
                           4680 ;time_out_cnt              Allocated to registers r4 
                           4681 ;in_power_on               Allocated to stack - offset 5
                           4682 ;in_cont_mode              Allocated to stack - offset 6
                           4683 ;ext_en                    Allocated to registers r3 
                           4684 ;saved_eom_clk_en          Allocated to registers r5 
                           4685 ;hg_set                    Allocated to stack - offset 7
                           4686 ;sloc0                     Allocated to stack - offset 13
                           4687 ;------------------------------------------------------------
                           4688 ;	../../shared/src/dcc_cal.c:590: void rxdcc_eom_cal(void) BANKING_CTRL {
                           4689 ;	-----------------------------------------
                           4690 ;	 function rxdcc_eom_cal
                           4691 ;	-----------------------------------------
   0E6C                    4692 _rxdcc_eom_cal:
   0E6C C0*00              4693 	push	_bp
   0E6E E5 81              4694 	mov	a,sp
   0E70 F5*00              4695 	mov	_bp,a
   0E72 24 07              4696 	add	a,#0x07
   0E74 F5 81              4697 	mov	sp,a
                           4698 ;	../../shared/src/dcc_cal.c:603: PHY_STATUS = ST_RXDCC_EOM_CAL;
   0E76 90 22 30           4699 	mov	dptr,#_MCU_STATUS0_LANE
   0E79 74 11              4700 	mov	a,#0x11
   0E7B F0                 4701 	movx	@dptr,a
                           4702 ;	../../shared/src/dcc_cal.c:605: lnx_RXDCC_EOM_CAL_DONE_LANE = 0;
   0E7C 90 60 01           4703 	mov	dptr,#(_CAL_CTRL1_LANE + 0x0001)
   0E7F E0                 4704 	movx	a,@dptr
   0E80 54 FE              4705 	anl	a,#0xfe
   0E82 F0                 4706 	movx	@dptr,a
                           4707 ;	../../shared/src/dcc_cal.c:608: in_cont_mode = 0;
   0E83 E5*00              4708 	mov	a,_bp
   0E85 24 06              4709 	add	a,#0x06
   0E87 F8                 4710 	mov	r0,a
   0E88 76 00              4711 	mov	@r0,#0x00
                           4712 ;	../../shared/src/dcc_cal.c:609: in_power_on = 0;
   0E8A E5*00              4713 	mov	a,_bp
   0E8C 24 05              4714 	add	a,#0x05
   0E8E F8                 4715 	mov	r0,a
   0E8F 76 00              4716 	mov	@r0,#0x00
                           4717 ;	../../shared/src/dcc_cal.c:610: time_out_cnt = 0;
   0E91 7C 00              4718 	mov	r4,#0x00
                           4719 ;	../../shared/src/dcc_cal.c:611: saved_eom_clk_en = 1;
   0E93 7D 01              4720 	mov	r5,#0x01
                           4721 ;	../../shared/src/dcc_cal.c:612: dir = 0;
   0E95 E5*00              4722 	mov	a,_bp
   0E97 24 03              4723 	add	a,#0x03
   0E99 F8                 4724 	mov	r0,a
   0E9A 76 00              4725 	mov	@r0,#0x00
                           4726 ;	../../shared/src/dcc_cal.c:614: gen = gen_rx;
   0E9C 90s00r00           4727 	mov	dptr,#_gen_rx
   0E9F E0                 4728 	movx	a,@dptr
   0EA0 FF                 4729 	mov	r7,a
   0EA1 E5*00              4730 	mov	a,_bp
   0EA3 24 04              4731 	add	a,#0x04
   0EA5 F8                 4732 	mov	r0,a
   0EA6 A6 07              4733 	mov	@r0,ar7
                           4734 ;	../../shared/src/dcc_cal.c:615: if(phy_mode == SERDES) gen = 0;
   0EA8 90 A3 16           4735 	mov	dptr,#(_SYSTEM + 0x0002)
   0EAB E0                 4736 	movx	a,@dptr
   0EAC 54 07              4737 	anl	a,#0x07
   0EAE FB                 4738 	mov	r3,a
   0EAF BB 04 07           4739 	cjne	r3,#0x04,00102$
   0EB2 E5*00              4740 	mov	a,_bp
   0EB4 24 04              4741 	add	a,#0x04
   0EB6 F8                 4742 	mov	r0,a
   0EB7 76 00              4743 	mov	@r0,#0x00
   0EB9                    4744 00102$:
                           4745 ;	../../shared/src/dcc_cal.c:618: if (lnx_CAL_DONE_LANE == 0) {                        //power-on calibration
   0EB9 90 60 03           4746 	mov	dptr,#(_CAL_CTRL1_LANE + 0x0003)
   0EBC E0                 4747 	movx	a,@dptr
   0EBD 30 E0 03           4748 	jnb	acc.0,00198$
   0EC0 02s0Fr57           4749 	ljmp	00115$
   0EC3                    4750 00198$:
                           4751 ;	../../shared/src/dcc_cal.c:619: ext_en = cmx_EXT_FORCE_CAL_DONE || cmx_RXDCC_EOM_CAL_EXT_EN;
   0EC3 90 E6 06           4752 	mov	dptr,#(_CONTROL_CONFIG0 + 0x0002)
   0EC6 E0                 4753 	movx	a,@dptr
   0EC7 20 E1 0B           4754 	jb	acc.1,00165$
   0ECA 90 E6 0A           4755 	mov	dptr,#(_CONTROL_CONFIG1 + 0x0002)
   0ECD E0                 4756 	movx	a,@dptr
   0ECE 20 E1 04           4757 	jb	acc.1,00165$
   0ED1 7B 00              4758 	mov	r3,#0x00
   0ED3 80 02              4759 	sjmp	00166$
   0ED5                    4760 00165$:
   0ED5 7B 01              4761 	mov	r3,#0x01
   0ED7                    4762 00166$:
                           4763 ;	../../shared/src/dcc_cal.c:620: if (ext_en){                                     //use ext value for power-on, bypass calibration
   0ED7 EB                 4764 	mov	a,r3
   0ED8 60 2F              4765 	jz	00104$
                           4766 ;	../../shared/src/dcc_cal.c:621: dcc_cnt = lnx_cal_rxdcc_eom[PWR][gen];
   0EDA C0 05              4767 	push	ar5
   0EDC E5*00              4768 	mov	a,_bp
   0EDE 24 04              4769 	add	a,#0x04
   0EE0 F8                 4770 	mov	r0,a
   0EE1 E6                 4771 	mov	a,@r0
   0EE2 24 F5              4772 	add	a,#_lnx_cal_rxdcc_eom
   0EE4 F5 82              4773 	mov	dpl,a
   0EE6 E4                 4774 	clr	a
   0EE7 34 65              4775 	addc	a,#(_lnx_cal_rxdcc_eom >> 8)
   0EE9 F5 83              4776 	mov	dph,a
   0EEB E0                 4777 	movx	a,@dptr
   0EEC FB                 4778 	mov	r3,a
                           4779 ;	../../shared/src/dcc_cal.c:622: RXDCC_HG_EOMCLK = lnx_cal_rxdcc_eom_hg[gen];          //load the HG setting.
   0EED E5*00              4780 	mov	a,_bp
   0EEF 24 04              4781 	add	a,#0x04
   0EF1 F8                 4782 	mov	r0,a
   0EF2 E6                 4783 	mov	a,@r0
   0EF3 24 FF              4784 	add	a,#_lnx_cal_rxdcc_eom_hg
   0EF5 F5 82              4785 	mov	dpl,a
   0EF7 E4                 4786 	clr	a
   0EF8 34 65              4787 	addc	a,#(_lnx_cal_rxdcc_eom_hg >> 8)
   0EFA F5 83              4788 	mov	dph,a
   0EFC E0                 4789 	movx	a,@dptr
   0EFD 90 00 40           4790 	mov	dptr,#_UPHY14_TRX_ANAREG_BOT_16
   0F00 13                 4791 	rrc	a
   0F01 E0                 4792 	movx	a,@dptr
   0F02 92 E1              4793 	mov	acc.1,c
   0F04 F0                 4794 	movx	@dptr,a
   0F05 D0 05              4795 	pop	ar5
   0F07 80 38              4796 	sjmp	00105$
   0F09                    4797 00104$:
                           4798 ;	../../shared/src/dcc_cal.c:625: lnx_RXDCC_EOM_CAL_PASS_LANE = 0; // clear pass flag for normal power-on cal
   0F09 90 60 05           4799 	mov	dptr,#(_CAL_CTRL2_LANE + 0x0001)
   0F0C E0                 4800 	movx	a,@dptr
   0F0D 54 FE              4801 	anl	a,#0xfe
   0F0F F0                 4802 	movx	@dptr,a
                           4803 ;	../../shared/src/dcc_cal.c:626: saved_eom_clk_en = EOM_CLK_EN;
   0F10 90 02 18           4804 	mov	dptr,#_UPHY14_TRX_ANAREG_TOP_134
   0F13 E0                 4805 	movx	a,@dptr
   0F14 03                 4806 	rr	a
   0F15 03                 4807 	rr	a
   0F16 54 01              4808 	anl	a,#0x01
   0F18 FA                 4809 	mov	r2,a
   0F19 FD                 4810 	mov	r5,a
                           4811 ;	../../shared/src/dcc_cal.c:627: EOM_CLK_EN = 1;
   0F1A 90 02 18           4812 	mov	dptr,#_UPHY14_TRX_ANAREG_TOP_134
   0F1D E0                 4813 	movx	a,@dptr
   0F1E 44 04              4814 	orl	a,#0x04
   0F20 F0                 4815 	movx	@dptr,a
                           4816 ;	../../shared/src/dcc_cal.c:628: RXDCC_CAL_EN = 1;
   0F21 90 00 40           4817 	mov	dptr,#_UPHY14_TRX_ANAREG_BOT_16
   0F24 E0                 4818 	movx	a,@dptr
   0F25 44 01              4819 	orl	a,#0x01
   0F27 F0                 4820 	movx	@dptr,a
                           4821 ;	../../shared/src/dcc_cal.c:629: TRXDCCIN_SEL = 2;
   0F28 90 00 44           4822 	mov	dptr,#_UPHY14_TRX_ANAREG_BOT_17
   0F2B E0                 4823 	movx	a,@dptr
   0F2C 54 1F              4824 	anl	a,#0x1f
   0F2E 44 40              4825 	orl	a,#0x40
   0F30 F0                 4826 	movx	@dptr,a
                           4827 ;	../../shared/src/dcc_cal.c:630: RXDCC_HG_EOMCLK = 0;
   0F31 90 00 40           4828 	mov	dptr,#_UPHY14_TRX_ANAREG_BOT_16
   0F34 E0                 4829 	movx	a,@dptr
   0F35 54 FD              4830 	anl	a,#0xfd
   0F37 F0                 4831 	movx	@dptr,a
                           4832 ;	../../shared/src/dcc_cal.c:631: dcc_cnt = 0x20;
   0F38 7B 20              4833 	mov	r3,#0x20
                           4834 ;	../../shared/src/dcc_cal.c:632: in_power_on = 1;
   0F3A E5*00              4835 	mov	a,_bp
   0F3C 24 05              4836 	add	a,#0x05
   0F3E F8                 4837 	mov	r0,a
   0F3F 76 01              4838 	mov	@r0,#0x01
   0F41                    4839 00105$:
                           4840 ;	../../shared/src/dcc_cal.c:634: RXDCC_EN_EOMCLK = 1;                           //enable RXDCC_EN during power-on, never deassert
   0F41 C0 05              4841 	push	ar5
   0F43 90 00 3C           4842 	mov	dptr,#_UPHY14_TRX_ANAREG_BOT_15
   0F46 E0                 4843 	movx	a,@dptr
   0F47 44 02              4844 	orl	a,#0x02
   0F49 F0                 4845 	movx	@dptr,a
                           4846 ;	../../shared/src/dcc_cal.c:635: rxdcc_eom_step_cnt = RXDCC_EOM_CAL_STEP_SIZE;      //for power-on (inc. EXT_EN), reset fraction code to middle
   0F4A 90 E6 38           4847 	mov	dptr,#_CON_CAL_STEP_SIZE2
   0F4D E0                 4848 	movx	a,@dptr
   0F4E 90s00r00           4849 	mov	dptr,#_rxdcc_eom_step_cnt
   0F51 F0                 4850 	movx	@dptr,a
   0F52 D0 05              4851 	pop	ar5
   0F54 02s10r14           4852 	ljmp	00116$
   0F57                    4853 00115$:
                           4854 ;	../../shared/src/dcc_cal.c:637: else if (LOAD_CAL_ON) {                         //not power-on. Speed-change, load result for current rate
   0F57 90 60 08           4855 	mov	dptr,#_CAL_CTRL3_LANE
   0F5A E0                 4856 	movx	a,@dptr
   0F5B 60 47              4857 	jz	00112$
                           4858 ;	../../shared/src/dcc_cal.c:639: dcc_cnt = lnx_cal_rxdcc_eom[PWR + cmx_RXDCC_EOM_CAL_CONT_CUR_LOAD_EN][gen];
   0F5D C0 05              4859 	push	ar5
   0F5F 90 E6 33           4860 	mov	dptr,#(_CONTROL_CONFIG9 + 0x0003)
   0F62 E0                 4861 	movx	a,@dptr
   0F63 54 01              4862 	anl	a,#0x01
   0F65 75 F0 05           4863 	mov	b,#0x05
   0F68 A4                 4864 	mul	ab
   0F69 24 F5              4865 	add	a,#_lnx_cal_rxdcc_eom
   0F6B FD                 4866 	mov	r5,a
   0F6C E4                 4867 	clr	a
   0F6D 34 65              4868 	addc	a,#(_lnx_cal_rxdcc_eom >> 8)
   0F6F FA                 4869 	mov	r2,a
   0F70 E5*00              4870 	mov	a,_bp
   0F72 24 04              4871 	add	a,#0x04
   0F74 F8                 4872 	mov	r0,a
   0F75 E6                 4873 	mov	a,@r0
   0F76 2D                 4874 	add	a,r5
   0F77 F5 82              4875 	mov	dpl,a
   0F79 E4                 4876 	clr	a
   0F7A 3A                 4877 	addc	a,r2
   0F7B F5 83              4878 	mov	dph,a
   0F7D E0                 4879 	movx	a,@dptr
   0F7E FB                 4880 	mov	r3,a
                           4881 ;	../../shared/src/dcc_cal.c:640: rxdcc_eom_step_cnt = RXDCC_EOM_CAL_STEP_SIZE;     //when speed change, restore the fracition code to middle
   0F7F 90 E6 38           4882 	mov	dptr,#_CON_CAL_STEP_SIZE2
   0F82 E0                 4883 	movx	a,@dptr
   0F83 90s00r00           4884 	mov	dptr,#_rxdcc_eom_step_cnt
   0F86 F0                 4885 	movx	@dptr,a
                           4886 ;	../../shared/src/dcc_cal.c:641: RXDCC_HG_EOMCLK = lnx_cal_rxdcc_eom_hg[gen];          //load the HG setting.
   0F87 E5*00              4887 	mov	a,_bp
   0F89 24 04              4888 	add	a,#0x04
   0F8B F8                 4889 	mov	r0,a
   0F8C E6                 4890 	mov	a,@r0
   0F8D 24 FF              4891 	add	a,#_lnx_cal_rxdcc_eom_hg
   0F8F F5 82              4892 	mov	dpl,a
   0F91 E4                 4893 	clr	a
   0F92 34 65              4894 	addc	a,#(_lnx_cal_rxdcc_eom_hg >> 8)
   0F94 F5 83              4895 	mov	dph,a
   0F96 E0                 4896 	movx	a,@dptr
   0F97 FA                 4897 	mov	r2,a
   0F98 90 00 40           4898 	mov	dptr,#_UPHY14_TRX_ANAREG_BOT_16
   0F9B 13                 4899 	rrc	a
   0F9C E0                 4900 	movx	a,@dptr
   0F9D 92 E1              4901 	mov	acc.1,c
   0F9F F0                 4902 	movx	@dptr,a
   0FA0 D0 05              4903 	pop	ar5
   0FA2 80 70              4904 	sjmp	00116$
   0FA4                    4905 00112$:
                           4906 ;	../../shared/src/dcc_cal.c:643: else if (cmx_RXDCC_EOM_CAL_CONT_EN && EOM_CLK_EN == 1 && RX_SPEED_DIV < 4 ) {  //not power-on. Continious mode, only performed when EOM_CLK_EN == 1 and RX_SPEED_DIV[2]==0
   0FA4 90 E6 0F           4907 	mov	dptr,#(_CONTROL_CONFIG2 + 0x0003)
   0FA7 E0                 4908 	movx	a,@dptr
   0FA8 30 E0 5F           4909 	jnb	acc.0,00107$
   0FAB 90 02 18           4910 	mov	dptr,#_UPHY14_TRX_ANAREG_TOP_134
   0FAE E0                 4911 	movx	a,@dptr
   0FAF 03                 4912 	rr	a
   0FB0 03                 4913 	rr	a
   0FB1 54 01              4914 	anl	a,#0x01
   0FB3 FA                 4915 	mov	r2,a
   0FB4 BA 01 53           4916 	cjne	r2,#0x01,00107$
   0FB7 90 02 28           4917 	mov	dptr,#_UPHY14_TRX_ANAREG_TOP_138
   0FBA E0                 4918 	movx	a,@dptr
   0FBB 03                 4919 	rr	a
   0FBC 03                 4920 	rr	a
   0FBD 54 07              4921 	anl	a,#0x07
   0FBF FA                 4922 	mov	r2,a
   0FC0 C3                 4923 	clr	c
   0FC1 64 80              4924 	xrl	a,#0x80
   0FC3 94 84              4925 	subb	a,#0x84
   0FC5 50 43              4926 	jnc	00107$
                           4927 ;	../../shared/src/dcc_cal.c:644: RXDCC_CAL_EN = 1;
   0FC7 90 00 40           4928 	mov	dptr,#_UPHY14_TRX_ANAREG_BOT_16
   0FCA E0                 4929 	movx	a,@dptr
   0FCB 44 01              4930 	orl	a,#0x01
   0FCD F0                 4931 	movx	@dptr,a
                           4932 ;	../../shared/src/dcc_cal.c:645: TRXDCCIN_SEL = 2; // Fixed from 0 in ROM code function
   0FCE 90 00 44           4933 	mov	dptr,#_UPHY14_TRX_ANAREG_BOT_17
   0FD1 E0                 4934 	movx	a,@dptr
   0FD2 54 1F              4935 	anl	a,#0x1f
   0FD4 44 40              4936 	orl	a,#0x40
   0FD6 F0                 4937 	movx	@dptr,a
                           4938 ;	../../shared/src/dcc_cal.c:646: dcc_cnt = lnx_cal_rxdcc_eom[CONT][gen];    //always load cont result
   0FD7 E5*00              4939 	mov	a,_bp
   0FD9 24 04              4940 	add	a,#0x04
   0FDB F8                 4941 	mov	r0,a
   0FDC E6                 4942 	mov	a,@r0
   0FDD 24 FA              4943 	add	a,#(_lnx_cal_rxdcc_eom + 0x0005)
   0FDF F5 82              4944 	mov	dpl,a
   0FE1 E4                 4945 	clr	a
   0FE2 34 65              4946 	addc	a,#((_lnx_cal_rxdcc_eom + 0x0005) >> 8)
   0FE4 F5 83              4947 	mov	dph,a
   0FE6 E0                 4948 	movx	a,@dptr
   0FE7 FB                 4949 	mov	r3,a
                           4950 ;	../../shared/src/dcc_cal.c:647: RXDCC_HG_EOMCLK = lnx_cal_rxdcc_eom_hg[gen];    //load the HG setting.
   0FE8 E5*00              4951 	mov	a,_bp
   0FEA 24 04              4952 	add	a,#0x04
   0FEC F8                 4953 	mov	r0,a
   0FED E6                 4954 	mov	a,@r0
   0FEE 24 FF              4955 	add	a,#_lnx_cal_rxdcc_eom_hg
   0FF0 F5 82              4956 	mov	dpl,a
   0FF2 E4                 4957 	clr	a
   0FF3 34 65              4958 	addc	a,#(_lnx_cal_rxdcc_eom_hg >> 8)
   0FF5 F5 83              4959 	mov	dph,a
   0FF7 E0                 4960 	movx	a,@dptr
   0FF8 FA                 4961 	mov	r2,a
   0FF9 90 00 40           4962 	mov	dptr,#_UPHY14_TRX_ANAREG_BOT_16
   0FFC 13                 4963 	rrc	a
   0FFD E0                 4964 	movx	a,@dptr
   0FFE 92 E1              4965 	mov	acc.1,c
   1000 F0                 4966 	movx	@dptr,a
                           4967 ;	../../shared/src/dcc_cal.c:648: in_cont_mode = 1;                                  //when continious mode, use fraction code
   1001 E5*00              4968 	mov	a,_bp
   1003 24 06              4969 	add	a,#0x06
   1005 F8                 4970 	mov	r0,a
   1006 76 01              4971 	mov	@r0,#0x01
   1008 80 0A              4972 	sjmp	00116$
   100A                    4973 00107$:
                           4974 ;	../../shared/src/dcc_cal.c:651: lnx_RXDCC_EOM_CAL_DONE_LANE = 1;
   100A 90 60 01           4975 	mov	dptr,#(_CAL_CTRL1_LANE + 0x0001)
   100D E0                 4976 	movx	a,@dptr
   100E 44 01              4977 	orl	a,#0x01
   1010 F0                 4978 	movx	@dptr,a
                           4979 ;	../../shared/src/dcc_cal.c:652: return;
   1011 02s12r89           4980 	ljmp	00162$
   1014                    4981 00116$:
                           4982 ;	../../shared/src/dcc_cal.c:655: hg_set = RXDCC_HG_EOMCLK;
   1014 90 00 40           4983 	mov	dptr,#_UPHY14_TRX_ANAREG_BOT_16
   1017 E0                 4984 	movx	a,@dptr
   1018 03                 4985 	rr	a
   1019 54 01              4986 	anl	a,#0x01
   101B FA                 4987 	mov	r2,a
   101C E5*00              4988 	mov	a,_bp
   101E 24 07              4989 	add	a,#0x07
   1020 F8                 4990 	mov	r0,a
   1021 A6 02              4991 	mov	@r0,ar2
                           4992 ;	../../shared/src/dcc_cal.c:657: do {
   1023                    4993 00155$:
                           4994 ;	../../shared/src/dcc_cal.c:658: RXDCC_EOMCLK = dcc_cnt;
   1023 C0 05              4995 	push	ar5
   1025 8B 05              4996 	mov	ar5,r3
   1027 90 00 40           4997 	mov	dptr,#_UPHY14_TRX_ANAREG_BOT_16
   102A ED                 4998 	mov	a,r5
   102B 2D                 4999 	add	a,r5
   102C 25 E0              5000 	add	a,acc
   102E 54 FC              5001 	anl	a,#0xfc
   1030 F5 F0              5002 	mov	b,a
   1032 E0                 5003 	movx	a,@dptr
   1033 54 03              5004 	anl	a,#0x03
   1035 45 F0              5005 	orl	a,b
   1037 F0                 5006 	movx	@dptr,a
                           5007 ;	../../shared/src/dcc_cal.c:659: rxdcc_clk_toggle();
   1038 C0 03              5008 	push	ar3
   103A C0 04              5009 	push	ar4
   103C C0 05              5010 	push	ar5
   103E 78rF2              5011 	mov	r0,#_rxdcc_clk_toggle
   1040 79s06              5012 	mov	r1,#(_rxdcc_clk_toggle >> 8)
   1042 7As00              5013 	mov	r2,#(_rxdcc_clk_toggle >> 16)
   1044 12s00r00           5014 	lcall	__sdcc_banked_call
   1047 D0 05              5015 	pop	ar5
   1049 D0 04              5016 	pop	ar4
   104B D0 03              5017 	pop	ar3
                           5018 ;	../../shared/src/dcc_cal.c:661: time_out_cnt ++;
   104D 0C                 5019 	inc	r4
                           5020 ;	../../shared/src/dcc_cal.c:662: if( RXDCC_CAL_EN == 0 ) break;                                      //either LOAD, or EXT_EN in power-on
   104E 90 00 40           5021 	mov	dptr,#_UPHY14_TRX_ANAREG_BOT_16
   1051 E0                 5022 	movx	a,@dptr
   1052 D0 05              5023 	pop	ar5
   1054 20 E0 03           5024 	jb	acc.0,00207$
   1057 02s12r2A           5025 	ljmp	00157$
   105A                    5026 00207$:
                           5027 ;	../../shared/src/dcc_cal.c:663: if( lnx_CAL_DONE_LANE == 0 && RX_SPEED_DIV > 3 ) break;                  //power-on, but SPEED_DIV = 1xx, skip and keep using init code (0x20)
   105A 90 60 03           5028 	mov	dptr,#(_CAL_CTRL1_LANE + 0x0003)
   105D E0                 5029 	movx	a,@dptr
   105E 20 E0 1C           5030 	jb	acc.0,00120$
   1061 C0 05              5031 	push	ar5
   1063 90 02 28           5032 	mov	dptr,#_UPHY14_TRX_ANAREG_TOP_138
   1066 E0                 5033 	movx	a,@dptr
   1067 03                 5034 	rr	a
   1068 03                 5035 	rr	a
   1069 54 07              5036 	anl	a,#0x07
   106B FD                 5037 	mov	r5,a
   106C C3                 5038 	clr	c
   106D 74 83              5039 	mov	a,#(0x03 ^ 0x80)
   106F 8D F0              5040 	mov	b,r5
   1071 63 F0 80           5041 	xrl	b,#0x80
   1074 95 F0              5042 	subb	a,b
   1076 D0 05              5043 	pop	ar5
   1078 50 03              5044 	jnc	00209$
   107A 02s12r2A           5045 	ljmp	00157$
   107D                    5046 00209$:
   107D                    5047 00120$:
                           5048 ;	../../shared/src/dcc_cal.c:664: if( lnx_CAL_DONE_LANE == 1 && time_out_cnt > 1) break;                   //continious mode, has ran 1 round
   107D C0 05              5049 	push	ar5
   107F 90 60 03           5050 	mov	dptr,#(_CAL_CTRL1_LANE + 0x0003)
   1082 E0                 5051 	movx	a,@dptr
   1083 54 01              5052 	anl	a,#0x01
   1085 FD                 5053 	mov	r5,a
   1086 BD 01 02           5054 	cjne	r5,#0x01,00210$
   1089 80 04              5055 	sjmp	00211$
   108B                    5056 00210$:
   108B D0 05              5057 	pop	ar5
   108D 80 0C              5058 	sjmp	00123$
   108F                    5059 00211$:
   108F D0 05              5060 	pop	ar5
   1091 74 01              5061 	mov	a,#0x01
   1093 B5 04 00           5062 	cjne	a,ar4,00212$
   1096                    5063 00212$:
   1096 50 03              5064 	jnc	00213$
   1098 02s12r2A           5065 	ljmp	00157$
   109B                    5066 00213$:
   109B                    5067 00123$:
                           5068 ;	../../shared/src/dcc_cal.c:665: if( lnx_CAL_DONE_LANE == 0 && is_num_toggle_pat( dir, time_out_cnt - 1, 2 ))  { lnx_RXDCC_EOM_CAL_PASS_LANE = 1;  break; }     //power-on, toggled
   109B 90 60 03           5069 	mov	dptr,#(_CAL_CTRL1_LANE + 0x0003)
   109E E0                 5070 	movx	a,@dptr
   109F 20 E0 3C           5071 	jb	acc.0,00126$
   10A2 C0 05              5072 	push	ar5
   10A4 EC                 5073 	mov	a,r4
   10A5 14                 5074 	dec	a
   10A6 FD                 5075 	mov	r5,a
   10A7 C0 03              5076 	push	ar3
   10A9 C0 04              5077 	push	ar4
   10AB C0 05              5078 	push	ar5
   10AD 74 02              5079 	mov	a,#0x02
   10AF C0 E0              5080 	push	acc
   10B1 C0 05              5081 	push	ar5
   10B3 E5*00              5082 	mov	a,_bp
   10B5 24 03              5083 	add	a,#0x03
   10B7 F8                 5084 	mov	r0,a
   10B8 86 82              5085 	mov	dpl,@r0
   10BA 78r00              5086 	mov	r0,#_is_num_toggle_pat
   10BC 79s00              5087 	mov	r1,#(_is_num_toggle_pat >> 8)
   10BE 7As00              5088 	mov	r2,#(_is_num_toggle_pat >> 16)
   10C0 12s00r00           5089 	lcall	__sdcc_banked_call
   10C3 15 81              5090 	dec	sp
   10C5 15 81              5091 	dec	sp
   10C7 D0 05              5092 	pop	ar5
   10C9 D0 04              5093 	pop	ar4
   10CB D0 03              5094 	pop	ar3
   10CD 92*00              5095 	mov	b0,c
   10CF D0 05              5096 	pop	ar5
   10D1 30*00 0A           5097 	jnb	b0,00126$
   10D4 90 60 05           5098 	mov	dptr,#(_CAL_CTRL2_LANE + 0x0001)
   10D7 E0                 5099 	movx	a,@dptr
   10D8 44 01              5100 	orl	a,#0x01
   10DA F0                 5101 	movx	@dptr,a
   10DB 02s12r2A           5102 	ljmp	00157$
   10DE                    5103 00126$:
                           5104 ;	../../shared/src/dcc_cal.c:666: if( lnx_CAL_DONE_LANE == 0 && time_out_cnt >= RXDCC_EOM_LOOP_MAX && cmx_RXDCC_EOM_CAL_TIMEOUT_DIS == 0) break; //power-on, reached maximum rounds
   10DE 90 60 03           5105 	mov	dptr,#(_CAL_CTRL1_LANE + 0x0003)
   10E1 E0                 5106 	movx	a,@dptr
   10E2 20 E0 0F           5107 	jb	acc.0,00129$
   10E5 BC 40 00           5108 	cjne	r4,#0x40,00217$
   10E8                    5109 00217$:
   10E8 40 0A              5110 	jc	00129$
   10EA 90 E6 48           5111 	mov	dptr,#_CAL_TIME_OUT_AND_DIS
   10ED E0                 5112 	movx	a,@dptr
   10EE 20 E0 03           5113 	jb	acc.0,00219$
   10F1 02s12r2A           5114 	ljmp	00157$
   10F4                    5115 00219$:
   10F4                    5116 00129$:
                           5117 ;	../../shared/src/dcc_cal.c:668: latched_RXDCC_DN = TXDCC_DN;   //RXDCC shares TXDCC up/dn
   10F4 C0 05              5118 	push	ar5
   10F6 90 20 40           5119 	mov	dptr,#_TX_CALIBRATION_LANE
   10F9 E0                 5120 	movx	a,@dptr
   10FA 54 01              5121 	anl	a,#0x01
   10FC FA                 5122 	mov	r2,a
                           5123 ;	../../shared/src/dcc_cal.c:669: int_up = 0;
   10FD A8*00              5124 	mov	r0,_bp
   10FF 08                 5125 	inc	r0
   1100 08                 5126 	inc	r0
   1101 76 00              5127 	mov	@r0,#0x00
                           5128 ;	../../shared/src/dcc_cal.c:670: int_dn = 0;
   1103 A8*00              5129 	mov	r0,_bp
   1105 08                 5130 	inc	r0
   1106 76 00              5131 	mov	@r0,#0x00
                           5132 ;	../../shared/src/dcc_cal.c:672: if (in_cont_mode) { //continious calibration
   1108 D0 05              5133 	pop	ar5
   110A E5*00              5134 	mov	a,_bp
   110C 24 06              5135 	add	a,#0x06
   110E F8                 5136 	mov	r0,a
   110F E6                 5137 	mov	a,@r0
   1110 60 6E              5138 	jz	00144$
                           5139 ;	../../shared/src/dcc_cal.c:673: if (latched_RXDCC_DN) {rxdcc_eom_step_cnt--;}
   1112 EA                 5140 	mov	a,r2
   1113 60 0B              5141 	jz	00133$
   1115 90s00r00           5142 	mov	dptr,#_rxdcc_eom_step_cnt
   1118 E0                 5143 	movx	a,@dptr
   1119 14                 5144 	dec	a
   111A 90s00r00           5145 	mov	dptr,#_rxdcc_eom_step_cnt
   111D F0                 5146 	movx	@dptr,a
   111E 80 07              5147 	sjmp	00134$
   1120                    5148 00133$:
                           5149 ;	../../shared/src/dcc_cal.c:674: else                  {rxdcc_eom_step_cnt++;}
   1120 90s00r00           5150 	mov	dptr,#_rxdcc_eom_step_cnt
   1123 E0                 5151 	movx	a,@dptr
   1124 24 01              5152 	add	a,#0x01
   1126 F0                 5153 	movx	@dptr,a
   1127                    5154 00134$:
                           5155 ;	../../shared/src/dcc_cal.c:676: if( rxdcc_eom_step_cnt == 0) {
   1127 90s00r00           5156 	mov	dptr,#_rxdcc_eom_step_cnt
   112A E0                 5157 	movx	a,@dptr
   112B FE                 5158 	mov	r6,a
   112C 70 19              5159 	jnz	00138$
                           5160 ;	../../shared/src/dcc_cal.c:677: int_up = 0;
   112E C0 05              5161 	push	ar5
   1130 A8*00              5162 	mov	r0,_bp
   1132 08                 5163 	inc	r0
   1133 08                 5164 	inc	r0
   1134 76 00              5165 	mov	@r0,#0x00
                           5166 ;	../../shared/src/dcc_cal.c:678: int_dn = 1;
   1136 A8*00              5167 	mov	r0,_bp
   1138 08                 5168 	inc	r0
   1139 76 01              5169 	mov	@r0,#0x01
                           5170 ;	../../shared/src/dcc_cal.c:679: rxdcc_eom_step_cnt = RXDCC_EOM_CAL_STEP_SIZE;  //after up/dn triggered, reset fraction code to middle
   113B 90 E6 38           5171 	mov	dptr,#_CON_CAL_STEP_SIZE2
   113E E0                 5172 	movx	a,@dptr
   113F 90s00r00           5173 	mov	dptr,#_rxdcc_eom_step_cnt
   1142 F0                 5174 	movx	@dptr,a
   1143 D0 05              5175 	pop	ar5
   1145 80 54              5176 	sjmp	00145$
   1147                    5177 00138$:
                           5178 ;	../../shared/src/dcc_cal.c:681: else if(rxdcc_eom_step_cnt>=(RXDCC_EOM_CAL_STEP_SIZE<<1)) {
   1147 C0 05              5179 	push	ar5
   1149 90 E6 38           5180 	mov	dptr,#_CON_CAL_STEP_SIZE2
   114C E0                 5181 	movx	a,@dptr
   114D FD                 5182 	mov	r5,a
   114E E4                 5183 	clr	a
   114F CD                 5184 	xch	a,r5
   1150 25 E0              5185 	add	a,acc
   1152 CD                 5186 	xch	a,r5
   1153 33                 5187 	rlc	a
   1154 FA                 5188 	mov	r2,a
   1155 8E 07              5189 	mov	ar7,r6
   1157 7E 00              5190 	mov	r6,#0x00
   1159 C3                 5191 	clr	c
   115A EF                 5192 	mov	a,r7
   115B 9D                 5193 	subb	a,r5
   115C EE                 5194 	mov	a,r6
   115D 64 80              5195 	xrl	a,#0x80
   115F 8A F0              5196 	mov	b,r2
   1161 63 F0 80           5197 	xrl	b,#0x80
   1164 95 F0              5198 	subb	a,b
   1166 D0 05              5199 	pop	ar5
   1168 40 31              5200 	jc	00145$
                           5201 ;	../../shared/src/dcc_cal.c:682: int_up = 1;
   116A A8*00              5202 	mov	r0,_bp
   116C 08                 5203 	inc	r0
   116D 08                 5204 	inc	r0
   116E 76 01              5205 	mov	@r0,#0x01
                           5206 ;	../../shared/src/dcc_cal.c:683: int_dn = 0;
   1170 A8*00              5207 	mov	r0,_bp
   1172 08                 5208 	inc	r0
   1173 76 00              5209 	mov	@r0,#0x00
                           5210 ;	../../shared/src/dcc_cal.c:684: rxdcc_eom_step_cnt = RXDCC_EOM_CAL_STEP_SIZE;  //after up/dn triggered, reset fraction code to middle
   1175 90 E6 38           5211 	mov	dptr,#_CON_CAL_STEP_SIZE2
   1178 E0                 5212 	movx	a,@dptr
   1179 FA                 5213 	mov	r2,a
   117A 90s00r00           5214 	mov	dptr,#_rxdcc_eom_step_cnt
   117D F0                 5215 	movx	@dptr,a
   117E 80 1B              5216 	sjmp	00145$
   1180                    5217 00144$:
                           5218 ;	../../shared/src/dcc_cal.c:688: if (latched_RXDCC_DN) {int_up = 0; int_dn = 1;}
   1180 EA                 5219 	mov	a,r2
   1181 60 0D              5220 	jz	00141$
   1183 A8*00              5221 	mov	r0,_bp
   1185 08                 5222 	inc	r0
   1186 08                 5223 	inc	r0
   1187 76 00              5224 	mov	@r0,#0x00
   1189 A8*00              5225 	mov	r0,_bp
   118B 08                 5226 	inc	r0
   118C 76 01              5227 	mov	@r0,#0x01
   118E 80 0B              5228 	sjmp	00145$
   1190                    5229 00141$:
                           5230 ;	../../shared/src/dcc_cal.c:689: else                  {int_up = 1; int_dn = 0;}
   1190 A8*00              5231 	mov	r0,_bp
   1192 08                 5232 	inc	r0
   1193 08                 5233 	inc	r0
   1194 76 01              5234 	mov	@r0,#0x01
   1196 A8*00              5235 	mov	r0,_bp
   1198 08                 5236 	inc	r0
   1199 76 00              5237 	mov	@r0,#0x00
   119B                    5238 00145$:
                           5239 ;	../../shared/src/dcc_cal.c:692: if (int_dn == 1) {
   119B A8*00              5240 	mov	r0,_bp
   119D 08                 5241 	inc	r0
   119E B6 01 19           5242 	cjne	@r0,#0x01,00149$
                           5243 ;	../../shared/src/dcc_cal.c:693: dcc_cnt = sign_abs_dn(dcc_cnt);
   11A1 8B 82              5244 	mov	dpl,r3
   11A3 C0 04              5245 	push	ar4
   11A5 C0 05              5246 	push	ar5
   11A7 78r00              5247 	mov	r0,#_sign_abs_dn
   11A9 79s00              5248 	mov	r1,#(_sign_abs_dn >> 8)
   11AB 7As00              5249 	mov	r2,#(_sign_abs_dn >> 16)
   11AD 12s00r00           5250 	lcall	__sdcc_banked_call
   11B0 AA 82              5251 	mov	r2,dpl
   11B2 D0 05              5252 	pop	ar5
   11B4 D0 04              5253 	pop	ar4
   11B6 8A 03              5254 	mov	ar3,r2
   11B8 80 27              5255 	sjmp	00150$
   11BA                    5256 00149$:
                           5257 ;	../../shared/src/dcc_cal.c:695: else if (int_up == 1) {
   11BA A8*00              5258 	mov	r0,_bp
   11BC 08                 5259 	inc	r0
   11BD 08                 5260 	inc	r0
   11BE B6 01 20           5261 	cjne	@r0,#0x01,00150$
                           5262 ;	../../shared/src/dcc_cal.c:696: dir |= 1;
   11C1 E5*00              5263 	mov	a,_bp
   11C3 24 03              5264 	add	a,#0x03
   11C5 F8                 5265 	mov	r0,a
   11C6 E6                 5266 	mov	a,@r0
   11C7 44 01              5267 	orl	a,#0x01
   11C9 F6                 5268 	mov	@r0,a
                           5269 ;	../../shared/src/dcc_cal.c:697: dcc_cnt = sign_abs_up(dcc_cnt);
   11CA 8B 82              5270 	mov	dpl,r3
   11CC C0 04              5271 	push	ar4
   11CE C0 05              5272 	push	ar5
   11D0 78r00              5273 	mov	r0,#_sign_abs_up
   11D2 79s00              5274 	mov	r1,#(_sign_abs_up >> 8)
   11D4 7As00              5275 	mov	r2,#(_sign_abs_up >> 16)
   11D6 12s00r00           5276 	lcall	__sdcc_banked_call
   11D9 AA 82              5277 	mov	r2,dpl
   11DB D0 05              5278 	pop	ar5
   11DD D0 04              5279 	pop	ar4
   11DF 8A 03              5280 	mov	ar3,r2
   11E1                    5281 00150$:
                           5282 ;	../../shared/src/dcc_cal.c:699: dir<<=1;
   11E1 E5*00              5283 	mov	a,_bp
   11E3 24 03              5284 	add	a,#0x03
   11E5 F8                 5285 	mov	r0,a
   11E6 E6                 5286 	mov	a,@r0
   11E7 25 E0              5287 	add	a,acc
   11E9 F6                 5288 	mov	@r0,a
                           5289 ;	../../shared/src/dcc_cal.c:700: dir = dir & 0x3f;
   11EA E5*00              5290 	mov	a,_bp
   11EC 24 03              5291 	add	a,#0x03
   11EE F8                 5292 	mov	r0,a
   11EF E6                 5293 	mov	a,@r0
   11F0 54 3F              5294 	anl	a,#0x3F
   11F2 F6                 5295 	mov	@r0,a
                           5296 ;	../../shared/src/dcc_cal.c:704: if (in_power_on && ( ( dcc_cnt & 0x1f ) == 24) && (hg_set == 0)){
   11F3 E5*00              5297 	mov	a,_bp
   11F5 24 05              5298 	add	a,#0x05
   11F7 F8                 5299 	mov	r0,a
   11F8 E6                 5300 	mov	a,@r0
   11F9 70 03              5301 	jnz	00229$
   11FB 02s10r23           5302 	ljmp	00155$
   11FE                    5303 00229$:
   11FE 74 1F              5304 	mov	a,#0x1F
   1200 5B                 5305 	anl	a,r3
   1201 FA                 5306 	mov	r2,a
   1202 BA 18 02           5307 	cjne	r2,#0x18,00230$
   1205 80 03              5308 	sjmp	00231$
   1207                    5309 00230$:
   1207 02s10r23           5310 	ljmp	00155$
   120A                    5311 00231$:
   120A E5*00              5312 	mov	a,_bp
   120C 24 07              5313 	add	a,#0x07
   120E F8                 5314 	mov	r0,a
   120F E6                 5315 	mov	a,@r0
   1210 60 03              5316 	jz	00232$
   1212 02s10r23           5317 	ljmp	00155$
   1215                    5318 00232$:
                           5319 ;	../../shared/src/dcc_cal.c:706: RXDCC_HG_EOMCLK = 1;
   1215 90 00 40           5320 	mov	dptr,#_UPHY14_TRX_ANAREG_BOT_16
   1218 E0                 5321 	movx	a,@dptr
   1219 44 02              5322 	orl	a,#0x02
   121B F0                 5323 	movx	@dptr,a
                           5324 ;	../../shared/src/dcc_cal.c:707: hg_set = 1;
   121C E5*00              5325 	mov	a,_bp
   121E 24 07              5326 	add	a,#0x07
   1220 F8                 5327 	mov	r0,a
   1221 76 01              5328 	mov	@r0,#0x01
                           5329 ;	../../shared/src/dcc_cal.c:708: dcc_cnt = 0x20;
   1223 7B 20              5330 	mov	r3,#0x20
                           5331 ;	../../shared/src/dcc_cal.c:709: time_out_cnt = 0;
   1225 7C 00              5332 	mov	r4,#0x00
                           5333 ;	../../shared/src/dcc_cal.c:712: } while (1);
   1227 02s10r23           5334 	ljmp	00155$
   122A                    5335 00157$:
                           5336 ;	../../shared/src/dcc_cal.c:715: if (lnx_CAL_DONE_LANE == 0) {                            //if power-on calibration
   122A 90 60 03           5337 	mov	dptr,#(_CAL_CTRL1_LANE + 0x0003)
   122D E0                 5338 	movx	a,@dptr
   122E 20 E0 2F           5339 	jb	acc.0,00159$
                           5340 ;	../../shared/src/dcc_cal.c:716: lnx_cal_rxdcc_eom[PWR][gen] = dcc_cnt;       //save to power-on result
   1231 E5*00              5341 	mov	a,_bp
   1233 24 04              5342 	add	a,#0x04
   1235 F8                 5343 	mov	r0,a
   1236 E6                 5344 	mov	a,@r0
   1237 24 F5              5345 	add	a,#_lnx_cal_rxdcc_eom
   1239 F5 82              5346 	mov	dpl,a
   123B E4                 5347 	clr	a
   123C 34 65              5348 	addc	a,#(_lnx_cal_rxdcc_eom >> 8)
   123E F5 83              5349 	mov	dph,a
   1240 EB                 5350 	mov	a,r3
   1241 F0                 5351 	movx	@dptr,a
                           5352 ;	../../shared/src/dcc_cal.c:717: lnx_cal_rxdcc_eom_hg[gen] = (RXDCC_HG_EOMCLK & 0x01) | 0x0; //save the HG setting for current rate, will be loaded by continious mode
   1242 E5*00              5353 	mov	a,_bp
   1244 24 04              5354 	add	a,#0x04
   1246 F8                 5355 	mov	r0,a
   1247 E6                 5356 	mov	a,@r0
   1248 24 FF              5357 	add	a,#_lnx_cal_rxdcc_eom_hg
   124A FA                 5358 	mov	r2,a
   124B E4                 5359 	clr	a
   124C 34 65              5360 	addc	a,#(_lnx_cal_rxdcc_eom_hg >> 8)
   124E FC                 5361 	mov	r4,a
   124F 90 00 40           5362 	mov	dptr,#_UPHY14_TRX_ANAREG_BOT_16
   1252 E0                 5363 	movx	a,@dptr
   1253 03                 5364 	rr	a
   1254 54 01              5365 	anl	a,#0x01
   1256 FE                 5366 	mov	r6,a
   1257 53 06 01           5367 	anl	ar6,#0x01
   125A 8A 82              5368 	mov	dpl,r2
   125C 8C 83              5369 	mov	dph,r4
   125E EE                 5370 	mov	a,r6
   125F F0                 5371 	movx	@dptr,a
   1260                    5372 00159$:
                           5373 ;	../../shared/src/dcc_cal.c:719: lnx_cal_rxdcc_eom[CONT][gen] = dcc_cnt;     //no matter power-on or LOAD or continuous, need to save to [CONT]
   1260 E5*00              5374 	mov	a,_bp
   1262 24 04              5375 	add	a,#0x04
   1264 F8                 5376 	mov	r0,a
   1265 E6                 5377 	mov	a,@r0
   1266 24 FA              5378 	add	a,#(_lnx_cal_rxdcc_eom + 0x0005)
   1268 F5 82              5379 	mov	dpl,a
   126A E4                 5380 	clr	a
   126B 34 65              5381 	addc	a,#((_lnx_cal_rxdcc_eom + 0x0005) >> 8)
   126D F5 83              5382 	mov	dph,a
   126F EB                 5383 	mov	a,r3
   1270 F0                 5384 	movx	@dptr,a
                           5385 ;	../../shared/src/dcc_cal.c:722: if (saved_eom_clk_en == 0) {   //set EOM_CLK_EN back to 0 if it was 0 before power-on calibration
   1271 ED                 5386 	mov	a,r5
   1272 70 07              5387 	jnz	00161$
                           5388 ;	../../shared/src/dcc_cal.c:723: EOM_CLK_EN = 0;
   1274 90 02 18           5389 	mov	dptr,#_UPHY14_TRX_ANAREG_TOP_134
   1277 E0                 5390 	movx	a,@dptr
   1278 54 FB              5391 	anl	a,#0xfb
   127A F0                 5392 	movx	@dptr,a
   127B                    5393 00161$:
                           5394 ;	../../shared/src/dcc_cal.c:725: RXDCC_CAL_EN = 0;
   127B 90 00 40           5395 	mov	dptr,#_UPHY14_TRX_ANAREG_BOT_16
   127E E0                 5396 	movx	a,@dptr
   127F 54 FE              5397 	anl	a,#0xfe
   1281 F0                 5398 	movx	@dptr,a
                           5399 ;	../../shared/src/dcc_cal.c:726: lnx_RXDCC_EOM_CAL_DONE_LANE = 1;
   1282 90 60 01           5400 	mov	dptr,#(_CAL_CTRL1_LANE + 0x0001)
   1285 E0                 5401 	movx	a,@dptr
   1286 44 01              5402 	orl	a,#0x01
   1288 F0                 5403 	movx	@dptr,a
   1289                    5404 00162$:
   1289 85*00 81           5405 	mov	sp,_bp
   128C D0*00              5406 	pop	_bp
   128E 02s00r00           5407 	ljmp	__sdcc_banked_ret
                           5408 	.area CSEG    (CODE)
                           5409 	.area BANK2   (CODE)
                           5410 	.area CABS    (ABS,CODE)
